{"ast":null,"code":"import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nconst sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    var _sharedLicenseStatuse;\n\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (licenseKey && ((_sharedLicenseStatuse = sharedLicenseStatuses[packageName]) == null ? void 0 : _sharedLicenseStatuse.key) === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseStatus,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError();\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-license-pro/useLicenseVerifier/useLicenseVerifier.js"],"names":["React","verifyLicense","LicenseInfo","showExpiredLicenseError","showInvalidLicenseError","showNotFoundLicenseError","LicenseStatus","sharedLicenseStatuses","useLicenseVerifier","packageName","releaseInfo","useMemo","_sharedLicenseStatuse","licenseKey","getLicenseKey","key","status","acceptedScopes","includes","licenseStatus","isProduction","process","env","NODE_ENV","Invalid","NotFound","Expired"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,EAA2DC,wBAA3D,QAA2F,mCAA3F;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,MAAMC,qBAAqB,GAAG,EAA9B;AACA,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyCC,WAAzC,EAAsD;AAC3D,SAAOV,KAAK,CAACW,OAAN,CAAc,MAAM;AACzB,QAAIC,qBAAJ;;AAEA,UAAMC,UAAU,GAAGX,WAAW,CAACY,aAAZ,EAAnB;;AAEA,QAAID,UAAU,IAAI,CAAC,CAACD,qBAAqB,GAAGL,qBAAqB,CAACE,WAAD,CAA9C,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgFG,qBAAqB,CAACG,GAAvG,MAAgHF,UAAlI,EAA8I;AAC5I,aAAON,qBAAqB,CAACE,WAAD,CAArB,CAAmCO,MAA1C;AACD;;AAED,UAAMC,cAAc,GAAGR,WAAW,CAACS,QAAZ,CAAqB,SAArB,IAAkC,CAAC,SAAD,CAAlC,GAAgD,CAAC,KAAD,EAAQ,SAAR,CAAvE;AACA,UAAMC,aAAa,GAAGlB,aAAa,CAAC;AAClCS,MAAAA,WADkC;AAElCG,MAAAA,UAFkC;AAGlCI,MAAAA,cAHkC;AAIlCG,MAAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAJL,KAAD,CAAnC;AAMAhB,IAAAA,qBAAqB,CAACE,WAAD,CAArB,GAAqC;AACnCM,MAAAA,GAAG,EAAEI,aAD8B;AAEnCH,MAAAA,MAAM,EAAEG;AAF2B,KAArC;;AAKA,QAAIA,aAAa,KAAKb,aAAa,CAACkB,OAApC,EAA6C;AAC3CpB,MAAAA,uBAAuB;AACxB,KAFD,MAEO,IAAIe,aAAa,KAAKb,aAAa,CAACmB,QAApC,EAA8C;AACnDpB,MAAAA,wBAAwB;AACzB,KAFM,MAEA,IAAIc,aAAa,KAAKb,aAAa,CAACoB,OAApC,EAA6C;AAClDvB,MAAAA,uBAAuB;AACxB;;AAED,WAAOgB,aAAP;AACD,GA9BM,EA8BJ,CAACV,WAAD,EAAcC,WAAd,CA9BI,CAAP;AA+BD","sourcesContent":["import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nconst sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    var _sharedLicenseStatuse;\n\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (licenseKey && ((_sharedLicenseStatuse = sharedLicenseStatuses[packageName]) == null ? void 0 : _sharedLicenseStatuse.key) === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseStatus,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError();\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}"]},"metadata":{},"sourceType":"module"}