{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: 'pageSizeChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || // Export if the page size value is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"sources":["E:/React/pos-system/frontend/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPageSize.js"],"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","useGridSelector","gridPageSizeSelector","gridDensityRowHeightSelector","useGridRegisterPipeProcessor","defaultPageSize","autoPageSize","mergeStateWithPageSize","pageSize","state","pagination","useGridPageSize","apiRef","props","_props$initialState2","_props$initialState2$","logger","rowHeight","current","unstable_registerControlState","stateId","propModel","propOnChange","onPageSizeChange","stateSelector","changeEvent","setPageSize","useCallback","debug","setState","forceUpdate","pageSizeApi","stateExportPreProcessing","prevState","_props$initialState","_props$initialState$p","pageSizeToExport","shouldExportPageSize","initialState","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","handleUpdateAutoPageSize","dimensions","getRootDimensions","maximumPageSizeWithoutScrollBar","Math","floor","viewportInnerSize","height","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: 'pageSizeChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || // Export if the page size value is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};"]},"metadata":{},"sourceType":"module"}