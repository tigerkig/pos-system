{"ast":null,"code":"import data from './_build.js';\nimport prefixes from './_prefixes.js';\nlet all = {};\nObject.keys(data).forEach(k => {\n  let split = k.split('|');\n  let obj = {\n    offset: Number(split[0]),\n    hem: split[1]\n  };\n\n  if (split[2]) {\n    obj.dst = split[2];\n  }\n\n  let names = data[k].split(',');\n  names.forEach(str => {\n    str = str.replace(/(^[0-9]+)\\//, (before, num) => {\n      num = Number(num);\n      return prefixes[num] + '/';\n    });\n    all[str] = obj;\n  });\n});\nall.utc = {\n  offset: 0,\n  hem: 'n' //default to northern hemisphere - (sorry!)\n\n}; //add etc/gmt+n\n\nfor (let i = -14; i <= 14; i += 0.5) {\n  let num = i;\n\n  if (num > 0) {\n    num = '+' + num;\n  }\n\n  let name = 'etc/gmt' + num;\n  all[name] = {\n    offset: i * -1,\n    //they're negative!\n    hem: 'n' //(sorry)\n\n  };\n  name = 'utc/gmt' + num; //this one too, why not.\n\n  all[name] = {\n    offset: i * -1,\n    hem: 'n'\n  };\n}\n\nexport default all;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/zonefile/unpack.js"],"names":["data","prefixes","all","Object","keys","forEach","k","split","obj","offset","Number","hem","dst","names","str","replace","before","num","utc","i","name"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,IAAIC,GAAG,GAAG,EAAV;AACAC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,OAAlB,CAA2BC,CAAD,IAAO;AAC/B,MAAIC,KAAK,GAAGD,CAAC,CAACC,KAAF,CAAQ,GAAR,CAAZ;AACA,MAAIC,GAAG,GAAG;AACRC,IAAAA,MAAM,EAAEC,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CADN;AAERI,IAAAA,GAAG,EAAEJ,KAAK,CAAC,CAAD;AAFF,GAAV;;AAIA,MAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;AACZC,IAAAA,GAAG,CAACI,GAAJ,GAAUL,KAAK,CAAC,CAAD,CAAf;AACD;;AACD,MAAIM,KAAK,GAAGb,IAAI,CAACM,CAAD,CAAJ,CAAQC,KAAR,CAAc,GAAd,CAAZ;AACAM,EAAAA,KAAK,CAACR,OAAN,CAAeS,GAAD,IAAS;AACrBA,IAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,aAAZ,EAA2B,CAACC,MAAD,EAASC,GAAT,KAAiB;AAChDA,MAAAA,GAAG,GAAGP,MAAM,CAACO,GAAD,CAAZ;AACA,aAAOhB,QAAQ,CAACgB,GAAD,CAAR,GAAgB,GAAvB;AACD,KAHK,CAAN;AAIAf,IAAAA,GAAG,CAACY,GAAD,CAAH,GAAWN,GAAX;AACD,GAND;AAOD,CAjBD;AAmBAN,GAAG,CAACgB,GAAJ,GAAU;AACRT,EAAAA,MAAM,EAAE,CADA;AAERE,EAAAA,GAAG,EAAE,GAFG,CAEC;;AAFD,CAAV,C,CAKA;;AACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAd,EAAkBA,CAAC,IAAI,EAAvB,EAA2BA,CAAC,IAAI,GAAhC,EAAqC;AACnC,MAAIF,GAAG,GAAGE,CAAV;;AACA,MAAIF,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AACD,MAAIG,IAAI,GAAG,YAAYH,GAAvB;AACAf,EAAAA,GAAG,CAACkB,IAAD,CAAH,GAAY;AACVX,IAAAA,MAAM,EAAEU,CAAC,GAAG,CAAC,CADH;AACM;AAChBR,IAAAA,GAAG,EAAE,GAFK,CAED;;AAFC,GAAZ;AAIAS,EAAAA,IAAI,GAAG,YAAYH,GAAnB,CAVmC,CAUZ;;AACvBf,EAAAA,GAAG,CAACkB,IAAD,CAAH,GAAY;AACVX,IAAAA,MAAM,EAAEU,CAAC,GAAG,CAAC,CADH;AAEVR,IAAAA,GAAG,EAAE;AAFK,GAAZ;AAID;;AAED,eAAeT,GAAf","sourcesContent":["import data from './_build.js'\nimport prefixes from './_prefixes.js'\n\nlet all = {}\nObject.keys(data).forEach((k) => {\n  let split = k.split('|')\n  let obj = {\n    offset: Number(split[0]),\n    hem: split[1]\n  }\n  if (split[2]) {\n    obj.dst = split[2]\n  }\n  let names = data[k].split(',')\n  names.forEach((str) => {\n    str = str.replace(/(^[0-9]+)\\//, (before, num) => {\n      num = Number(num)\n      return prefixes[num] + '/'\n    })\n    all[str] = obj\n  })\n})\n\nall.utc = {\n  offset: 0,\n  hem: 'n' //default to northern hemisphere - (sorry!)\n}\n\n//add etc/gmt+n\nfor (let i = -14; i <= 14; i += 0.5) {\n  let num = i\n  if (num > 0) {\n    num = '+' + num\n  }\n  let name = 'etc/gmt' + num\n  all[name] = {\n    offset: i * -1, //they're negative!\n    hem: 'n' //(sorry)\n  }\n  name = 'utc/gmt' + num //this one too, why not.\n  all[name] = {\n    offset: i * -1,\n    hem: 'n'\n  }\n}\n\nexport default all\n"]},"metadata":{},"sourceType":"module"}