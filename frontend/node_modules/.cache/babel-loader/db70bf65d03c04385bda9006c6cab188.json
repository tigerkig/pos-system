{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsIdToIdLookupSelector","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","prevCellModesModel","useRef","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","signature","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","stopCellEditMode","onCellEditStart","onCellEditStop","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateFieldInCellModesModel","newProps","_cellModesModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","value","getCellValue","error","setCellFocus","updateStateToStopCellEditMode","unstable_runPendingEditCellValueMutation","finishCellEditMode","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"]},"metadata":{},"sourceType":"module"}