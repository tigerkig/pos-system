{"ast":null,"code":"//git:blame @JuliasCaesar https://www.timeanddate.com/date/leapyear.html\nexport function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n} // unsurprisingly-nasty `typeof date` call\n\nexport function isDate(d) {\n  return Object.prototype.toString.call(d) === '[object Date]' && !isNaN(d.valueOf());\n}\nexport function isArray(input) {\n  return Object.prototype.toString.call(input) === '[object Array]';\n}\nexport function isObject(input) {\n  return Object.prototype.toString.call(input) === '[object Object]';\n}\nexport function isBoolean(input) {\n  return Object.prototype.toString.call(input) === '[object Boolean]';\n}\nexport function zeroPad(str) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let pad = '0';\n  str = str + '';\n  return str.length >= len ? str : new Array(len - str.length + 1).join(pad) + str;\n}\nexport function titleCase(str) {\n  if (!str) {\n    return '';\n  }\n\n  return str[0].toUpperCase() + str.substr(1);\n}\nexport function ordinal(i) {\n  let j = i % 10;\n  let k = i % 100;\n\n  if (j === 1 && k !== 11) {\n    return i + 'st';\n  }\n\n  if (j === 2 && k !== 12) {\n    return i + 'nd';\n  }\n\n  if (j === 3 && k !== 13) {\n    return i + 'rd';\n  }\n\n  return i + 'th';\n} //strip 'st' off '1st'..\n\nexport function toCardinal(str) {\n  str = String(str);\n  str = str.replace(/([0-9])(st|nd|rd|th)$/i, '$1');\n  return parseInt(str, 10);\n} //used mostly for cleanup of unit names, like 'months'\n\nexport function normalize() {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  str = str.toLowerCase().trim();\n  str = str.replace(/ies$/, 'y'); //'centuries'\n\n  str = str.replace(/s$/, '');\n  str = str.replace(/-/g, '');\n\n  if (str === 'day' || str === 'days') {\n    return 'date';\n  }\n\n  if (str === 'min' || str === 'mins') {\n    return 'minute';\n  }\n\n  return str;\n}\nexport function getEpoch(tmp) {\n  //support epoch\n  if (typeof tmp === 'number') {\n    return tmp;\n  } //suport date objects\n\n\n  if (isDate(tmp)) {\n    return tmp.getTime();\n  }\n\n  if (tmp.epoch) {\n    return tmp.epoch;\n  }\n\n  return null;\n} //make sure this input is a spacetime obj\n\nexport function beADate(d, s) {\n  if (isObject(d) === false) {\n    return s.clone().set(d);\n  }\n\n  return d;\n}\nexport function formatTimezone(offset) {\n  let delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const sign = offset > 0 ? '+' : '-';\n  const absOffset = Math.abs(offset);\n  const hours = zeroPad(parseInt('' + absOffset, 10));\n  const minutes = zeroPad(absOffset % 1 * 60);\n  return `${sign}${hours}${delimiter}${minutes}`;\n}","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/fns.js"],"names":["isLeapYear","year","isDate","d","Object","prototype","toString","call","isNaN","valueOf","isArray","input","isObject","isBoolean","zeroPad","str","len","pad","length","Array","join","titleCase","toUpperCase","substr","ordinal","i","j","k","toCardinal","String","replace","parseInt","normalize","toLowerCase","trim","getEpoch","tmp","getTime","epoch","beADate","s","clone","set","formatTimezone","offset","delimiter","sign","absOffset","Math","abs","hours","minutes"],"mappings":"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","sourcesContent":["//git:blame @JuliasCaesar https://www.timeanddate.com/date/leapyear.html\nexport function isLeapYear(year) { return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 }\n// unsurprisingly-nasty `typeof date` call\nexport function isDate(d) { return Object.prototype.toString.call(d) === '[object Date]' && !isNaN(d.valueOf()) }\nexport function isArray(input) { return Object.prototype.toString.call(input) === '[object Array]' }\nexport function isObject(input) { return Object.prototype.toString.call(input) === '[object Object]' }\nexport function isBoolean(input) { return Object.prototype.toString.call(input) === '[object Boolean]' }\n\nexport function zeroPad(str, len = 2) {\n  let pad = '0'\n  str = str + ''\n  return str.length >= len ? str : new Array(len - str.length + 1).join(pad) + str\n}\n\nexport function titleCase(str) {\n  if (!str) {\n    return ''\n  }\n  return str[0].toUpperCase() + str.substr(1)\n}\n\nexport function ordinal(i) {\n  let j = i % 10\n  let k = i % 100\n  if (j === 1 && k !== 11) {\n    return i + 'st'\n  }\n  if (j === 2 && k !== 12) {\n    return i + 'nd'\n  }\n  if (j === 3 && k !== 13) {\n    return i + 'rd'\n  }\n  return i + 'th'\n}\n\n//strip 'st' off '1st'..\nexport function toCardinal(str) {\n  str = String(str)\n  str = str.replace(/([0-9])(st|nd|rd|th)$/i, '$1')\n  return parseInt(str, 10)\n}\n\n//used mostly for cleanup of unit names, like 'months'\nexport function normalize(str = '') {\n  str = str.toLowerCase().trim()\n  str = str.replace(/ies$/, 'y') //'centuries'\n  str = str.replace(/s$/, '')\n  str = str.replace(/-/g, '')\n  if (str === 'day' || str === 'days') {\n    return 'date'\n  }\n  if (str === 'min' || str === 'mins') {\n    return 'minute'\n  }\n  return str\n}\n\nexport function getEpoch(tmp) {\n  //support epoch\n  if (typeof tmp === 'number') {\n    return tmp\n  }\n  //suport date objects\n  if (isDate(tmp)) {\n    return tmp.getTime()\n  }\n  if (tmp.epoch) {\n    return tmp.epoch\n  }\n  return null\n}\n\n//make sure this input is a spacetime obj\nexport function beADate(d, s) {\n  if (isObject(d) === false) {\n    return s.clone().set(d)\n  }\n  return d\n}\n\nexport function formatTimezone(offset, delimiter = '') {\n  const sign = offset > 0 ? '+' : '-'\n  const absOffset = Math.abs(offset)\n  const hours = zeroPad(parseInt('' + absOffset, 10))\n  const minutes = zeroPad((absOffset % 1) * 60)\n  return `${sign}${hours}${delimiter}${minutes}`\n}\n"]},"metadata":{},"sourceType":"module"}