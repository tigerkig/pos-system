{"ast":null,"code":"import walkTo from './set/walk.js';\nimport ms from '../data/milliseconds.js';\nimport monthLength from '../data/monthLengths.js';\nimport { months, daysBack, days } from './set/_model.js';\nimport { normalize } from '../fns.js'; // this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month'];\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n};\nkeep.week = keep.hour;\nkeep.season = keep.date;\nkeep.quarter = keep.date; // Units need to be dst adjuested\n\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n};\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n};\n\nconst addMethods = SpaceTime => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone();\n\n    if (!unit || num === 0) {\n      return s; //don't bother\n    }\n\n    let old = this.clone();\n    unit = normalize(unit);\n\n    if (unit === 'millisecond') {\n      s.epoch += num;\n      return s;\n    } // support 'fortnight' alias\n\n\n    if (unit === 'fortnight') {\n      num *= 2;\n      unit = 'week';\n    } //move forward by the estimated milliseconds (rough)\n\n\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num;\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7);\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3);\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num;\n    } //now ensure our milliseconds/etc are in-line\n\n\n    let want = {};\n\n    if (keep[unit]) {\n      keep[unit].forEach(u => {\n        want[u] = old[u]();\n      });\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset;\n      s.epoch += diff * 3600 * 1000;\n    } //ensure month/year has ticked-over\n\n\n    if (unit === 'month') {\n      want.month = old.month() + num; //month is the one unit we 'model' directly\n\n      want = months(want, old);\n    } //support coercing a week, too\n\n\n    if (unit === 'week') {\n      let sum = old.date() + num * 7;\n\n      if (sum <= 28 && sum > 1) {\n        want.date = sum;\n      }\n    }\n\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true); //ensure it's saturday\n    } //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num);\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num; // ok, model this one too\n\n        want = days(want, old, sum);\n      } //manually punt it if we haven't moved at all..\n\n\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num;\n      }\n    } // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3;\n      want.year = old.year(); // handle rollover\n\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12);\n        let remainder = want.month + Math.abs(years) * 12;\n        want.month = remainder;\n        want.year += years;\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12);\n        want.month = want.month % 12;\n        want.year += years;\n      }\n\n      want.date = old.date();\n    } //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num;\n      let haveYear = s.year();\n\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1; //approx num of leap-days\n\n        s.epoch += Math.abs(ms.day * toAdd);\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1; //approx num of leap-days\n\n        s.epoch += ms.day * toAdd;\n      }\n    } //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10;\n    } else if (unit === 'century') {\n      want.year = s.year() + 100;\n    } //keep current date, unless the month doesn't have it.\n\n\n    if (keepDate[unit]) {\n      let max = monthLength[want.month];\n      want.date = old.date();\n\n      if (want.date > max) {\n        want.date = max;\n      }\n    }\n\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want);\n    }\n\n    return s;\n  }; //subtract is only add *-1\n\n\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone();\n    return s.add(num * -1, unit);\n  }; //add aliases\n\n\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract;\n  SpaceTime.prototype.plus = SpaceTime.prototype.add;\n};\n\nexport default addMethods;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/add.js"],"names":["walkTo","ms","monthLength","months","daysBack","days","normalize","order","keep","second","slice","minute","quarterhour","hour","date","month","quarter","season","year","decade","century","week","dstAwareUnits","keepDate","addMethods","SpaceTime","prototype","add","num","unit","s","clone","old","epoch","day","want","forEach","u","diff","timezone","current","offset","sum","dayName","isSame","years","Math","floor","remainder","abs","wantYear","haveYear","toAdd","max","Object","keys","length","subtract","minus","plus"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,EAAP,MAAe,yBAAf;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,IAA3B,QAAuC,iBAAvC;AACA,SAASC,SAAT,QAA0B,WAA1B,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,CAAC,aAAD,EAAgB,QAAhB,EAA0B,QAA1B,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,OAApD,CAAd;AACA,IAAIC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAEF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CADC;AAETC,EAAAA,MAAM,EAAEJ,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAFC;AAGTE,EAAAA,WAAW,EAAEL,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAHJ;AAITG,EAAAA,IAAI,EAAEN,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAJG;AAKTI,EAAAA,IAAI,EAAEP,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CALG;AAMTK,EAAAA,KAAK,EAAER,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CANE;AAOTM,EAAAA,OAAO,EAAET,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAPA;AAQTO,EAAAA,MAAM,EAAEV,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CARC;AASTQ,EAAAA,IAAI,EAAEX,KATG;AAUTY,EAAAA,MAAM,EAAEZ,KAVC;AAWTa,EAAAA,OAAO,EAAEb;AAXA,CAAX;AAaAC,IAAI,CAACa,IAAL,GAAYb,IAAI,CAACK,IAAjB;AACAL,IAAI,CAACS,MAAL,GAAcT,IAAI,CAACM,IAAnB;AACAN,IAAI,CAACQ,OAAL,GAAeR,IAAI,CAACM,IAApB,C,CAEA;;AACA,MAAMQ,aAAa,GAAG;AACpBJ,EAAAA,IAAI,EAAE,IADc;AAEpBF,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,MAAM,EAAE,IAHY;AAIpBF,EAAAA,KAAK,EAAE,IAJa;AAKpBM,EAAAA,IAAI,EAAE,IALc;AAMpBP,EAAAA,IAAI,EAAE;AANc,CAAtB;AASA,MAAMS,QAAQ,GAAG;AACfR,EAAAA,KAAK,EAAE,IADQ;AAEfC,EAAAA,OAAO,EAAE,IAFM;AAGfC,EAAAA,MAAM,EAAE,IAHO;AAIfC,EAAAA,IAAI,EAAE;AAJS,CAAjB;;AAOA,MAAMM,UAAU,GAAIC,SAAD,IAAe;AAChCA,EAAAA,SAAS,CAACC,SAAV,CAAoBC,GAApB,GAA0B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC7C,QAAIC,CAAC,GAAG,KAAKC,KAAL,EAAR;;AAEA,QAAI,CAACF,IAAD,IAASD,GAAG,KAAK,CAArB,EAAwB;AACtB,aAAOE,CAAP,CADsB,CACb;AACV;;AACD,QAAIE,GAAG,GAAG,KAAKD,KAAL,EAAV;AACAF,IAAAA,IAAI,GAAGvB,SAAS,CAACuB,IAAD,CAAhB;;AACA,QAAIA,IAAI,KAAK,aAAb,EAA4B;AAC1BC,MAAAA,CAAC,CAACG,KAAF,IAAWL,GAAX;AACA,aAAOE,CAAP;AACD,KAX4C,CAY7C;;;AACA,QAAID,IAAI,KAAK,WAAb,EAA0B;AACxBD,MAAAA,GAAG,IAAI,CAAP;AACAC,MAAAA,IAAI,GAAG,MAAP;AACD,KAhB4C,CAiB7C;;;AACA,QAAI5B,EAAE,CAAC4B,IAAD,CAAN,EAAc;AACZC,MAAAA,CAAC,CAACG,KAAF,IAAWhC,EAAE,CAAC4B,IAAD,CAAF,GAAWD,GAAtB;AACD,KAFD,MAEO,IAAIC,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,SAAhC,EAA2C;AAChDC,MAAAA,CAAC,CAACG,KAAF,IAAWhC,EAAE,CAACiC,GAAH,IAAUN,GAAG,GAAG,CAAhB,CAAX;AACD,KAFM,MAEA,IAAIC,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,QAAnC,EAA6C;AAClDC,MAAAA,CAAC,CAACG,KAAF,IAAWhC,EAAE,CAACc,KAAH,IAAYa,GAAG,GAAG,CAAlB,CAAX;AACD,KAFM,MAEA,IAAIC,IAAI,KAAK,aAAb,EAA4B;AACjCC,MAAAA,CAAC,CAACG,KAAF,IAAWhC,EAAE,CAACU,MAAH,GAAY,EAAZ,GAAiBiB,GAA5B;AACD,KA1B4C,CA2B7C;;;AACA,QAAIO,IAAI,GAAG,EAAX;;AACA,QAAI3B,IAAI,CAACqB,IAAD,CAAR,EAAgB;AACdrB,MAAAA,IAAI,CAACqB,IAAD,CAAJ,CAAWO,OAAX,CAAoBC,CAAD,IAAO;AACxBF,QAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUL,GAAG,CAACK,CAAD,CAAH,EAAV;AACD,OAFD;AAGD;;AAED,QAAIf,aAAa,CAACO,IAAD,CAAjB,EAAyB;AACvB,YAAMS,IAAI,GAAGN,GAAG,CAACO,QAAJ,GAAeC,OAAf,CAAuBC,MAAvB,GAAgCX,CAAC,CAACS,QAAF,GAAaC,OAAb,CAAqBC,MAAlE;AACAX,MAAAA,CAAC,CAACG,KAAF,IAAWK,IAAI,GAAG,IAAP,GAAc,IAAzB;AACD,KAtC4C,CAwC7C;;;AACA,QAAIT,IAAI,KAAK,OAAb,EAAsB;AACpBM,MAAAA,IAAI,CAACpB,KAAL,GAAaiB,GAAG,CAACjB,KAAJ,KAAca,GAA3B,CADoB,CAEpB;;AACAO,MAAAA,IAAI,GAAGhC,MAAM,CAACgC,IAAD,EAAOH,GAAP,CAAb;AACD,KA7C4C,CA8C7C;;;AACA,QAAIH,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIa,GAAG,GAAGV,GAAG,CAAClB,IAAJ,KAAac,GAAG,GAAG,CAA7B;;AACA,UAAIc,GAAG,IAAI,EAAP,IAAaA,GAAG,GAAG,CAAvB,EAA0B;AACxBP,QAAAA,IAAI,CAACrB,IAAL,GAAY4B,GAAZ;AACD;AACF;;AACD,QAAIb,IAAI,KAAK,SAAT,IAAsBC,CAAC,CAACa,OAAF,OAAgB,UAA1C,EAAsD;AACpDb,MAAAA,CAAC,GAAGA,CAAC,CAACI,GAAF,CAAM,UAAN,EAAkB,IAAlB,CAAJ,CADoD,CACxB;AAC7B,KAFD,CAGA;AAHA,SAIK,IAAIL,IAAI,KAAK,MAAb,EAAqB;AACxB,UAAID,GAAG,GAAG,CAAV,EAAa;AACXO,QAAAA,IAAI,GAAG/B,QAAQ,CAAC+B,IAAD,EAAOH,GAAP,EAAYJ,GAAZ,CAAf;AACD,OAFD,MAEO;AACL;AACA,YAAIc,GAAG,GAAGV,GAAG,CAAClB,IAAJ,KAAac,GAAvB,CAFK,CAGL;;AACAO,QAAAA,IAAI,GAAG9B,IAAI,CAAC8B,IAAD,EAAOH,GAAP,EAAYU,GAAZ,CAAX;AACD,OARuB,CASxB;;;AACA,UAAId,GAAG,KAAK,CAAR,IAAaI,GAAG,CAACY,MAAJ,CAAWd,CAAX,EAAc,KAAd,CAAjB,EAAuC;AACrCK,QAAAA,IAAI,CAACrB,IAAL,GAAYkB,GAAG,CAAClB,IAAJ,KAAac,GAAzB;AACD;AACF,KAbI,CAcL;AAdK,SAeA,IAAIC,IAAI,KAAK,SAAb,EAAwB;AAC3BM,MAAAA,IAAI,CAACpB,KAAL,GAAaiB,GAAG,CAACjB,KAAJ,KAAca,GAAG,GAAG,CAAjC;AACAO,MAAAA,IAAI,CAACjB,IAAL,GAAYc,GAAG,CAACd,IAAJ,EAAZ,CAF2B,CAG3B;;AACA,UAAIiB,IAAI,CAACpB,KAAL,GAAa,CAAjB,EAAoB;AAClB,YAAI8B,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAACpB,KAAL,GAAa,EAAxB,CAAZ;AACA,YAAIiC,SAAS,GAAGb,IAAI,CAACpB,KAAL,GAAa+B,IAAI,CAACG,GAAL,CAASJ,KAAT,IAAkB,EAA/C;AACAV,QAAAA,IAAI,CAACpB,KAAL,GAAaiC,SAAb;AACAb,QAAAA,IAAI,CAACjB,IAAL,IAAa2B,KAAb;AACD,OALD,MAKO,IAAIV,IAAI,CAACpB,KAAL,IAAc,EAAlB,EAAsB;AAC3B,YAAI8B,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAACpB,KAAL,GAAa,EAAxB,CAAZ;AACAoB,QAAAA,IAAI,CAACpB,KAAL,GAAaoB,IAAI,CAACpB,KAAL,GAAa,EAA1B;AACAoB,QAAAA,IAAI,CAACjB,IAAL,IAAa2B,KAAb;AACD;;AACDV,MAAAA,IAAI,CAACrB,IAAL,GAAYkB,GAAG,CAAClB,IAAJ,EAAZ;AACD,KAfI,CAgBL;AAhBK,SAiBA,IAAIe,IAAI,KAAK,MAAb,EAAqB;AACxB,UAAIqB,QAAQ,GAAGlB,GAAG,CAACd,IAAJ,KAAaU,GAA5B;AACA,UAAIuB,QAAQ,GAAGrB,CAAC,CAACZ,IAAF,EAAf;;AACA,UAAIiC,QAAQ,GAAGD,QAAf,EAAyB;AACvB,YAAIE,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAWnB,GAAG,GAAG,CAAjB,KAAuB,CAAnC,CADuB,CACc;;AACrCE,QAAAA,CAAC,CAACG,KAAF,IAAWa,IAAI,CAACG,GAAL,CAAShD,EAAE,CAACiC,GAAH,GAASkB,KAAlB,CAAX;AACD,OAHD,MAGO,IAAID,QAAQ,GAAGD,QAAf,EAAyB;AAC9B,YAAIE,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAWnB,GAAG,GAAG,CAAjB,KAAuB,CAAnC,CAD8B,CACO;;AACrCE,QAAAA,CAAC,CAACG,KAAF,IAAWhC,EAAE,CAACiC,GAAH,GAASkB,KAApB;AACD;AACF,KAVI,CAWL;AAXK,SAYA,IAAIvB,IAAI,KAAK,QAAb,EAAuB;AAC1BM,MAAAA,IAAI,CAACjB,IAAL,GAAYY,CAAC,CAACZ,IAAF,KAAW,EAAvB;AACD,KAFI,MAEE,IAAIW,IAAI,KAAK,SAAb,EAAwB;AAC7BM,MAAAA,IAAI,CAACjB,IAAL,GAAYY,CAAC,CAACZ,IAAF,KAAW,GAAvB;AACD,KAzG4C,CA0G7C;;;AACA,QAAIK,QAAQ,CAACM,IAAD,CAAZ,EAAoB;AAClB,UAAIwB,GAAG,GAAGnD,WAAW,CAACiC,IAAI,CAACpB,KAAN,CAArB;AACAoB,MAAAA,IAAI,CAACrB,IAAL,GAAYkB,GAAG,CAAClB,IAAJ,EAAZ;;AACA,UAAIqB,IAAI,CAACrB,IAAL,GAAYuC,GAAhB,EAAqB;AACnBlB,QAAAA,IAAI,CAACrB,IAAL,GAAYuC,GAAZ;AACD;AACF;;AACD,QAAIC,MAAM,CAACC,IAAP,CAAYpB,IAAZ,EAAkBqB,MAAlB,GAA2B,CAA/B,EAAkC;AAChCxD,MAAAA,MAAM,CAAC8B,CAAD,EAAIK,IAAJ,CAAN;AACD;;AACD,WAAOL,CAAP;AACD,GAtHD,CADgC,CAyHhC;;;AACAL,EAAAA,SAAS,CAACC,SAAV,CAAoB+B,QAApB,GAA+B,UAAU7B,GAAV,EAAeC,IAAf,EAAqB;AAClD,QAAIC,CAAC,GAAG,KAAKC,KAAL,EAAR;AACA,WAAOD,CAAC,CAACH,GAAF,CAAMC,GAAG,GAAG,CAAC,CAAb,EAAgBC,IAAhB,CAAP;AACD,GAHD,CA1HgC,CA8HhC;;;AACAJ,EAAAA,SAAS,CAACC,SAAV,CAAoBgC,KAApB,GAA4BjC,SAAS,CAACC,SAAV,CAAoB+B,QAAhD;AACAhC,EAAAA,SAAS,CAACC,SAAV,CAAoBiC,IAApB,GAA2BlC,SAAS,CAACC,SAAV,CAAoBC,GAA/C;AACD,CAjID;;AAmIA,eAAeH,UAAf","sourcesContent":["import walkTo from './set/walk.js'\nimport ms from '../data/milliseconds.js'\nimport monthLength from '../data/monthLengths.js'\nimport { months, daysBack, days } from './set/_model.js'\nimport { normalize } from '../fns.js'\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month']\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n}\nkeep.week = keep.hour\nkeep.season = keep.date\nkeep.quarter = keep.date\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n}\n\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n}\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone()\n\n    if (!unit || num === 0) {\n      return s //don't bother\n    }\n    let old = this.clone()\n    unit = normalize(unit)\n    if (unit === 'millisecond') {\n      s.epoch += num\n      return s\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2\n      unit = 'week'\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7)\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3)\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {}\n    if (keep[unit]) {\n      keep[unit].forEach((u) => {\n        want[u] = old[u]()\n      })\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset\n      s.epoch += diff * 3600 * 1000\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num\n      //month is the one unit we 'model' directly\n      want = months(want, old)\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + num * 7\n      if (sum <= 28 && sum > 1) {\n        want.date = sum\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true) //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num)\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num\n        // ok, model this one too\n        want = days(want, old, sum)\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3\n      want.year = old.year()\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12)\n        let remainder = want.month + Math.abs(years) * 12\n        want.month = remainder\n        want.year += years\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12)\n        want.month = want.month % 12\n        want.year += years\n      }\n      want.date = old.date()\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num\n      let haveYear = s.year()\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd)\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += ms.day * toAdd\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10\n    } else if (unit === 'century') {\n      want.year = s.year() + 100\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month]\n      want.date = old.date()\n      if (want.date > max) {\n        want.date = max\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want)\n    }\n    return s\n  }\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone()\n    return s.add(num * -1, unit)\n  }\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract\n  SpaceTime.prototype.plus = SpaceTime.prototype.add\n}\n\nexport default addMethods\n"]},"metadata":{},"sourceType":"module"}