import React, { useState, useEffect } from 'react'
import axios from 'axios';
import { Link } from "react-router-dom";
import { Button } from "reactstrap";
import { FiArrowLeft, FiArrowRight } from "react-icons/fi";
import CreatableSelect from 'react-select/creatable';
import Select from 'react-select'
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import SunEditor from 'suneditor-react';
import Checkbox from '@mui/material/Checkbox';
import FormControlLabel from '@mui/material/FormControlLabel';
import Dropzone from 'react-dropzone-uploader'
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import { useNavigate } from "react-router-dom";
import { AiOutlinePlus, AiOutlinePercentage } from "react-icons/ai";
import { IoTrashOutline } from "react-icons/io5";
import { TbCurrencyDollar } from "react-icons/tb";
import { useToasts } from 'react-toast-notifications';
import Switch from "react-switch";
import _ from 'lodash'
import 'react-dropzone-uploader/dist/styles.css'
import "../online/online.css"
import 'suneditor/dist/css/suneditor.min.css';

const API_URL = process.env.REACT_APP_API_URL
const brand = []
const productType = []
const Supplier = []
const Attribute = []
var imageUrl = []

const SKUCodeTypeOriginal = [
     { value: 'autoGenerated', label: 'Auto-Generated' },
     { value: 'custom', label: 'Custom' },
     { value: 'ean', label: 'EAN' },
     { value: 'isbn', label: 'ISBN' },
     { value: 'itf', label: 'ITF' },
     { value: 'jan', label: 'JAN' },
     { value: 'upc', label: 'UPC' }
]
const TaxArray = [
     { value: 'default', label: 'Default Tax for this outlet' },
     { value: 'noTax', label: 'No Tax(0%)' },
]

const AddProduct = () => {
     const navigate = useNavigate();
     const { addToast } = useToasts();
     const [brandModalOpen, setBrandModalOpen] = useState(false);
     const [typeModalOpen, setTypeModalOpen] = useState(false);
     const [variantModalOpen, setVariantModalOpen] = useState(false);
     const [supplierModalOpen, setSupplierModalOpen] = useState(false);
     const [isSell, setIsSell] = useState(false);
     const [inventory, setInventory] = useState(false);
     var [tags, setTags] = useState([]);
     var [generateSKU, setGenerateSKU] = useState('');

     const [productName, setProudctName] = useState('');
     const [productDescription, setProductDescription] = useState('');
     const [newBrandName, setNewBrandName] = useState('');
     const [newAttributeName, setNewAttributeName] = useState('');
     const [newSupplierName, setNewSupplierName] = useState('');
     const [newBrandDescription, setNewBrandDescription] = useState('');
     const [newSupplierDescription, setNewSupplierDescription] = useState('');
     const [newProductTypeName, setNewProductTypeName] = useState('');
     const [tax, setTax] = useState('');
     const [markup, setMarkup] = useState('');
     const [retailPrice, setRetailPrice] = useState('');

     const [addCreateSelectBrand, setAddCreateSelectBrand] = useState({});
     const [addCreateSelectSupplier, setAddCreateSelectSupplier] = useState({});
     const [addCreateSelectAttribute, setAddCreateSelectAttribute] = useState({});
     const [addCreateSelectProductType, setAddCreateSelectProductType] = useState({});

     const [uploadedImageURL, setUploadedImageURL] = useState([]);

     const [productCardActive, setProductCardActive] = useState(1);
     const [selectSKUCode, setSelectSKUCode] = useState(1);
     const [newSKUType, setNewSKUType] = useState([
          {
               type: '',
               code: ''
          }
     ]);
     const [newSupplier, setNewSupplier] = useState([
          {
               type: '',
               code: '',
               price: ''
          }
     ]);
     const [newAttribute, setNewAttribute] = useState([
          {
               type: '',
               value: ''
          }
     ]);

     var [newVariant, setNewVariant] = useState([]);
     const [newRelationShip, setNewRelationShip] = useState('');
     const [newRelationShip_1, setNewRelationShip_1] = useState('');
     const [currentInventory, setCurrentInventory] = useState('');
     const [re_order_point, set_re_order_point] = useState('');
     const [re_order_quantity, set_re_order_quantity] = useState('');

     const [scrollPosition, setScrollPosition] = useState(0);
     const [compositeCustomSKU, setCompositeCustomSKU] = useState('');
     
     const modalClose = (index) => {
          switch (index) {
               case 'supplierModal':
                    setSupplierModalOpen(false)
                    break;
               case 'brandModal':
                    setBrandModalOpen(false)
                    break;
               case 'productTypeModal':
                    setTypeModalOpen(false)
                    break;
               case 'variantModal':
                    setVariantModalOpen(false)
                    break;
          }
     }

     const changeCreatableSelect = (index, e) => {
          switch (index) {
               case 'chooseBrand':
                    if (e && e.__isNew__) {
                         setAddCreateSelectBrand({ value: e.value, label: e.label })
                         setNewBrandName(e.value)
                         setBrandModalOpen(true)
                    } else if (e) {
                         setAddCreateSelectBrand({ value: e.value, label: e.label })
                    } else {
                         setAddCreateSelectBrand('')
                    }
                    break;
               case 'chooseProductType':
                    if (e && e.__isNew__) {
                         setAddCreateSelectProductType({ value: e.value, label: e.label })
                         setNewProductTypeName(e.value)
                         setTypeModalOpen(true)
                    } else if (e) {
                         setAddCreateSelectProductType({ value: e.value, label: e.label })
                    } else {
                         setAddCreateSelectProductType('')
                    }
                    break;
          }
     }
     console.log("API_URL", API_URL)
     const addBrand = () => {
          var data = { name: newBrandName, description: newBrandDescription }
          axios.post(API_URL + "brand/addBrand", data)
               .then(res => {
                    if (res.status === 200) {
                         addToast(res.data.msg, { appearance: 'success' });
                         brand.push(addCreateSelectBrand)
                         setBrandModalOpen(false)
                         return
                    }
                    addToast(res.data.msg, { appearance: 'error' });
               })
     }

     const addProductType = () => {
          var data = { type: newProductTypeName }
          axios.post(API_URL + "productType/addProductType", data)
               .then(res => {
                    if (res.status === 200) {
                         addToast(res.data.msg, { appearance: 'success' });
                         productType.push(addCreateSelectProductType)
                         setTypeModalOpen(false)
                         return
                    }
                    addToast(res.data.msg, { appearance: 'error' });
               })
     }

     const addVariantAttribute = () => {
          var data = { name: newAttributeName }
          axios.post(API_URL + "product/addVariant", data)
               .then(res => {
                    if (res.status === 200) {
                         addToast(res.data.msg, { appearance: 'success' });
                         Attribute.push(addCreateSelectAttribute)
                         setVariantModalOpen(false)
                         return
                    }
                    addToast(res.data.msg, { appearance: 'error' });
               })
     }

     const addSupplier = () => {
          var data = { name: newSupplierName, description: newSupplierDescription }
          axios.post(API_URL + "product/addSupplier", data)
               .then(res => {
                    if (res.status === 200) {
                         addToast(res.data.msg, { appearance: 'success' });
                         Supplier.push(addCreateSelectSupplier)
                         setSupplierModalOpen(false)
                         return
                    }
                    addToast(res.data.msg, { appearance: 'error' });
               })
     }

     const handleSubmit = (files, allFiles) => {

          console.log(uploadedImageURL)
     }

     const getUploadParams = ({ meta }) => {
          return { url: API_URL + 'product/imageUpload' }
     }

     const handleChangeStatus = ({ meta, file, xhr }, status) => {
          if (status == "done" && xhr.status == 200) {
               var data = JSON.parse(xhr.response)
               imageUrl.push(data.images)
               setUploadedImageURL(imageUrl)
               console.log(imageUrl)
               addToast(data.msg, { appearance: 'success' });
          }

          if (status == 'removed') {
               var formData = new FormData();
               formData.append('file', file);
               axios.post(API_URL + 'product/imageRemove', formData)
                    .then(res => {
                         var index = imageUrl.indexOf(res.data.name);
                         if (index !== -1) {
                              imageUrl.splice(index, 1);
                         }

                         if (res.status === 200) {
                              addToast(res.data.msg, { appearance: 'success' });
                              return
                         }
                         addToast(res.data.msg, { appearance: 'error' });
                    })
          }

          // console.log(status, meta, file)
     }

     const chooseProduct = (selected) => {
          setProductCardActive(selected)
          if (selected === 1) {
               axios.post(API_URL + "product/generateSKU")
                    .then(res => {
                         setGenerateSKU(res.data.code)
                    })
          }

     }

     const addNewType = (TYPE) => {
          switch (TYPE) {
               case 'SKU':
                    setNewSKUType([...newSKUType, {
                         type: '',
                         code: ''
                    }])
                    break;
               case 'SUPPLIER':
                    setNewSupplier([...newSupplier, {
                         type: '',
                         code: '',
                         price: ''
                    }])
                    break;
               case 'ATTRIBUTE':
                    setNewAttribute([...newAttribute, {
                         type: '',
                         value: ''
                    }])
                    break;
               case 'RELATIONSHIP':
                    setNewRelationShip([...newRelationShip, {
                         type: '',
                         qty: ''
                    }])
                    break;
               case 'RELATIONSHIP_1':
                    setNewRelationShip_1([...newRelationShip_1, {
                         type: '',
                         qty: ''
                    }])
                    break;
          }
     }

     const removeAppendedType = (index, TYPE) => {
          switch (TYPE) {
               case 'SKU':
                    var rows = [...newSKUType];
                    rows.splice(index, 1);
                    setNewSKUType(rows);
                    break;
               case 'SUPPLIER':
                    var rows = [...newSupplier];
                    rows.splice(index, 1);
                    setNewSupplier(rows);
                    break;
               case 'ATTRIBUTE':
                    var rows = [...newAttribute];
                    rows.splice(index, 1);
                    buildNewVariant(rows)
                    setNewAttribute(rows);
                    break;
               case 'VARIANT':
                    var rows = [...newVariant];
                    rows.splice(index, 1);
                    setNewVariant(rows);
                    break;
               case 'RELATIONSHIP':
                    var rows = [...newRelationShip];
                    rows.splice(index, 1);
                    setNewRelationShip(rows);
                    break;
               case 'RELATIONSHIP_1':
                    var rows = [...newRelationShip_1];
                    rows.splice(index, 1);
                    setNewRelationShip_1(rows);
                    break;
          }

     }

     const changeNewType = (index, type, evnt, TYPE) => {
          switch (TYPE) {
               case 'SKU':
                    var list = [...newSKUType];
                    if (type == 'code') {
                         var { value } = evnt.target;
                         list[index][type] = value;
                    }
                    if (type == 'type') {
                         list[index][type] = evnt;
                    }
                    setNewSKUType(list);
                    break;
               case 'SUPPLIER':
                    var list = [...newSupplier];
                    if (type == 'code' || type == 'price') {
                         var { value } = evnt.target;
                         list[index][type] = value;
                    }
                    if (type == 'type') {
                         if (evnt && evnt.__isNew__) {
                              list[index][type] = { value: evnt.value, label: evnt.label }
                              setAddCreateSelectSupplier({ value: evnt.value, label: evnt.label, isDisabled: true })
                              setNewSupplierName(evnt.value)
                              setSupplierModalOpen(true)
                         } else {
                              list[index][type] = evnt
                         }

                         Object.keys(Supplier).find(key => {
                              Supplier[key].isDisabled = false
                              list.filter(option => {
                                   if (option.type === Supplier[key]) {
                                        Supplier[key].isDisabled = true
                                   }
                              })
                         })
                    }

                    console.log('Supplier', Supplier)
                    setNewSupplier(list);
                    break;
               case 'ATTRIBUTE':
                    var list = [...newAttribute];
                    if (type == 'type') {
                         if (evnt && evnt.__isNew__) {
                              list[index][type] = { value: evnt.value, label: evnt.label }
                              setAddCreateSelectAttribute({ value: evnt.value, label: evnt.label, isDisabled: true })
                              setNewAttributeName(evnt.value)
                              setVariantModalOpen(true)
                         } else {
                              list[index][type] = evnt
                         }

                         Object.keys(Attribute).find(key => {
                              Attribute[key].isDisabled = false
                              list.filter(option => {
                                   if (option.type === Attribute[key]) {
                                        Attribute[key].isDisabled = true
                                   }
                              })
                         })
                    }

                    if (type == 'value') {
                         list[index][type] = evnt
                         buildNewVariant(list)
                    }
                    setNewAttribute(list);
                    break;
               case 'VARIANT':
                    switch (type) {
                         case 'switch':
                              newVariant[index].enabled = !newVariant[index].enabled
                              break;
                         case 'retail_price':
                              newVariant[index].retail_price = evnt.target.value
                              break;
                         case 'sku_code':
                              newVariant[index].sku_code = evnt.target.value
                              break;
                         case 'supplier_code':
                              newVariant[index].supplier_code = evnt.target.value
                              break;
                         case 'supplier_price':
                              newVariant[index].supplier_price = evnt.target.value
                              break;
                    }
                    setNewVariant(newVariant);
               case 'RELATIONSHIP':
                    var list = [...newRelationShip];
                    if (type == 'qty') {
                         var { value } = evnt.target;
                         list[index][type] = value;
                    }
                    if (type == 'type') {
                         list[index][type] = evnt;
                    }
                    setNewRelationShip(list)
                    break;
               case 'RELATIONSHIP_1':
                    var list = [...newRelationShip_1];
                    if (type == 'qty') {
                         var { value } = evnt.target;
                         list[index][type] = value;
                    }
                    if (type == 'type') {
                         list[index][type] = evnt;
                    }
                    setNewRelationShip_1(list)
                    break;
          }
     }

     const buildNewVariant = (list) => {

          var array = []

          for (var no_1 = 0; no_1 < list[0].value.length; no_1++) {

               if (list[1] && list[1].value.length != 0) {
                    for (var no_2 = 0; no_2 < list[1].value.length; no_2++) {
                         if (list[2] && list[2].value.length != 0) {
                              for (var no_3 = 0; no_3 < list[2].value.length; no_3++) {
                                   array.push(list[0].value[no_1].value + '/' + list[1].value[no_2].value + '/' + list[2].value[no_3].value)
                              }
                         } else {
                              array.push(list[0].value[no_1].value + '/' + list[1].value[no_2].value)
                         }
                    }
               } else {
                    array.push(list[0].value[no_1].value)
               }
          }

          newVariant = []
          for (var i = 0; i < array.length; i++) {
               newVariant.push({
                    name: array[i],
                    sku_code: ++generateSKU,
                    supplier_code: '',
                    supplier_price: '',
                    retail_price: '',
                    enabled: true
               })
          }
          setNewVariant(newVariant)

          console.log('newVariant', newVariant)
     }

     const changeSelectSKUCode = (index) => {
          setSelectSKUCode(index)
     }

     const changeInput = (index, val) => {
          switch (index) {
               case 'retailPrice':
                    setRetailPrice(val)
                    setMarkup('')
                    break;
               case 'markup':
                    setMarkup(val)
                    setRetailPrice('')
                    break;
               case 'productName':
                    setProudctName(val)
                    break;
               case 'addAttribute':
                    setNewAttributeName(val)
                    break;
               case 'sku_code':
                    setGenerateSKU(val)
                    break;
               case 'addBrandName':
                    setAddCreateSelectBrand({ value: addCreateSelectBrand.value, label: val })
                    setNewBrandName(val)
               case 'addBrandDescription':
                    setNewBrandDescription(val)
                    break;
               case 'addSupplierName':
                    setAddCreateSelectSupplier({ value: addCreateSelectBrand.value, label: val })
                    setNewSupplierName(val)
               case 'addSupplierDescription':
                    setNewSupplierDescription(val)
                    break;
               case 'addProductTypeName':
                    setAddCreateSelectProductType({ value: addCreateSelectProductType.value, label: val })
                    setNewProductTypeName(val)
                    break;
          }
     }

     useEffect(() => {
          window.addEventListener("scroll", handleScroll);
          axios.post(API_URL + "brand")
               .then(res => {
                    res.data.data.map((item, index) => {
                         var obj = {}
                         obj.value = item.id
                         obj.label = item.name
                         brand.push(obj)
                    })
               })
          axios.post(API_URL + "productType")
               .then(res => {
                    res.data.data.map((item, index) => {
                         var obj = {}
                         obj.value = item.id
                         obj.label = item.type
                         productType.push(obj)
                    })
               })
          axios.post(API_URL + "product/generateSKU")
               .then(res => {
                    setGenerateSKU(res.data.code)
                    setNewSKUType([
                         {
                              type: {value: 'autoGenerated', label: 'Auto-Generated'},
                              code: res.data.code
                         }
                    ])
               })
          axios.post(API_URL + "product/getSupplier")
               .then(res => {
                    res.data.data.map((item, index) => {
                         var obj = {}
                         obj.value = item.id
                         obj.label = item.name
                         Supplier.push(obj)
                    })
               })
          axios.post(API_URL + "product/getVariant")
               .then(res => {
                    res.data.data.map((item, index) => {
                         var obj = {}
                         obj.value = item.id
                         obj.label = item.name
                         Attribute.push(obj)
                    })
               })
     }, [])

     const handleScroll = () => {
          const position = window.pageYOffset;
          setScrollPosition(position)
     }

     const tagsChange = (e) => {
          tags = []
          e.map((item, index) => {
               tags.push(item.value)
          })
          setTags(tags)
     }

     const ProductSave = () => {
          console.log(productName)
          console.log(addCreateSelectBrand.label)
          console.log(productDescription)
          console.log(tags)
          console.log('productType', addCreateSelectProductType.label)
          console.log('Sell on Point-of-Sale', isSell)
          console.log('uploaded Images', imageUrl)
          console.log('sku codes', newSKUType)
          console.log('supplier information', newSupplier)
          console.log('INVENTORY LEVELS', inventory)
          console.log('currentInventory', currentInventory)
          console.log('set_re_order_point', re_order_point)
          console.log('set_re_order_quantity', re_order_quantity)
          console.log('newRelationShip', newRelationShip)
          console.log('newRelationShip_1', newRelationShip_1)
          console.log('tax', tax)
          console.log('markup', markup)
          console.log('retail Price', retailPrice)
          console.log('Variant', newVariant)
          console.log('Automatically Generate a SKU', compositeCustomSKU)
          var inventory_type = ''
          switch(productCardActive) {
               case 0:
                    inventory_type = 'standard'
                    break;
               case 1:
                    inventory_type = 'variant'
                    break;
               case 2:
                    inventory_type = 'composite'
                    break;

          }
          var data = { 
               name: productName, 
               brand: addCreateSelectBrand.label, 
               description: productDescription,
               tags: tags, 
               productType: addCreateSelectProductType.label, 
               isSell: isSell, 
               img: imageUrl, 
               inventory_type: inventory_type,
               sku_code: newSKUType, 
               supplierInformation: newSupplier, 
               inventoryLevel: inventory, 
               currentInventory : currentInventory, 
               re_order_point: re_order_point, 
               re_order_quantity: re_order_quantity, 
               newRelationShip: newRelationShip, 
               newRelationShip_1: newRelationShip_1, 
               tax: tax, 
               markupPrice: markup, 
               retailPrice: retailPrice, 
               variant: newVariant, 
               compositeCustomSKU: compositeCustomSKU, 
          }
          axios.post(API_URL + "product/addProduct", data)
               .then(res => {
                    if (res.status === 200) {
                         addToast(res.data.msg, { appearance: 'success' });
                         brand.push(addCreateSelectBrand)
                         setBrandModalOpen(false)
                         navigate('/catalog/products')
                         return
                    }
                    addToast(res.data.msg, { appearance: 'error' });
               })
     }

     return (
          <>
               <div className='online-header'>
                    <h2>
                         <Link to='/catalog/products'><FiArrowLeft className='navigate-before-icon' /></Link>
                         New Product
                    </h2>
               </div>
               <div className={scrollPosition >= 100 ? 'online-title between fixed-header' : 'online-title between'}>
                    <div>
                         <p>Add, view and edit your products in one place. <Link to='' className=''>Need help?</Link></p>
                    </div>
                    <div className='products-header'>
                         <Button onClick={() => navigate('/catalog/products')} className='vd-btn--supplementary'>Cancel</Button>
                         <Button onClick={() => ProductSave()}>Save</Button>
                    </div>
               </div>

               <div className='componentPadding flex'>
                    <div className='col-md-3'>
                         <h4>General</h4>
                         <p>Change general information for this product.</p>
                    </div>
                    <div className='col-md-9 marginTop'>
                         <div className='flex input-header-margin'>
                              <div className='half-body'>
                                   <p>Name</p>
                                   <input className='vend-settings-input fullWidth max-height-input' value={productName} onChange={(e) => changeInput('productName', e.target.value)} />
                              </div>
                              <div className='margin'></div>
                              <div className='half-body'>
                                   <p>Brand</p>
                                   <CreatableSelect
                                        isClearable
                                        onChange={(e) => changeCreatableSelect('chooseBrand', e)}
                                        options={brand}
                                        value={addCreateSelectBrand}
                                        placeholder="Choose a brand" />
                              </div>
                         </div>

                         <div className="marginTop"></div>

                         <div className='input-header-margin'>
                              <p>Description</p>
                              <SunEditor onChange={(e) => setProductDescription(e)} />
                         </div>

                         <div className="marginTop"></div>

                         <div className='input-header-margin'>
                              <p><strong>Tags</strong> Describe the product using relevant keywords for easy filtering.</p>
                              <CreatableSelect
                                   isMulti
                                   onChange={(e) => tagsChange(e)}
                                   placeholder="Enter a tag name" />
                         </div>

                         <div className="marginTop"></div>

                         <div className='input-header-margin'>
                              <p><strong>Product Type</strong> Categorize your products with types that can be used to filter sales and inventory reports.</p>
                              <CreatableSelect
                                   isClearable
                                   onChange={(e) => changeCreatableSelect('chooseProductType', e)}
                                   options={productType}
                                   value={addCreateSelectProductType}
                                   placeholder="Enter a tag name" />
                         </div>

                         <div className='imageSize'>
                              <FormControlLabel
                                   value="end"
                                   control={<Checkbox onChange={() => setIsSell(!isSell)} />}
                                   label="Sell on Point-of-Sale"
                                   labelPlacement="end" />
                              <p className='description'>Make this product active and available for sale in-store</p>
                         </div>

                         <div className='marginTop'></div>

                         <div>
                              <Dropzone
                                   getUploadParams={getUploadParams}
                                   onChangeStatus={handleChangeStatus}
                                   onSubmit={handleSubmit}
                                   inputContent={(files, extra) => (extra.reject ? 'Only Image files allowed!' : 'Select and Drop Files')}
                                   styles={{
                                        dropzoneReject: { borderColor: '#F19373', backgroundColor: '#F1BDAB' },
                                        inputLabel: (files, extra) => (extra.reject ? { color: '#A02800' } : {}),
                                   }}
                                   accept="image/*"
                              />
                         </div>
                    </div>
               </div>

               <div className='divider'></div>

               <div className='componentPadding flex'>

                    <div className='col-md-3'>
                         <h4>Inventory</h4>
                         <p>The type of product we choose determines how we manage inventory and reporting.</p>
                    </div>
                    <div className='col-md-9'>
                         <div className='flex text-align-center'>
                              <div className={productCardActive == 1 ? 'col-md-4 choose-product-cards choose-product choose-product-card-active' : 'col-md-4 choose-product-cards choose-product'} onClick={() => chooseProduct(1)}>
                                   <h4>Standard Product</h4>
                                   <p>This product is a single SKU with its own inventory.</p>
                              </div>
                              <div className={productCardActive == 2 ? 'col-md-4 choose-product-cards choose-product choose-product-card-active' : 'col-md-4 choose-product-cards choose-product'} onClick={() => chooseProduct(2)}>
                                   <h4>Variant Product</h4>
                                   <p>This is a group of similar products which have different attributes, like size or color. Each variant is a unique SKU with its own inventory.</p>
                              </div>
                              <div className={productCardActive == 3 ? 'col-md-4 choose-product-cards choose-product choose-product-card-active' : 'col-md-4 choose-product-cards choose-product'} onClick={() => chooseProduct(3)}>
                                   <h4>Composite Product</h4>
                                   <p>This product is made up of specified quantities of one or more products. A composite is a single SKU but uses the inventory of the products within it.</p>
                              </div>
                         </div>

                         {productCardActive == 1 ?
                              <div>
                                   <h5>SKU CODES</h5>
                                   <div className='flex input-header-margin'>
                                        <div className='half-body'>

                                             {newSKUType.map((item, index) => {
                                                  return (
                                                       <div className='row' key={index}>
                                                            <div className='col-md-5'>
                                                                 <p>SKU Code Type</p>
                                                                 <Select
                                                                      value={
                                                                           index == 0 ?
                                                                                SKUCodeTypeOriginal.filter(option => option.value === 'autoGenerated')
                                                                                :
                                                                                item.type.value ?
                                                                                     SKUCodeTypeOriginal.filter(option => option.value === item.type.value)
                                                                                     :
                                                                                     SKUCodeTypeOriginal.filter(option => option.value === 'custom')
                                                                      }
                                                                      options={index == 0 ? SKUCodeTypeOriginal : SKUCodeTypeOriginal.filter(option => option.value !== 'autoGenerated')}
                                                                      onChange={(evnt) => changeNewType(index, 'type', evnt, 'SKU')} />
                                                            </div>
                                                            <div className={index == 0 ? 'col-md-7' : 'col-md-5'}>
                                                                 <p>SKU Code</p>
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(evnt) => changeNewType(index, 'code', evnt, 'SKU')} value={index == 0 ? generateSKU : item.code} />
                                                            </div>
                                                            {index != 0 ?
                                                                 <div className='col-md-2 remove'>
                                                                      <span onClick={() => removeAppendedType(index, 'SKU')}><IoTrashOutline /></span>
                                                                 </div> : ''
                                                            }

                                                       </div>
                                                  )
                                             })}

                                             <Button onClick={() => addNewType('SKU')}><AiOutlinePlus />Add Another Code</Button>
                                        </div>

                                        <div className='margin'></div>

                                        <div className='half-body'>
                                             <p>Preview</p>
                                             <div className='SKU-preview'>
                                                  <div className='flex'>
                                                       <div className="vd-id-badge__image" ></div>
                                                       <div>
                                                            <p>{productName ? productName : 'Product Name'}</p>
                                                            <p className='description'>{generateSKU ? generateSKU : 'generated SKU code'}</p>
                                                       </div>
                                                  </div>
                                                  <div className='divider'></div>
                                                  <p className='description'>The first SKU code will be shown to staff and customers to help identify this product. When you have multiple codes all the barcodes will be scannable.</p>
                                             </div>
                                        </div>
                                   </div>

                                   <div className='divider'></div>

                              </div> : ''
                         }

                         {productCardActive == 1 || productCardActive == 2 ?
                              <>
                                   <h5>SUPPLIER INFORMATION</h5>
                                   <div className='row input-header-margin'>
                                        <div className='col-md-4'><p>Supplier</p></div>
                                        <div className='col-md-4'><p>Supplier Code</p></div>
                                        <div className='col-md-4'><p>Supplier Price</p></div>
                                   </div>
                                   <div className='divider'></div>

                                   <div className='newSupplier'>
                                        {newSupplier.map((item, index) => {
                                             return (
                                                  <div className='row' key={index}>
                                                       <div className='col-md-4'>
                                                            <CreatableSelect
                                                                 isClearable
                                                                 value={item.type}
                                                                 onChange={(e) => changeNewType(index, 'type', e, 'SUPPLIER')}
                                                                 options={Supplier}
                                                                 placeholder="Choose a supplier" />
                                                       </div>
                                                       <div className='col-md-4'>
                                                            <input className='vend-settings-input fullWidth max-height-input' onChange={(evnt) => changeNewType(index, 'code', evnt, 'SUPPLIER')} value={item.code} placeholder='Enter supplier code' />
                                                       </div>
                                                       <div className={index == 0 ? 'col-md-4' : 'col-md-3'}>
                                                            <div className='withIconInput'>
                                                                 <TbCurrencyDollar />
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(evnt) => changeNewType(index, 'price', evnt, 'SUPPLIER')} value={item.price} placeholder='Enter the amount' type='number' />
                                                            </div>
                                                       </div>
                                                       {index != 0 ?
                                                            <div className='col-md-1 remove'>
                                                                 <span onClick={() => removeAppendedType(index, 'SUPPLIER')}><IoTrashOutline /></span>
                                                            </div> : ''
                                                       }
                                                  </div>
                                             )
                                        })}
                                   </div>

                                   <Button onClick={() => addNewType('SUPPLIER')}><AiOutlinePlus />Add Another Supplier</Button>

                                   <div className='divider'></div>

                                   <h5>INVENTORY LEVELS</h5>
                                   <div className='imageSize'>
                                        <FormControlLabel
                                             value="end"
                                             control={<Checkbox onChange={() => setInventory(!inventory)} />}
                                             label="Track Inventory for this product"
                                             labelPlacement="end" />
                                        <p className='description'>Manage orders, transfers and returns accurately, and get reports and insights on this product’s performance.</p>
                                   </div>
                              </> : ''
                         }

                         {productCardActive == 3 ?
                              <>
                                   <RadioGroup
                                        aria-labelledby="demo-radio-buttons-group-label"
                                        defaultValue="auto"
                                        name="radio-buttons-group">
                                        <div className='imageSize'>
                                             <FormControlLabel value="auto" control={<Radio onChange={() => changeSelectSKUCode(1)} />} label="Automatically Generate a SKU" />
                                             {selectSKUCode == 1 ?
                                                  <p className='description'>A SKU will automatically be generated once this product has been saved</p>
                                                  : ''
                                             }
                                        </div>
                                        <div>
                                             <FormControlLabel value="custom" control={<Radio onChange={() => changeSelectSKUCode(2)} />} label="Enter a custom SKU" />
                                             {selectSKUCode == 2 ?
                                                  <div className='paddingLeft'>
                                                       <input className='vend-settings-input fullWidth max-height-input' onChange={(e) => setCompositeCustomSKU(e.target.value)}  value={compositeCustomSKU}/>
                                                       <p className='description'>Only use lower case letters and numbers, no symbols or spaces</p>
                                                  </div> : ''
                                             }
                                        </div>
                                   </RadioGroup>
                              </> : ''
                         }

                         {productCardActive == 1 && inventory ?
                              <>
                                   <div className='row input-header-margin'>
                                        <div className='col-md-3'><p>Outlet</p></div>
                                        <div className='col-md-3'><p>Current Inventory</p></div>
                                        <div className='col-md-3'><p>Re-order Point</p></div>
                                        <div className='col-md-3'><p>Re-order Quantity</p></div>
                                   </div>
                                   <div className='divider'></div>
                                   <div className='row'>
                                        <div className='col-md-3'>
                                             <p>Main Outlet</p>
                                        </div>
                                        <div className='col-md-3'>
                                             <input className='vend-settings-input fullWidth max-height-input' type='number' onChange={(e) => setCurrentInventory(e.target.value)} />
                                        </div>
                                        <div className='col-md-3'>
                                             <input className='vend-settings-input fullWidth max-height-input' type='number' onChange={(e) => set_re_order_point(e.target.value)} />
                                        </div>
                                        <div className='col-md-3'>
                                             <input className='vend-settings-input fullWidth max-height-input' type='number' onChange={(e) => set_re_order_quantity(e.target.value)} />
                                        </div>
                                   </div>
                              </> : ''
                         }

                    </div>
               </div>

               {productCardActive == 1 ?
                    <>
                         <div className='divider'></div>

                         <div className='componentPadding flex'>
                              <div className='col-md-3'>
                                   <h4>Packaging</h4>
                                   <p>Set up packaging relationships by linking this product to other SKUs. This helps you easily manage the inventory levels across products that come in different packaging.</p>
                              </div>
                              <div className='col-md-9'>
                                   <h4>The products that this product comes from.</h4>
                                   <div className='divider'></div>

                                   {newRelationShip.length != 0 ?
                                        newRelationShip.map((item, index) => {
                                             return (
                                                  <>
                                                       <div className='flex' key={index}>
                                                            <div className='col-md-6'>
                                                                 <div className='flex'>
                                                                      <div className='fullWidth'>
                                                                           <CreatableSelect
                                                                                value={item.type}
                                                                                onChange={(e) => changeNewType(index, 'type', e, 'RELATIONSHIP')}
                                                                                options={Supplier}
                                                                                placeholder="Search or Scan to add a product" />
                                                                      </div>
                                                                      <div>
                                                                           <FiArrowRight className='ComeFromRightIcon' />
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                            <div className='col-md-6'>
                                                                 <div className='between'>
                                                                      <div className='flex'>
                                                                           <div className='third-body'>
                                                                                <input className='vend-settings-input fullWidth max-height-input' onChange={(evnt) => changeNewType(index, 'qty', evnt, 'RELATIONSHIP')} value={item.qty} placeholder='Qty' type='number' />
                                                                           </div>
                                                                           <div className='relationShip'>
                                                                                <span className='margin-zero'>Product Name</span>
                                                                                <span className='description margin-zero'>10035</span>
                                                                           </div>
                                                                      </div>
                                                                      <div>
                                                                           <div className='remove'>
                                                                                <span onClick={() => removeAppendedType(index, 'RELATIONSHIP')}><IoTrashOutline /></span>
                                                                           </div>
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                       <div className='divider'></div>
                                                  </>
                                             )
                                        }) :
                                        <>
                                             <div className='no-table'>
                                                  <img src="//vendfrontendassets.freetls.fastly.net/images/products/packaging-comes-from.svg" />
                                                  <p>If this product comes from other products, add the products here.</p>
                                             </div>
                                             <div className='divider'></div>
                                        </>
                                   }
                                   <Button onClick={() => addNewType('RELATIONSHIP')}><AiOutlinePlus />Add a Product RelationShip</Button>

                                   <div className='margin'></div>

                                   <h4>The product that this product breaks into. </h4>
                                   <span>Products can only break into one other product.</span>
                                   <div className='divider'></div>

                                   {newRelationShip_1.length != 0 ?
                                        newRelationShip_1.map((item, index) => {
                                             return (
                                                  <>
                                                       <div className='flex' key={index}>
                                                            <div className='col-md-6'>
                                                                 <div className='between fullWidth'>
                                                                      <div className='relationShip'>
                                                                           <span className='margin-zero'>Product Name</span>
                                                                           <span className='description margin-zero'>10035</span>
                                                                      </div>
                                                                      <div>
                                                                           <FiArrowRight className='ComeFromRightIcon' />
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                            <div className='col-md-6'>
                                                                 <div className='between'>
                                                                      <div className='third-body'>
                                                                           <input className='vend-settings-input fullWidth max-height-input' placeholder='Qty' type='number' />
                                                                      </div>
                                                                      <div className='fullWidth'>
                                                                           <CreatableSelect
                                                                                value={item.type}
                                                                                onChange={(e) => changeNewType(index, 'type', e, 'RELATIONSHIP_1')}
                                                                                options={Supplier}
                                                                                placeholder="Search or Scan to add a product" />
                                                                      </div>
                                                                      <div>
                                                                           <div className='remove'>
                                                                                <span onClick={() => removeAppendedType(index, 'RELATIONSHIP_1')}><IoTrashOutline /></span>
                                                                           </div>
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                       <div className='divider'></div>
                                                  </>
                                             )
                                        })
                                        :
                                        <>
                                             <div className='no-table'>
                                                  <img src="//vendfrontendassets.freetls.fastly.net/images/products/packaging-breaks-into.svg" />
                                                  <p>If this product breaks into another product, add the product here.</p>
                                             </div>
                                             <div className='divider'></div>
                                        </>
                                   }

                                   {newRelationShip_1.length <= 0 ?
                                        <Button onClick={() => addNewType('RELATIONSHIP_1')}><AiOutlinePlus />Add a Product RelationShip</Button> : ''
                                   }

                              </div>
                         </div>
                    </> : ''
               }

               {productCardActive == 3 ?
                    <>
                         <div className='divider'></div>
                         <div className='componentPadding flex'>
                              <div className='col-md-3'>
                                   <h4>Products</h4>
                                   <p>Add multiple products to create a composite product.</p>
                              </div>
                              <div className='col-md-9'>
                                   <p>Search for products to add</p>
                                   <Select options={TaxArray} placeholder='Search or Scan for products' />
                              </div>
                         </div>
                    </> : ''
               }

               <div className='divider'></div>

               <div className='componentPadding flex'>
                    <div className='col-md-3'>
                         <h4>Tax</h4>
                    </div>
                    <div className='col-md-9'>
                         <div className='row input-header-margin'>
                              <div className='col-md-3'><p>Outlet</p></div>
                              <div className='col-md-9'><p>Tax</p></div>
                         </div>
                         <div className='divider'></div>
                         <div className='row'>
                              <div className='col-md-3'><p>Main Outlet</p></div>
                              <div className='col-md-9'>
                                   <Select options={TaxArray} onChange={(e) => setTax(e.value)} />
                              </div>
                         </div>
                    </div>
               </div>

               <div className='divider'></div>

               <div className='componentPadding flex'>
                    <div className='col-md-3'>
                         <h4>Price</h4>
                    </div>
                    {productCardActive == 1 ?
                         <div className='col-md-9'>
                              <div className='row input-header-margin'>
                                   <div className='col-md-3'><p>Price Point</p></div>
                                   <div className='col-md-2'><p>Outlet</p></div>
                                   <div className='col-md-1'><p>Supply Price</p></div>
                                   <div className='col-md-3'><p>Markup</p></div>
                                   <div className='col-md-3'><p>Retail Price</p><p className='description'>Excluding Tax</p></div>
                              </div>
                              <div className='divider'></div>
                              <div className='row'>
                                   <div className='col-md-3'><p>General Price Book (All Products)</p></div>
                                   <div className='col-md-2'><p>All Outlets	</p></div>
                                   <div className='col-md-1'><p>$0.00</p></div>
                                   <div className='col-md-3'>
                                        <div className='withIconInput'>
                                             <AiOutlinePercentage />
                                             <input className='vend-settings-input fullWidth max-height-input' placeholder='Enter the amount' onChange={(e) => changeInput('markup', e.target.value)} value={markup} />
                                        </div>
                                   </div>
                                   <div className='col-md-3'>
                                        <div className='withIconInput'>
                                             <TbCurrencyDollar />
                                             <input className='vend-settings-input fullWidth max-height-input' placeholder='Enter the amount' onChange={(e) => changeInput('retailPrice', e.target.value)} value={retailPrice} />
                                        </div>
                                   </div>
                              </div>
                         </div>
                         :
                         <div className='col-md-9'>
                              <div className='row'>
                                   <div className='col-md-6 '>
                                        <p>Supply Price</p>
                                   </div>
                                   <div className='col-md-6 text-end'>
                                        <p>$0.00</p>
                                   </div>
                              </div>
                              <div className='row'>
                                   <div className='col-md-6'>
                                        <p>Markup</p>
                                   </div>
                                   <div className='col-md-6'>
                                        <div className='withIconInput'>
                                             <AiOutlinePercentage />
                                             <input className='vend-settings-input fullWidth max-height-input' placeholder='0.00' onChange={(e) => changeInput('markup', e.target.value)} value={markup} />
                                        </div>
                                   </div>
                              </div>
                              <div className='divider'></div>
                              <div className='row'>
                                   <div className='col-md-6'>
                                        <p>Retail Price <span>Excluding Tax</span></p>
                                   </div>
                                   <div className='col-md-6'>
                                        <div className='withIconInput'>
                                             <TbCurrencyDollar />
                                             <input className='vend-settings-input fullWidth max-height-input' placeholder='0.00' onChange={(e) => changeInput('retailPrice', e.target.value)} value={retailPrice} />
                                        </div>
                                   </div>
                              </div>
                         </div>
                    }



               </div>

               {productCardActive == 2 ?
                    <>
                         <div className='divider'></div>
                         <div className='componentPadding flex'>
                              <div className='col-md-3'>
                                   <h4>Variants</h4>
                                   <p>Choose up to three variable attributes for this product to create and manage SKUs and their inventory levels.</p>
                              </div>

                              <div className='col-md-9'>


                                   {newAttribute.map((item, index) => {
                                        return (
                                             <div className='row' key={index}>
                                                  <div className='col-md-4'>
                                                       {index == 0 ? <p>Attribute (e.g. Colour)</p> : ''}
                                                       <CreatableSelect
                                                            isClearable
                                                            onChange={(e) => changeNewType(index, 'type', e, 'ATTRIBUTE')}
                                                            options={Attribute}
                                                            value={item.type}
                                                            placeholder="Choose a variant attribute" />
                                                  </div>
                                                  <div className={index == 0 ? 'col-md-8' : 'col-md-7'}>
                                                       {index == 0 ? <p>Value (e.g. Red, Blue, Green)</p> : ''}
                                                       <CreatableSelect
                                                            isMulti
                                                            onChange={(e) => changeNewType(index, 'value', e, 'ATTRIBUTE')}
                                                            value={item.value}
                                                            placeholder="Enter a value" />
                                                  </div>
                                                  {index != 0 ?
                                                       <div className='col-md-1 remove'>
                                                            <span onClick={() => removeAppendedType(index, 'ATTRIBUTE')}><IoTrashOutline /></span>
                                                       </div> : ''
                                                  }
                                             </div>)
                                   })}

                                   {newAttribute.length < 3 ?
                                        <Button onClick={() => addNewType('ATTRIBUTE')}><AiOutlinePlus />Add Another Attribute</Button>
                                        : ''
                                   }

                                   <h4 className='marginTop'>This product has {newVariant.length} variant.</h4>

                                   {newVariant.length != 0 ?
                                        <>
                                             <div className='row variant-md-1'>
                                                  <div className='col-md-3'><p>Variant Name</p></div>
                                                  <div className='col-md-2'><p>SKU Code</p></div>
                                                  <div className='col-md-1'><p>Supplier Code</p></div>
                                                  <div className='col-md-2'><p>Supplier Price</p></div>
                                                  <div className='col-md-2'><p>Retail Price</p><p className='description margin-zero'>Excluding Tax</p></div>
                                                  <div className='col-md-1'><p>Enabled</p></div>
                                                  <div className='col-md-1'></div>
                                             </div>
                                             <div className='thick-divider margin-Top-Zero'></div>
                                             {newVariant.map((item, index) => (
                                                  <div key={index}>
                                                       <div className='row alignCenter online-description margin-Top-Zero variant-md-1'>
                                                            <div className='col-md-3'>
                                                                 <div className='flex margin-zero'>
                                                                      <div className="vd-id-badge__image" ></div>
                                                                      <div className='alignCenter'>
                                                                           <p className='margin-zero'>{item.name}</p>
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                            <div className='col-md-2'>
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(e) => changeNewType(index, 'sku_code', e, 'VARIANT')} value={item.sku_code} placeholder='Enter SKU' />
                                                            </div>
                                                            <div className='col-md-1'>
                                                                 {/* <p className='margin-zero'>11 and 2 more</p> */}
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(e) => changeNewType(index, 'supplier_code', e, 'VARIANT')} value={item.supplier_code} placeholder="Enter code" />
                                                            </div>
                                                            <div className='col-md-2'>
                                                                 {/* <p className='margin-zero'>$9.00 ~ $88,888,888</p> */}
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(e) => changeNewType(index, 'supplier_price', e, 'VARIANT')} value={item.supplier_price} type='number' placeholder="Enter the amount" />
                                                            </div>
                                                            <div className='col-md-2'>
                                                                 <input className='vend-settings-input fullWidth max-height-input' onChange={(e) => changeNewType(index, 'retail_price', e, 'VARIANT')} value={item.retail_price} type='number' placeholder="Enter the amount" />
                                                            </div>
                                                            <div className='col-md-1'>
                                                                 <Switch onChange={(e) => changeNewType(index, 'switch', e, 'VARIANT')} checked={item.enabled} onColor='#3f32f5' />
                                                            </div>
                                                            <div className='col-md-1 remove'>
                                                                 <span onClick={() => removeAppendedType(index, 'VARIANT')}><IoTrashOutline /></span>
                                                            </div>
                                                       </div>
                                                       <div className='divider margin-zero'></div>
                                                  </div>
                                             ))}
                                        </> : ''
                                   }


                              </div>
                         </div>
                    </> : ''
               }

               <Dialog open={brandModalOpen} onClose={() => modalClose('brandModal')} fullWidth >
                    <DialogTitle>Add Brand</DialogTitle>
                    <DialogContent className='input-header-margin' >
                         <p>Brand Name</p>
                         <input className='vend-settings-input fullWidth max-height-input' value={newBrandName} onChange={(e) => changeInput('addBrandName', e.target.value)} />
                         <div className='marginTop'></div>
                         <p>Description</p>
                         <textarea className='fullWidth vend-settings-input text-area-height' onChange={(e) => changeInput('addBrandDescription', e.target.value)} placeholder='Enter a description for this brand that your staff will find useful.'></textarea>
                    </DialogContent>
                    <DialogActions>
                         <Button onClick={() => modalClose('brandModal')}>Cancel</Button>
                         <Button onClick={() => addBrand()}>Add Brand</Button>
                    </DialogActions>
               </Dialog>

               <Dialog open={supplierModalOpen} onClose={() => modalClose('supplierModal')} fullWidth >
                    <DialogTitle>Add Supplier</DialogTitle>
                    <DialogContent className='input-header-margin' >
                         <p>Supplier Name</p>
                         <input className='vend-settings-input fullWidth max-height-input' value={newSupplierName} onChange={(e) => changeInput('addSupplierName', e.target.value)} readOnly />
                         <div className='marginTop'></div>
                         <p>Description</p>
                         <textarea className='fullWidth vend-settings-input text-area-height' onChange={(e) => changeInput('addSupplierDescription', e.target.value)} placeholder='Enter a description for this supplier that your staff will find useful.'></textarea>
                    </DialogContent>
                    <DialogActions>
                         <Button onClick={() => modalClose('supplierModal')}>Cancel</Button>
                         <Button onClick={() => addSupplier()}>Add Supplier</Button>
                    </DialogActions>
               </Dialog>

               <Dialog open={typeModalOpen} onClose={() => modalClose('productTypeModal')} fullWidth >
                    <DialogTitle>Add Product Type</DialogTitle>
                    <DialogContent className='input-header-margin' >
                         <p>Product Type Name</p>
                         <input className='vend-settings-input fullWidth max-height-input' value={newProductTypeName} onChange={(e) => changeInput('addProductTypeName', e.target.value)} />
                    </DialogContent>
                    <DialogActions>
                         <Button onClick={() => modalClose('productTypeModal')}>Cancel</Button>
                         <Button onClick={() => addProductType()}>Add Product Type</Button>
                    </DialogActions>
               </Dialog>

               <Dialog open={variantModalOpen} onClose={() => modalClose('variantModal')} fullWidth >
                    <DialogTitle>Add Variant Attribute</DialogTitle>
                    <DialogContent className='input-header-margin' >
                         <p>Variant Attribute Name</p>
                         <input className='vend-settings-input fullWidth max-height-input' value={newAttributeName} onChange={(e) => changeInput('addAttribute', e.target.value)} />
                    </DialogContent>
                    <DialogActions>
                         <Button onClick={() => modalClose('variantModal')}>Cancel</Button>
                         <Button onClick={() => addVariantAttribute()}>Add Variant Attribute</Button>
                    </DialogActions>
               </Dialog>
          </>
     )
}
export default AddProduct;
