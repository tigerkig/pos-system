{"ast":null,"code":"// javascript setX methods like setDate() can't be used because of the local bias\n//these methods wrap around them.\nimport ms from '../../data/milliseconds.js';\nimport { mapping } from '../../data/months.js';\nimport monthLength from '../../data/monthLengths.js';\nimport walkTo from './walk.js';\nimport { isLeapYear } from '../../fns.js';\n\nconst validate = n => {\n  //handle number as a string\n  if (typeof n === 'string') {\n    n = parseInt(n, 10);\n  }\n\n  return n;\n};\n\nconst order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']; //reduce hostile micro-changes when moving dates by millisecond\n\nconst confirm = (s, tmp, unit) => {\n  let n = order.indexOf(unit);\n  let arr = order.slice(n, order.length);\n\n  for (let i = 0; i < arr.length; i++) {\n    let want = tmp[arr[i]]();\n    s[arr[i]](want);\n  }\n\n  return s;\n}; // allow specifying setter direction\n\n\nconst fwdBkwd = function (s, old, goFwd, unit) {\n  if (goFwd === true && s.isBefore(old)) {\n    s = s.add(1, unit);\n  } else if (goFwd === false && s.isAfter(old)) {\n    s = s.minus(1, unit);\n  }\n\n  return s;\n};\n\nconst milliseconds = function (s, n) {\n  n = validate(n);\n  let current = s.millisecond();\n  let diff = current - n; //milliseconds to shift by\n\n  return s.epoch - diff;\n};\n\nconst seconds = function (s, n, goFwd) {\n  n = validate(n);\n  let old = s.clone();\n  let diff = s.second() - n;\n  let shift = diff * ms.second;\n  s.epoch = s.epoch - shift;\n  s = fwdBkwd(s, old, goFwd, 'minute'); // specify direction\n\n  return s.epoch;\n};\n\nconst minutes = function (s, n, goFwd) {\n  n = validate(n);\n  let old = s.clone();\n  let diff = s.minute() - n;\n  let shift = diff * ms.minute;\n  s.epoch -= shift;\n  confirm(s, old, 'second');\n  s = fwdBkwd(s, old, goFwd, 'hour'); // specify direction\n\n  return s.epoch;\n};\n\nconst hours = function (s, n, goFwd) {\n  n = validate(n);\n\n  if (n >= 24) {\n    n = 24;\n  } else if (n < 0) {\n    n = 0;\n  }\n\n  let old = s.clone();\n  let diff = s.hour() - n;\n  let shift = diff * ms.hour;\n  s.epoch -= shift; // oops, did we change the day?\n\n  if (s.date() !== old.date()) {\n    s = old.clone();\n\n    if (diff > 1) {\n      diff -= 1;\n    }\n\n    if (diff < 1) {\n      diff += 1;\n    }\n\n    shift = diff * ms.hour;\n    s.epoch -= shift;\n  }\n\n  walkTo(s, {\n    hour: n\n  });\n  confirm(s, old, 'minute');\n  s = fwdBkwd(s, old, goFwd, 'day'); // specify direction\n\n  return s.epoch;\n};\n\nconst time = function (s, str, goFwd) {\n  let m = str.match(/([0-9]{1,2})[:h]([0-9]{1,2})(:[0-9]{1,2})? ?(am|pm)?/);\n\n  if (!m) {\n    //fallback to support just '2am'\n    m = str.match(/([0-9]{1,2}) ?(am|pm)/);\n\n    if (!m) {\n      return s.epoch;\n    }\n\n    m.splice(2, 0, '0'); //add implicit 0 minutes\n\n    m.splice(3, 0, ''); //add implicit seconds\n  }\n\n  let h24 = false;\n  let hour = parseInt(m[1], 10);\n  let minute = parseInt(m[2], 10);\n\n  if (minute >= 60) {\n    minute = 59;\n  }\n\n  if (hour > 12) {\n    h24 = true;\n  } //make the hour into proper 24h time\n\n\n  if (h24 === false) {\n    if (m[4] === 'am' && hour === 12) {\n      //12am is midnight\n      hour = 0;\n    }\n\n    if (m[4] === 'pm' && hour < 12) {\n      //12pm is noon\n      hour += 12;\n    }\n  } // handle seconds\n\n\n  m[3] = m[3] || '';\n  m[3] = m[3].replace(/:/, '');\n  let sec = parseInt(m[3], 10) || 0;\n  let old = s.clone();\n  s = s.hour(hour);\n  s = s.minute(minute);\n  s = s.second(sec);\n  s = s.millisecond(0);\n  s = fwdBkwd(s, old, goFwd, 'day'); // specify direction\n\n  return s.epoch;\n};\n\nconst date = function (s, n, goFwd) {\n  n = validate(n); //avoid setting february 31st\n\n  if (n > 28) {\n    let month = s.month();\n    let max = monthLength[month]; // support leap day in february\n\n    if (month === 1 && n === 29 && isLeapYear(s.year())) {\n      max = 29;\n    }\n\n    if (n > max) {\n      n = max;\n    }\n  } //avoid setting < 0\n\n\n  if (n <= 0) {\n    n = 1;\n  }\n\n  let old = s.clone();\n  walkTo(s, {\n    date: n\n  });\n  s = fwdBkwd(s, old, goFwd, 'month'); // specify direction\n\n  return s.epoch;\n};\n\nconst month = function (s, n, goFwd) {\n  if (typeof n === 'string') {\n    if (n === 'sept') {\n      n = 'sep';\n    }\n\n    n = mapping()[n.toLowerCase()];\n  }\n\n  n = validate(n); //don't go past december\n\n  if (n >= 12) {\n    n = 11;\n  }\n\n  if (n <= 0) {\n    n = 0;\n  }\n\n  let d = s.date(); //there's no 30th of february, etc.\n\n  if (d > monthLength[n]) {\n    //make it as close as we can..\n    d = monthLength[n];\n  }\n\n  let old = s.clone();\n  walkTo(s, {\n    month: n,\n    d\n  });\n  s = fwdBkwd(s, old, goFwd, 'year'); // specify direction\n\n  return s.epoch;\n};\n\nconst year = function (s, n) {\n  // support '97\n  if (typeof n === 'string' && /^'[0-9]{2}$/.test(n)) {\n    n = n.replace(/'/, '').trim();\n    n = Number(n); // '89 is 1989\n\n    if (n > 30) {\n      //change this in 10y\n      n = 1900 + n;\n    } else {\n      // '12 is 2012\n      n = 2000 + n;\n    }\n  }\n\n  n = validate(n);\n  walkTo(s, {\n    year: n\n  });\n  return s.epoch;\n};\n\nconst week = function (s, n, goFwd) {\n  let old = s.clone();\n  n = validate(n);\n  s = s.month(0);\n  s = s.date(1);\n  s = s.day('monday'); //first week starts first Thurs in Jan\n  // so mon dec 28th is 1st week\n  // so mon dec 29th is not the week\n\n  if (s.monthName() === 'december' && s.date() >= 28) {\n    s = s.add(1, 'week');\n  }\n\n  n -= 1; //1-based\n\n  s = s.add(n, 'weeks');\n  s = fwdBkwd(s, old, goFwd, 'year'); // specify direction\n\n  return s.epoch;\n};\n\nconst dayOfYear = function (s, n, goFwd) {\n  n = validate(n);\n  let old = s.clone();\n  n -= 1; //days are 1-based\n\n  if (n <= 0) {\n    n = 0;\n  } else if (n >= 365) {\n    n = 364;\n  }\n\n  s = s.startOf('year');\n  s = s.add(n, 'day');\n  confirm(s, old, 'hour');\n  s = fwdBkwd(s, old, goFwd, 'year'); // specify direction\n\n  return s.epoch;\n};\n\nexport { milliseconds, seconds, minutes, hours, time, date, month, year, week, dayOfYear };","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/set/set.js"],"names":["ms","mapping","monthLength","walkTo","isLeapYear","validate","n","parseInt","order","confirm","s","tmp","unit","indexOf","arr","slice","length","i","want","fwdBkwd","old","goFwd","isBefore","add","isAfter","minus","milliseconds","current","millisecond","diff","epoch","seconds","clone","second","shift","minutes","minute","hours","hour","date","time","str","m","match","splice","h24","replace","sec","month","max","year","toLowerCase","d","test","trim","Number","week","day","monthName","dayOfYear","startOf"],"mappings":"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","sourcesContent":["// javascript setX methods like setDate() can't be used because of the local bias\n//these methods wrap around them.\nimport ms from '../../data/milliseconds.js'\nimport { mapping } from '../../data/months.js'\nimport monthLength from '../../data/monthLengths.js'\nimport walkTo from './walk.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst validate = (n) => {\n  //handle number as a string\n  if (typeof n === 'string') {\n    n = parseInt(n, 10)\n  }\n  return n\n}\n\nconst order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n\n//reduce hostile micro-changes when moving dates by millisecond\nconst confirm = (s, tmp, unit) => {\n  let n = order.indexOf(unit)\n  let arr = order.slice(n, order.length)\n  for (let i = 0; i < arr.length; i++) {\n    let want = tmp[arr[i]]()\n    s[arr[i]](want)\n  }\n  return s\n}\n\n// allow specifying setter direction\nconst fwdBkwd = function (s, old, goFwd, unit) {\n  if (goFwd === true && s.isBefore(old)) {\n    s = s.add(1, unit)\n  } else if (goFwd === false && s.isAfter(old)) {\n    s = s.minus(1, unit)\n  }\n  return s\n}\n\nconst milliseconds = function (s, n) {\n  n = validate(n)\n  let current = s.millisecond()\n  let diff = current - n //milliseconds to shift by\n  return s.epoch - diff\n}\n\nconst seconds = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.second() - n\n  let shift = diff * ms.second\n  s.epoch = s.epoch - shift\n  s = fwdBkwd(s, old, goFwd, 'minute') // specify direction\n  return s.epoch\n}\n\nconst minutes = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.minute() - n\n  let shift = diff * ms.minute\n  s.epoch -= shift\n  confirm(s, old, 'second')\n  s = fwdBkwd(s, old, goFwd, 'hour') // specify direction\n  return s.epoch\n}\n\nconst hours = function (s, n, goFwd) {\n  n = validate(n)\n  if (n >= 24) {\n    n = 24\n  } else if (n < 0) {\n    n = 0\n  }\n  let old = s.clone()\n  let diff = s.hour() - n\n  let shift = diff * ms.hour\n  s.epoch -= shift\n  // oops, did we change the day?\n  if (s.date() !== old.date()) {\n    s = old.clone()\n    if (diff > 1) {\n      diff -= 1\n    }\n    if (diff < 1) {\n      diff += 1\n    }\n    shift = diff * ms.hour\n    s.epoch -= shift\n  }\n  walkTo(s, {\n    hour: n\n  })\n  confirm(s, old, 'minute')\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst time = function (s, str, goFwd) {\n  let m = str.match(/([0-9]{1,2})[:h]([0-9]{1,2})(:[0-9]{1,2})? ?(am|pm)?/)\n  if (!m) {\n    //fallback to support just '2am'\n    m = str.match(/([0-9]{1,2}) ?(am|pm)/)\n    if (!m) {\n      return s.epoch\n    }\n    m.splice(2, 0, '0') //add implicit 0 minutes\n    m.splice(3, 0, '') //add implicit seconds\n  }\n  let h24 = false\n  let hour = parseInt(m[1], 10)\n  let minute = parseInt(m[2], 10)\n  if (minute >= 60) {\n    minute = 59\n  }\n  if (hour > 12) {\n    h24 = true\n  }\n  //make the hour into proper 24h time\n  if (h24 === false) {\n    if (m[4] === 'am' && hour === 12) {\n      //12am is midnight\n      hour = 0\n    }\n    if (m[4] === 'pm' && hour < 12) {\n      //12pm is noon\n      hour += 12\n    }\n  }\n  // handle seconds\n  m[3] = m[3] || ''\n  m[3] = m[3].replace(/:/, '')\n  let sec = parseInt(m[3], 10) || 0\n  let old = s.clone()\n  s = s.hour(hour)\n  s = s.minute(minute)\n  s = s.second(sec)\n  s = s.millisecond(0)\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst date = function (s, n, goFwd) {\n  n = validate(n)\n  //avoid setting february 31st\n  if (n > 28) {\n    let month = s.month()\n    let max = monthLength[month]\n    // support leap day in february\n    if (month === 1 && n === 29 && isLeapYear(s.year())) {\n      max = 29\n    }\n    if (n > max) {\n      n = max\n    }\n  }\n  //avoid setting < 0\n  if (n <= 0) {\n    n = 1\n  }\n  let old = s.clone()\n  walkTo(s, {\n    date: n\n  })\n  s = fwdBkwd(s, old, goFwd, 'month') // specify direction\n  return s.epoch\n}\n\nconst month = function (s, n, goFwd) {\n  if (typeof n === 'string') {\n    if (n === 'sept') {\n      n = 'sep'\n    }\n    n = mapping()[n.toLowerCase()]\n  }\n  n = validate(n)\n  //don't go past december\n  if (n >= 12) {\n    n = 11\n  }\n  if (n <= 0) {\n    n = 0\n  }\n\n  let d = s.date()\n  //there's no 30th of february, etc.\n  if (d > monthLength[n]) {\n    //make it as close as we can..\n    d = monthLength[n]\n  }\n  let old = s.clone()\n  walkTo(s, {\n    month: n,\n    d\n  })\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst year = function (s, n) {\n  // support '97\n  if (typeof n === 'string' && /^'[0-9]{2}$/.test(n)) {\n    n = n.replace(/'/, '').trim()\n    n = Number(n)\n    // '89 is 1989\n    if (n > 30) {\n      //change this in 10y\n      n = 1900 + n\n    } else {\n      // '12 is 2012\n      n = 2000 + n\n    }\n  }\n  n = validate(n)\n  walkTo(s, {\n    year: n\n  })\n  return s.epoch\n}\n\nconst week = function (s, n, goFwd) {\n  let old = s.clone()\n  n = validate(n)\n  s = s.month(0)\n  s = s.date(1)\n  s = s.day('monday')\n  //first week starts first Thurs in Jan\n  // so mon dec 28th is 1st week\n  // so mon dec 29th is not the week\n  if (s.monthName() === 'december' && s.date() >= 28) {\n    s = s.add(1, 'week')\n  }\n  n -= 1 //1-based\n  s = s.add(n, 'weeks')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst dayOfYear = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  n -= 1 //days are 1-based\n  if (n <= 0) {\n    n = 0\n  } else if (n >= 365) {\n    n = 364\n  }\n  s = s.startOf('year')\n  s = s.add(n, 'day')\n  confirm(s, old, 'hour')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nexport {\n  milliseconds,\n  seconds,\n  minutes,\n  hours,\n  time,\n  date,\n  month,\n  year,\n  week,\n  dayOfYear,\n}\n"]},"metadata":{},"sourceType":"module"}