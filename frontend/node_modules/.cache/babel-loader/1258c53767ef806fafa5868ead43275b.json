{"ast":null,"code":"import Spacetime from './spacetime.js'; // const timezones = require('../data');\n\nconst whereIts = (a, b) => {\n  let start = new Spacetime(null);\n  let end = new Spacetime(null);\n  start = start.time(a); //if b is undefined, use as 'within one hour'\n\n  if (b) {\n    end = end.time(b);\n  } else {\n    end = start.add(59, 'minutes');\n  }\n\n  let startHour = start.hour();\n  let endHour = end.hour();\n  let tzs = Object.keys(start.timezones).filter(tz => {\n    if (tz.indexOf('/') === -1) {\n      return false;\n    }\n\n    let m = new Spacetime(null, tz);\n    let hour = m.hour(); //do 'calendar-compare' not real-time-compare\n\n    if (hour >= startHour && hour <= endHour) {\n      //test minutes too, if applicable\n      if (hour === startHour && m.minute() < start.minute()) {\n        return false;\n      }\n\n      if (hour === endHour && m.minute() > end.minute()) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return tzs;\n};\n\nexport default whereIts;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/whereIts.js"],"names":["Spacetime","whereIts","a","b","start","end","time","add","startHour","hour","endHour","tzs","Object","keys","timezones","filter","tz","indexOf","m","minute"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB,C,CACA;;AAEA,MAAMC,QAAQ,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,MAAIC,KAAK,GAAG,IAAIJ,SAAJ,CAAc,IAAd,CAAZ;AACA,MAAIK,GAAG,GAAG,IAAIL,SAAJ,CAAc,IAAd,CAAV;AACAI,EAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,CAAWJ,CAAX,CAAR,CAHyB,CAIzB;;AACA,MAAIC,CAAJ,EAAO;AACLE,IAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,CAASH,CAAT,CAAN;AACD,GAFD,MAEO;AACLE,IAAAA,GAAG,GAAGD,KAAK,CAACG,GAAN,CAAU,EAAV,EAAc,SAAd,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGJ,KAAK,CAACK,IAAN,EAAhB;AACA,MAAIC,OAAO,GAAGL,GAAG,CAACI,IAAJ,EAAd;AACA,MAAIE,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACU,SAAlB,EAA6BC,MAA7B,CAAqCC,EAAD,IAAQ;AACpD,QAAIA,EAAE,CAACC,OAAH,CAAW,GAAX,MAAoB,CAAC,CAAzB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AACD,QAAIC,CAAC,GAAG,IAAIlB,SAAJ,CAAc,IAAd,EAAoBgB,EAApB,CAAR;AACA,QAAIP,IAAI,GAAGS,CAAC,CAACT,IAAF,EAAX,CALoD,CAMpD;;AACA,QAAIA,IAAI,IAAID,SAAR,IAAqBC,IAAI,IAAIC,OAAjC,EAA0C;AACxC;AACA,UAAID,IAAI,KAAKD,SAAT,IAAsBU,CAAC,CAACC,MAAF,KAAaf,KAAK,CAACe,MAAN,EAAvC,EAAuD;AACrD,eAAO,KAAP;AACD;;AACD,UAAIV,IAAI,KAAKC,OAAT,IAAoBQ,CAAC,CAACC,MAAF,KAAad,GAAG,CAACc,MAAJ,EAArC,EAAmD;AACjD,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAlBS,CAAV;AAmBA,SAAOR,GAAP;AACD,CAjCD;;AAkCA,eAAeV,QAAf","sourcesContent":["import Spacetime from './spacetime.js'\n// const timezones = require('../data');\n\nconst whereIts = (a, b) => {\n  let start = new Spacetime(null)\n  let end = new Spacetime(null)\n  start = start.time(a)\n  //if b is undefined, use as 'within one hour'\n  if (b) {\n    end = end.time(b)\n  } else {\n    end = start.add(59, 'minutes')\n  }\n\n  let startHour = start.hour()\n  let endHour = end.hour()\n  let tzs = Object.keys(start.timezones).filter((tz) => {\n    if (tz.indexOf('/') === -1) {\n      return false\n    }\n    let m = new Spacetime(null, tz)\n    let hour = m.hour()\n    //do 'calendar-compare' not real-time-compare\n    if (hour >= startHour && hour <= endHour) {\n      //test minutes too, if applicable\n      if (hour === startHour && m.minute() < start.minute()) {\n        return false\n      }\n      if (hour === endHour && m.minute() > end.minute()) {\n        return false\n      }\n      return true\n    }\n    return false\n  })\n  return tzs\n}\nexport default whereIts\n"]},"metadata":{},"sourceType":"module"}