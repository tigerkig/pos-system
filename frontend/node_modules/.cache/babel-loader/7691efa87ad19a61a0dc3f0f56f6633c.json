{"ast":null,"code":"//make a string, for easy comparison between dates\nconst print = {\n  millisecond: s => {\n    return s.epoch;\n  },\n  second: s => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-');\n  },\n  minute: s => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-');\n  },\n  hour: s => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-');\n  },\n  day: s => {\n    return [s.year(), s.month(), s.date()].join('-');\n  },\n  week: s => {\n    return [s.year(), s.week()].join('-');\n  },\n  month: s => {\n    return [s.year(), s.month()].join('-');\n  },\n  quarter: s => {\n    return [s.year(), s.quarter()].join('-');\n  },\n  year: s => {\n    return s.year();\n  }\n};\nprint.date = print.day;\n\nconst addMethods = SpaceTime => {\n  SpaceTime.prototype.isSame = function (b, unit) {\n    let tzAware = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let a = this;\n\n    if (!unit) {\n      return null;\n    } // support swapped params\n\n\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b;\n      b = unit;\n      unit = tmp;\n    }\n\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name);\n    } //support 'seconds' aswell as 'second'\n\n\n    unit = unit.replace(/s$/, ''); // make them the same timezone for proper comparison\n\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone();\n      b.tz = a.tz;\n    }\n\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b);\n    }\n\n    return null;\n  };\n};\n\nexport default addMethods;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/same.js"],"names":["print","millisecond","s","epoch","second","year","month","date","hour","minute","join","day","week","quarter","addMethods","SpaceTime","prototype","isSame","b","unit","tzAware","a","tmp","timezone","name","replace","tz","clone"],"mappings":"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","sourcesContent":["//make a string, for easy comparison between dates\nconst print = {\n  millisecond: (s) => {\n    return s.epoch\n  },\n  second: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-')\n  },\n  minute: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-')\n  },\n  hour: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-')\n  },\n  day: (s) => {\n    return [s.year(), s.month(), s.date()].join('-')\n  },\n  week: (s) => {\n    return [s.year(), s.week()].join('-')\n  },\n  month: (s) => {\n    return [s.year(), s.month()].join('-')\n  },\n  quarter: (s) => {\n    return [s.year(), s.quarter()].join('-')\n  },\n  year: (s) => {\n    return s.year()\n  }\n}\nprint.date = print.day\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this\n    if (!unit) {\n      return null\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b\n      b = unit\n      unit = tmp\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name)\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '')\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone()\n      b.tz = a.tz\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b)\n    }\n    return null\n  }\n}\n\nexport default addMethods\n"]},"metadata":{},"sourceType":"module"}