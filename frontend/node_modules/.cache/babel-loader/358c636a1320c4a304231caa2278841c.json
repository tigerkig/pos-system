{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { debounce } from '@mui/material/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            base: rowHeightFromDensity\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = rowHeightFromDensity;\n      const existingBaseRowHeight = sizes.base;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      } // We use an object to make simple to check if a height is already added or not\n\n\n      const initialHeights = {\n        base: baseRowHeight\n      };\n\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      const finalRowHeight = Object.values(processedSizes).reduce((acc2, value) => acc2 + value, 0);\n      return acc + finalRowHeight;\n    }, 0);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.base : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.base = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes.base !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.base = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"names":["_extends","React","debounce","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridRegisterPipeApplier","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","rowHeightFromDensity","filterState","paginationState","sortingState","currentPage","hydrateRowsMeta","useCallback","current","densityFactor","instanceId","rows","reduce","acc","row","push","id","sizes","base","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","finalRowHeight","Object","values","acc2","value","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","useEffect","rowsMetaApi","unstable_getLastMeasuredRowIndex","unstable_setLastMeasuredRowIndex","unstable_rowHasAutoHeight","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { debounce } from '@mui/material/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            base: rowHeightFromDensity\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = rowHeightFromDensity;\n      const existingBaseRowHeight = sizes.base;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      } // We use an object to make simple to check if a height is already added or not\n\n\n      const initialHeights = {\n        base: baseRowHeight\n      };\n\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      const finalRowHeight = Object.values(processedSizes).reduce((acc2, value) => acc2 + value, 0);\n      return acc + finalRowHeight;\n    }, 0);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.base : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.base = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes.base !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.base = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"]},"metadata":{},"sourceType":"module"}