{"ast":null,"code":"import { useEffect, useRef, useCallback } from 'react';\n/**\n * A timer hook\n * @param fn Timer callback function\n * @param ms Milliseconds of the timer\n * @param enabled Whether to open the timer\n */\n\nfunction useTimeout(fn, ms, enabled) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  var timeout = useRef();\n  var callback = useRef(fn);\n  var clear = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n  var set = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n\n    if (enabled) {\n      timeout.current = setTimeout(function () {\n        var _callback$current;\n\n        (_callback$current = callback.current) === null || _callback$current === void 0 ? void 0 : _callback$current.call(callback);\n      }, ms);\n    }\n  }, [ms, enabled]); // update ref when function changes\n\n  useEffect(function () {\n    callback.current = fn;\n  }, [fn]);\n  useEffect(function () {\n    set();\n    return clear;\n  }, [ms, enabled, set, clear]);\n  return {\n    clear: clear,\n    reset: set\n  };\n}\n\nexport default useTimeout;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/rsuite/esm/utils/useTimeout.js"],"names":["useEffect","useRef","useCallback","useTimeout","fn","ms","enabled","timeout","callback","clear","current","clearTimeout","set","setTimeout","_callback$current","call","reset"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,WAA5B,QAA+C,OAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,OAA5B,EAAqC;AACnC,MAAID,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBA,IAAAA,EAAE,GAAG,CAAL;AACD;;AAED,MAAIC,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,MAAIC,OAAO,GAAGN,MAAM,EAApB;AACA,MAAIO,QAAQ,GAAGP,MAAM,CAACG,EAAD,CAArB;AACA,MAAIK,KAAK,GAAGP,WAAW,CAAC,YAAY;AAClCK,IAAAA,OAAO,CAACG,OAAR,IAAmBC,YAAY,CAACJ,OAAO,CAACG,OAAT,CAA/B;AACD,GAFsB,EAEpB,EAFoB,CAAvB;AAGA,MAAIE,GAAG,GAAGV,WAAW,CAAC,YAAY;AAChCK,IAAAA,OAAO,CAACG,OAAR,IAAmBC,YAAY,CAACJ,OAAO,CAACG,OAAT,CAA/B;;AAEA,QAAIJ,OAAJ,EAAa;AACXC,MAAAA,OAAO,CAACG,OAAR,GAAkBG,UAAU,CAAC,YAAY;AACvC,YAAIC,iBAAJ;;AAEA,SAACA,iBAAiB,GAAGN,QAAQ,CAACE,OAA9B,MAA2C,IAA3C,IAAmDI,iBAAiB,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,iBAAiB,CAACC,IAAlB,CAAuBP,QAAvB,CAA3F;AACD,OAJ2B,EAIzBH,EAJyB,CAA5B;AAKD;AACF,GAVoB,EAUlB,CAACA,EAAD,EAAKC,OAAL,CAVkB,CAArB,CAdmC,CAwBhB;;AAEnBN,EAAAA,SAAS,CAAC,YAAY;AACpBQ,IAAAA,QAAQ,CAACE,OAAT,GAAmBN,EAAnB;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAGAJ,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,GAAG;AACH,WAAOH,KAAP;AACD,GAHQ,EAGN,CAACJ,EAAD,EAAKC,OAAL,EAAcM,GAAd,EAAmBH,KAAnB,CAHM,CAAT;AAIA,SAAO;AACLA,IAAAA,KAAK,EAAEA,KADF;AAELO,IAAAA,KAAK,EAAEJ;AAFF,GAAP;AAID;;AAED,eAAeT,UAAf","sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\n\n/**\n * A timer hook\n * @param fn Timer callback function\n * @param ms Milliseconds of the timer\n * @param enabled Whether to open the timer\n */\nfunction useTimeout(fn, ms, enabled) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  var timeout = useRef();\n  var callback = useRef(fn);\n  var clear = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n  var set = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n\n    if (enabled) {\n      timeout.current = setTimeout(function () {\n        var _callback$current;\n\n        (_callback$current = callback.current) === null || _callback$current === void 0 ? void 0 : _callback$current.call(callback);\n      }, ms);\n    }\n  }, [ms, enabled]); // update ref when function changes\n\n  useEffect(function () {\n    callback.current = fn;\n  }, [fn]);\n  useEffect(function () {\n    set();\n    return clear;\n  }, [ms, enabled, set, clear]);\n  return {\n    clear: clear,\n    reset: set\n  };\n}\n\nexport default useTimeout;"]},"metadata":{},"sourceType":"module"}