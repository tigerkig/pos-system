{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps, datePickerValueManager } from '../DatePicker/shared';\nimport { DatePickerToolbar } from '../DatePicker/DatePickerToolbar';\nimport { PickerStaticWrapper } from '../internals/components/PickerStaticWrapper/PickerStaticWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useDateValidation } from '../internals/hooks/validation/useDateValidation';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/x/api/date-pickers/static-date-picker/)\n */\n\nexport const StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker'); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar,\n    displayStaticWrapperAs = 'mobile',\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, datePickerValueManager);\n  const validationError = useDateValidation(props) !== null;\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError,\n    components\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDays The days currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers/StaticDatePicker/StaticDatePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useDatePickerDefaultizedProps","datePickerValueManager","DatePickerToolbar","PickerStaticWrapper","CalendarOrClockPicker","useDateValidation","usePickerState","jsx","_jsx","StaticDatePicker","forwardRef","inProps","ref","props","ToolbarComponent","displayStaticWrapperAs","components","componentsProps","other","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","children","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","className","string","closeOnSelect","object","defaultCalendarMonth","any","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","oneOf","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","node","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onError","onMonthChange","onViewChange","onYearChange","OpenPickerButtonProps","openTo","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","elementType","toolbarFormat","toolbarPlaceholder","value","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps, datePickerValueManager } from '../DatePicker/shared';\nimport { DatePickerToolbar } from '../DatePicker/DatePickerToolbar';\nimport { PickerStaticWrapper } from '../internals/components/PickerStaticWrapper/PickerStaticWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useDateValidation } from '../internals/hooks/validation/useDateValidation';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/x/api/date-pickers/static-date-picker/)\n */\nexport const StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker'); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar,\n    displayStaticWrapperAs = 'mobile',\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, datePickerValueManager);\n  const validationError = useDateValidation(props) !== null;\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError,\n    components\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDays The days currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}