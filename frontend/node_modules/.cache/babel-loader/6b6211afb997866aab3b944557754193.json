{"ast":null,"code":"const isOffset = /(\\-?[0-9]+)h(rs)?/i;\nconst isNumber = /(\\-?[0-9]+)/;\nconst utcOffset = /utc([\\-+]?[0-9]+)/i;\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i;\n\nconst toIana = function (num) {\n  num = Number(num);\n\n  if (num >= -13 && num <= 13) {\n    num = num * -1; //it's opposite!\n\n    num = (num > 0 ? '+' : '') + num; //add plus sign\n\n    return 'etc/gmt' + num;\n  }\n\n  return null;\n};\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset);\n\n  if (m !== null) {\n    return toIana(m[1]);\n  } // 'utc+5'\n\n\n  m = tz.match(utcOffset);\n\n  if (m !== null) {\n    return toIana(m[1]);\n  } // 'GMT-5' (not opposite)\n\n\n  m = tz.match(gmtOffset);\n\n  if (m !== null) {\n    let num = Number(m[1]) * -1;\n    return toIana(num);\n  } // '+5'\n\n\n  m = tz.match(isNumber);\n\n  if (m !== null) {\n    return toIana(m[1]);\n  }\n\n  return null;\n};\n\nexport default parseOffset;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/timezone/parseOffset.js"],"names":["isOffset","isNumber","utcOffset","gmtOffset","toIana","num","Number","parseOffset","tz","m","match"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,oBAAjB;AACA,MAAMC,QAAQ,GAAG,aAAjB;AACA,MAAMC,SAAS,GAAG,oBAAlB;AACA,MAAMC,SAAS,GAAG,oBAAlB;;AAEA,MAAMC,MAAM,GAAG,UAAUC,GAAV,EAAe;AAC5BA,EAAAA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;;AACA,MAAIA,GAAG,IAAI,CAAC,EAAR,IAAcA,GAAG,IAAI,EAAzB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,GAAG,CAAC,CAAb,CAD2B,CACZ;;AACfA,IAAAA,GAAG,GAAG,CAACA,GAAG,GAAG,CAAN,GAAU,GAAV,GAAgB,EAAjB,IAAuBA,GAA7B,CAF2B,CAEM;;AACjC,WAAO,YAAYA,GAAnB;AACD;;AACD,SAAO,IAAP;AACD,CARD;;AAUA,MAAME,WAAW,GAAG,UAAUC,EAAV,EAAc;AAChC;AACA,MAAIC,CAAC,GAAGD,EAAE,CAACE,KAAH,CAASV,QAAT,CAAR;;AACA,MAAIS,CAAC,KAAK,IAAV,EAAgB;AACd,WAAOL,MAAM,CAACK,CAAC,CAAC,CAAD,CAAF,CAAb;AACD,GAL+B,CAMhC;;;AACAA,EAAAA,CAAC,GAAGD,EAAE,CAACE,KAAH,CAASR,SAAT,CAAJ;;AACA,MAAIO,CAAC,KAAK,IAAV,EAAgB;AACd,WAAOL,MAAM,CAACK,CAAC,CAAC,CAAD,CAAF,CAAb;AACD,GAV+B,CAWhC;;;AACAA,EAAAA,CAAC,GAAGD,EAAE,CAACE,KAAH,CAASP,SAAT,CAAJ;;AACA,MAAIM,CAAC,KAAK,IAAV,EAAgB;AACd,QAAIJ,GAAG,GAAGC,MAAM,CAACG,CAAC,CAAC,CAAD,CAAF,CAAN,GAAe,CAAC,CAA1B;AACA,WAAOL,MAAM,CAACC,GAAD,CAAb;AACD,GAhB+B,CAiBhC;;;AACAI,EAAAA,CAAC,GAAGD,EAAE,CAACE,KAAH,CAAST,QAAT,CAAJ;;AACA,MAAIQ,CAAC,KAAK,IAAV,EAAgB;AACd,WAAOL,MAAM,CAACK,CAAC,CAAC,CAAD,CAAF,CAAb;AACD;;AACD,SAAO,IAAP;AACD,CAvBD;;AAwBA,eAAeF,WAAf","sourcesContent":["const isOffset = /(\\-?[0-9]+)h(rs)?/i\nconst isNumber = /(\\-?[0-9]+)/\nconst utcOffset = /utc([\\-+]?[0-9]+)/i\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i\n\nconst toIana = function (num) {\n  num = Number(num)\n  if (num >= -13 && num <= 13) {\n    num = num * -1 //it's opposite!\n    num = (num > 0 ? '+' : '') + num //add plus sign\n    return 'etc/gmt' + num\n  }\n  return null\n}\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset)\n  if (m !== null) {\n    let num = Number(m[1]) * -1\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n}\nexport default parseOffset\n"]},"metadata":{},"sourceType":"module"}