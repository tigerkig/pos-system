{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"className\", \"currentlySelectingRangeEnd\", \"parsedValue\", \"DateInputProps\", \"defaultCalendarMonth\", \"disableAutoMonthSwitching\", \"disableFuture\", \"disableHighlightToday\", \"disablePast\", \"endText\", \"isMobileKeyboardViewOpen\", \"maxDate\", \"minDate\", \"onDateChange\", \"onMonthChange\", \"open\", \"reduceAnimations\", \"setCurrentlySelectingRangeEnd\", \"shouldDisableDate\", \"showToolbar\", \"startText\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Watermark } from '@mui/x-license-pro';\nimport { useUtils, WrapperVariantContext, MobileKeyboardInputView, defaultReduceAnimations, useCalendarState } from '@mui/x-date-pickers/internals';\nimport { isRangeValid } from '../internal/utils/date-utils';\nimport { calculateRangeChange } from './date-range-manager';\nimport { DateRangePickerToolbar } from './DateRangePickerToolbar';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { DateRangePickerInput } from './DateRangePickerInput';\nimport { DateRangePickerViewDesktop } from './DateRangePickerViewDesktop';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n/**\n * @ignore - internal component.\n */\n\nfunction DateRangePickerViewRaw(props) {\n  const {\n    calendars,\n    className,\n    currentlySelectingRangeEnd,\n    parsedValue,\n    DateInputProps,\n    defaultCalendarMonth,\n    disableAutoMonthSwitching = false,\n    disableFuture,\n    disableHighlightToday,\n    disablePast,\n    endText,\n    isMobileKeyboardViewOpen,\n    maxDate,\n    minDate,\n    onDateChange,\n    onMonthChange,\n    open,\n    reduceAnimations = defaultReduceAnimations,\n    setCurrentlySelectingRangeEnd,\n    shouldDisableDate,\n    showToolbar,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const [start, end] = parsedValue;\n  const {\n    changeMonth,\n    calendarState,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    changeFocusedDay\n  } = useCalendarState({\n    date: start || end,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus: true,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  });\n  const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n\n  const scrollToDayIfNeeded = day => {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    const currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    const displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = utils.getMonth(day);\n\n    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = currentlySelectingRangeEnd === 'start' ? currentlySelectedDate : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(() => {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, parsedValue]); // eslint-disable-line\n\n  const handleSelectedDayChange = React.useCallback(newDate => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      utils,\n      range: parsedValue,\n      currentlySelectingRangeEnd\n    });\n    setCurrentlySelectingRangeEnd(nextSelection);\n    const isFullRangeSelected = currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? 'finish' : 'partial');\n  }, [currentlySelectingRangeEnd, parsedValue, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);\n\n  const renderView = () => {\n    const sharedCalendarProps = _extends({\n      parsedValue,\n      changeFocusedDay,\n      onSelectedDaysChange: handleSelectedDayChange,\n      reduceAnimations,\n      disableHighlightToday,\n      onMonthSwitchingAnimationEnd,\n      changeMonth,\n      currentlySelectingRangeEnd,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate,\n      shouldDisableDate\n    }, calendarState, other);\n\n    switch (wrapperVariant) {\n      case 'desktop':\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewDesktop, _extends({\n            calendars: calendars\n          }, sharedCalendarProps));\n        }\n\n      default:\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsx(Watermark, {\n      packageName: \"x-date-pickers-pro\",\n      releaseInfo: releaseInfo\n    }), toShowToolbar && /*#__PURE__*/_jsx(DateRangePickerToolbar, {\n      parsedValue: parsedValue,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat\n    }), isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n      children: /*#__PURE__*/_jsx(DateRangePickerInput, _extends({\n        disableOpenPicker: true,\n        ignoreInvalidInputs: true\n      }, DateInputProps))\n    }) : renderView()]\n  });\n}\n\nexport const DateRangePickerView = DateRangePickerViewRaw;\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerViewRaw.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool\n} : void 0;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePickerView.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","Watermark","useUtils","WrapperVariantContext","MobileKeyboardInputView","defaultReduceAnimations","useCalendarState","isRangeValid","calculateRangeChange","DateRangePickerToolbar","DateRangePickerViewMobile","DateRangePickerInput","DateRangePickerViewDesktop","getReleaseInfo","jsx","_jsx","jsxs","_jsxs","releaseInfo","DateRangePickerViewRaw","props","calendars","className","currentlySelectingRangeEnd","parsedValue","DateInputProps","defaultCalendarMonth","disableAutoMonthSwitching","disableFuture","disableHighlightToday","disablePast","endText","isMobileKeyboardViewOpen","maxDate","minDate","onDateChange","onMonthChange","open","reduceAnimations","setCurrentlySelectingRangeEnd","shouldDisableDate","showToolbar","startText","toggleMobileKeyboardView","toolbarFormat","toolbarTitle","other","utils","wrapperVariant","useContext","start","end","changeMonth","calendarState","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","date","disableSwitchToMonthOnDayFocus","toShowToolbar","scrollToDayIfNeeded","day","isValid","currentlySelectedDate","displayingMonthRange","currentMonthNumber","getMonth","currentMonth","requestedMonthNumber","isSameYear","newMonth","addMonths","useEffect","handleSelectedDayChange","useCallback","newDate","nextSelection","newRange","range","isFullRangeSelected","renderView","sharedCalendarProps","onSelectedDaysChange","children","packageName","disableOpenPicker","ignoreInvalidInputs","DateRangePickerView","process","env","NODE_ENV","propTypes","oneOf","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"className\", \"currentlySelectingRangeEnd\", \"parsedValue\", \"DateInputProps\", \"defaultCalendarMonth\", \"disableAutoMonthSwitching\", \"disableFuture\", \"disableHighlightToday\", \"disablePast\", \"endText\", \"isMobileKeyboardViewOpen\", \"maxDate\", \"minDate\", \"onDateChange\", \"onMonthChange\", \"open\", \"reduceAnimations\", \"setCurrentlySelectingRangeEnd\", \"shouldDisableDate\", \"showToolbar\", \"startText\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Watermark } from '@mui/x-license-pro';\nimport { useUtils, WrapperVariantContext, MobileKeyboardInputView, defaultReduceAnimations, useCalendarState } from '@mui/x-date-pickers/internals';\nimport { isRangeValid } from '../internal/utils/date-utils';\nimport { calculateRangeChange } from './date-range-manager';\nimport { DateRangePickerToolbar } from './DateRangePickerToolbar';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { DateRangePickerInput } from './DateRangePickerInput';\nimport { DateRangePickerViewDesktop } from './DateRangePickerViewDesktop';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n\n/**\n * @ignore - internal component.\n */\nfunction DateRangePickerViewRaw(props) {\n  const {\n    calendars,\n    className,\n    currentlySelectingRangeEnd,\n    parsedValue,\n    DateInputProps,\n    defaultCalendarMonth,\n    disableAutoMonthSwitching = false,\n    disableFuture,\n    disableHighlightToday,\n    disablePast,\n    endText,\n    isMobileKeyboardViewOpen,\n    maxDate,\n    minDate,\n    onDateChange,\n    onMonthChange,\n    open,\n    reduceAnimations = defaultReduceAnimations,\n    setCurrentlySelectingRangeEnd,\n    shouldDisableDate,\n    showToolbar,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const [start, end] = parsedValue;\n  const {\n    changeMonth,\n    calendarState,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    changeFocusedDay\n  } = useCalendarState({\n    date: start || end,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus: true,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  });\n  const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n\n  const scrollToDayIfNeeded = day => {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    const currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    const displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = utils.getMonth(day);\n\n    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = currentlySelectingRangeEnd === 'start' ? currentlySelectedDate : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(() => {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, parsedValue]); // eslint-disable-line\n\n  const handleSelectedDayChange = React.useCallback(newDate => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      utils,\n      range: parsedValue,\n      currentlySelectingRangeEnd\n    });\n    setCurrentlySelectingRangeEnd(nextSelection);\n    const isFullRangeSelected = currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? 'finish' : 'partial');\n  }, [currentlySelectingRangeEnd, parsedValue, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);\n\n  const renderView = () => {\n    const sharedCalendarProps = _extends({\n      parsedValue,\n      changeFocusedDay,\n      onSelectedDaysChange: handleSelectedDayChange,\n      reduceAnimations,\n      disableHighlightToday,\n      onMonthSwitchingAnimationEnd,\n      changeMonth,\n      currentlySelectingRangeEnd,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate,\n      shouldDisableDate\n    }, calendarState, other);\n\n    switch (wrapperVariant) {\n      case 'desktop':\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewDesktop, _extends({\n            calendars: calendars\n          }, sharedCalendarProps));\n        }\n\n      default:\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsx(Watermark, {\n      packageName: \"x-date-pickers-pro\",\n      releaseInfo: releaseInfo\n    }), toShowToolbar && /*#__PURE__*/_jsx(DateRangePickerToolbar, {\n      parsedValue: parsedValue,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat\n    }), isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n      children: /*#__PURE__*/_jsx(DateRangePickerInput, _extends({\n        disableOpenPicker: true,\n        ignoreInvalidInputs: true\n      }, DateInputProps))\n    }) : renderView()]\n  });\n}\n\nexport const DateRangePickerView = DateRangePickerViewRaw;\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerViewRaw.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool\n} : void 0;"]},"metadata":{},"sourceType":"module"}