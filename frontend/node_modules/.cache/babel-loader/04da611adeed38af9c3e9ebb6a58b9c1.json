{"ast":null,"code":"const MSEC_IN_HOUR = 60 * 60 * 1000; //convert our local date syntax a javascript UTC date\n\nconst toUtc = (dstChange, offset, year) => {\n  const [month, rest] = dstChange.split('/');\n  const [day, hour] = rest.split(':');\n  return Date.UTC(year, month - 1, day, hour) - offset * MSEC_IN_HOUR;\n}; // compare epoch with dst change events (in utc)\n\n\nconst inSummerTime = (epoch, start, end, summerOffset, winterOffset) => {\n  const year = new Date(epoch).getUTCFullYear();\n  const startUtc = toUtc(start, winterOffset, year);\n  const endUtc = toUtc(end, summerOffset, year); // simple number comparison now\n\n  return epoch >= startUtc && epoch < endUtc;\n};\n\nexport default inSummerTime;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/timezone/summerTime.js"],"names":["MSEC_IN_HOUR","toUtc","dstChange","offset","year","month","rest","split","day","hour","Date","UTC","inSummerTime","epoch","start","end","summerOffset","winterOffset","getUTCFullYear","startUtc","endUtc"],"mappings":"AAAA,MAAMA,YAAY,GAAG,KAAK,EAAL,GAAU,IAA/B,C,CAEA;;AACA,MAAMC,KAAK,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,IAApB,KAA6B;AACzC,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBJ,SAAS,CAACK,KAAV,CAAgB,GAAhB,CAAtB;AACA,QAAM,CAACC,GAAD,EAAMC,IAAN,IAAcH,IAAI,CAACC,KAAL,CAAW,GAAX,CAApB;AACA,SAAOG,IAAI,CAACC,GAAL,CAASP,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0BG,GAA1B,EAA+BC,IAA/B,IAAuCN,MAAM,GAAGH,YAAvD;AACD,CAJD,C,CAMA;;;AACA,MAAMY,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,YAApB,EAAkCC,YAAlC,KAAmD;AACtE,QAAMb,IAAI,GAAG,IAAIM,IAAJ,CAASG,KAAT,EAAgBK,cAAhB,EAAb;AACA,QAAMC,QAAQ,GAAGlB,KAAK,CAACa,KAAD,EAAQG,YAAR,EAAsBb,IAAtB,CAAtB;AACA,QAAMgB,MAAM,GAAGnB,KAAK,CAACc,GAAD,EAAMC,YAAN,EAAoBZ,IAApB,CAApB,CAHsE,CAItE;;AACA,SAAOS,KAAK,IAAIM,QAAT,IAAqBN,KAAK,GAAGO,MAApC;AACD,CAND;;AAQA,eAAeR,YAAf","sourcesContent":["const MSEC_IN_HOUR = 60 * 60 * 1000\n\n//convert our local date syntax a javascript UTC date\nconst toUtc = (dstChange, offset, year) => {\n  const [month, rest] = dstChange.split('/')\n  const [day, hour] = rest.split(':')\n  return Date.UTC(year, month - 1, day, hour) - offset * MSEC_IN_HOUR\n}\n\n// compare epoch with dst change events (in utc)\nconst inSummerTime = (epoch, start, end, summerOffset, winterOffset) => {\n  const year = new Date(epoch).getUTCFullYear()\n  const startUtc = toUtc(start, winterOffset, year)\n  const endUtc = toUtc(end, summerOffset, year)\n  // simple number comparison now\n  return epoch >= startUtc && epoch < endUtc\n}\n\nexport default inSummerTime\n"]},"metadata":{},"sourceType":"module"}