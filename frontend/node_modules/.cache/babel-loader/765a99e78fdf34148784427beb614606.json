{"ast":null,"code":"import ToastContainer from './ToastContainer';\nvar defaultContainerId = 'default';\nvar containers = new Map();\n/**\n * Create a container by Id.\n * @param containerId\n * @param options\n */\n\nfunction createContainer(containerId, props) {\n  var _ToastContainer$getIn = ToastContainer.getInstance(props),\n      container = _ToastContainer$getIn[0];\n\n  containers.set(containerId || defaultContainerId, container);\n  return container;\n}\n/**\n * Get the container by ID. Use default ID when ID is not available.\n * @param containerId\n */\n\n\nfunction getContainer(containerId) {\n  if (containers.size == 0) {\n    return null;\n  }\n\n  return containers.get(containerId || defaultContainerId);\n}\n\nvar toaster = function toaster(message) {\n  return toaster.push(message);\n};\n\ntoaster.push = function (message, options) {\n  var _container$current;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var container = getContainer(options.placement);\n\n  if (!container) {\n    var _options$placement;\n\n    container = createContainer((_options$placement = options.placement) !== null && _options$placement !== void 0 ? _options$placement : '', options);\n  }\n\n  return (_container$current = container.current) === null || _container$current === void 0 ? void 0 : _container$current.push(message);\n};\n\ntoaster.remove = function (key) {\n  containers.forEach(function (c) {\n    var _c$current;\n\n    return (_c$current = c.current) === null || _c$current === void 0 ? void 0 : _c$current.remove(key);\n  });\n};\n\ntoaster.clear = function () {\n  containers.forEach(function (c) {\n    var _c$current2;\n\n    return (_c$current2 = c.current) === null || _c$current2 === void 0 ? void 0 : _c$current2.clear();\n  });\n};\n\nexport default toaster;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/rsuite/esm/toaster/toaster.js"],"names":["ToastContainer","defaultContainerId","containers","Map","createContainer","containerId","props","_ToastContainer$getIn","getInstance","container","set","getContainer","size","get","toaster","message","push","options","_container$current","placement","_options$placement","current","remove","key","forEach","c","_c$current","clear","_c$current2"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,IAAIC,kBAAkB,GAAG,SAAzB;AACA,IAAIC,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,KAAtC,EAA6C;AAC3C,MAAIC,qBAAqB,GAAGP,cAAc,CAACQ,WAAf,CAA2BF,KAA3B,CAA5B;AAAA,MACIG,SAAS,GAAGF,qBAAqB,CAAC,CAAD,CADrC;;AAGAL,EAAAA,UAAU,CAACQ,GAAX,CAAeL,WAAW,IAAIJ,kBAA9B,EAAkDQ,SAAlD;AACA,SAAOA,SAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASE,YAAT,CAAsBN,WAAtB,EAAmC;AACjC,MAAIH,UAAU,CAACU,IAAX,IAAmB,CAAvB,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,SAAOV,UAAU,CAACW,GAAX,CAAeR,WAAW,IAAIJ,kBAA9B,CAAP;AACD;;AAED,IAAIa,OAAO,GAAG,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AACtC,SAAOD,OAAO,CAACE,IAAR,CAAaD,OAAb,CAAP;AACD,CAFD;;AAIAD,OAAO,CAACE,IAAR,GAAe,UAAUD,OAAV,EAAmBE,OAAnB,EAA4B;AACzC,MAAIC,kBAAJ;;AAEA,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIR,SAAS,GAAGE,YAAY,CAACM,OAAO,CAACE,SAAT,CAA5B;;AAEA,MAAI,CAACV,SAAL,EAAgB;AACd,QAAIW,kBAAJ;;AAEAX,IAAAA,SAAS,GAAGL,eAAe,CAAC,CAACgB,kBAAkB,GAAGH,OAAO,CAACE,SAA9B,MAA6C,IAA7C,IAAqDC,kBAAkB,KAAK,KAAK,CAAjF,GAAqFA,kBAArF,GAA0G,EAA3G,EAA+GH,OAA/G,CAA3B;AACD;;AAED,SAAO,CAACC,kBAAkB,GAAGT,SAAS,CAACY,OAAhC,MAA6C,IAA7C,IAAqDH,kBAAkB,KAAK,KAAK,CAAjF,GAAqF,KAAK,CAA1F,GAA8FA,kBAAkB,CAACF,IAAnB,CAAwBD,OAAxB,CAArG;AACD,CAhBD;;AAkBAD,OAAO,CAACQ,MAAR,GAAiB,UAAUC,GAAV,EAAe;AAC9BrB,EAAAA,UAAU,CAACsB,OAAX,CAAmB,UAAUC,CAAV,EAAa;AAC9B,QAAIC,UAAJ;;AAEA,WAAO,CAACA,UAAU,GAAGD,CAAC,CAACJ,OAAhB,MAA6B,IAA7B,IAAqCK,UAAU,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,UAAU,CAACJ,MAAX,CAAkBC,GAAlB,CAA7E;AACD,GAJD;AAKD,CAND;;AAQAT,OAAO,CAACa,KAAR,GAAgB,YAAY;AAC1BzB,EAAAA,UAAU,CAACsB,OAAX,CAAmB,UAAUC,CAAV,EAAa;AAC9B,QAAIG,WAAJ;;AAEA,WAAO,CAACA,WAAW,GAAGH,CAAC,CAACJ,OAAjB,MAA8B,IAA9B,IAAsCO,WAAW,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,WAAW,CAACD,KAAZ,EAA/E;AACD,GAJD;AAKD,CAND;;AAQA,eAAeb,OAAf","sourcesContent":["import ToastContainer from './ToastContainer';\nvar defaultContainerId = 'default';\nvar containers = new Map();\n/**\n * Create a container by Id.\n * @param containerId\n * @param options\n */\n\nfunction createContainer(containerId, props) {\n  var _ToastContainer$getIn = ToastContainer.getInstance(props),\n      container = _ToastContainer$getIn[0];\n\n  containers.set(containerId || defaultContainerId, container);\n  return container;\n}\n/**\n * Get the container by ID. Use default ID when ID is not available.\n * @param containerId\n */\n\n\nfunction getContainer(containerId) {\n  if (containers.size == 0) {\n    return null;\n  }\n\n  return containers.get(containerId || defaultContainerId);\n}\n\nvar toaster = function toaster(message) {\n  return toaster.push(message);\n};\n\ntoaster.push = function (message, options) {\n  var _container$current;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var container = getContainer(options.placement);\n\n  if (!container) {\n    var _options$placement;\n\n    container = createContainer((_options$placement = options.placement) !== null && _options$placement !== void 0 ? _options$placement : '', options);\n  }\n\n  return (_container$current = container.current) === null || _container$current === void 0 ? void 0 : _container$current.push(message);\n};\n\ntoaster.remove = function (key) {\n  containers.forEach(function (c) {\n    var _c$current;\n\n    return (_c$current = c.current) === null || _c$current === void 0 ? void 0 : _c$current.remove(key);\n  });\n};\n\ntoaster.clear = function () {\n  containers.forEach(function (c) {\n    var _c$current2;\n\n    return (_c$current2 = c.current) === null || _c$current2 === void 0 ? void 0 : _c$current2.clear();\n  });\n};\n\nexport default toaster;"]},"metadata":{},"sourceType":"module"}