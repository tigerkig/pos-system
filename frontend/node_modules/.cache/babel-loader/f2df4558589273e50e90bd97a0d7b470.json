{"ast":null,"code":"import { date as _date } from '../set/set.js';\nimport { aliases, short, long } from '../../data/days.js';\nimport walkTo from '../set/walk.js';\nconst methods = {\n  // # day in the month\n  date: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      num = parseInt(num, 10);\n\n      if (num) {\n        s.epoch = _date(s, num, goFwd);\n      }\n\n      return s;\n    }\n\n    return this.d.getDate();\n  },\n  //like 'wednesday' (hard!)\n  day: function (input, goFwd) {\n    if (input === undefined) {\n      return this.d.getDay();\n    }\n\n    let original = this.clone();\n    let want = input; // accept 'wednesday'\n\n    if (typeof input === 'string') {\n      input = input.toLowerCase();\n\n      if (aliases.hasOwnProperty(input)) {\n        want = aliases[input];\n      } else {\n        want = short().indexOf(input);\n\n        if (want === -1) {\n          want = long().indexOf(input);\n        }\n      }\n    } //move approx\n\n\n    let day = this.d.getDay();\n    let diff = day - want;\n\n    if (goFwd === true && diff > 0) {\n      diff = diff - 7;\n    }\n\n    if (goFwd === false && diff < 0) {\n      diff = diff + 7;\n    }\n\n    let s = this.subtract(diff, 'days'); //tighten it back up\n\n    walkTo(s, {\n      hour: original.hour(),\n      minute: original.minute(),\n      second: original.second()\n    });\n    return s;\n  },\n  //these are helpful name-wrappers\n  dayName: function (input, goFwd) {\n    if (input === undefined) {\n      return long()[this.day()];\n    }\n\n    let s = this.clone();\n    s = s.day(input, goFwd);\n    return s;\n  }\n};\nexport default methods;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/query/02-date.js"],"names":["date","_date","aliases","short","long","walkTo","methods","num","goFwd","undefined","s","clone","parseInt","epoch","d","getDate","day","input","getDay","original","want","toLowerCase","hasOwnProperty","indexOf","diff","subtract","hour","minute","second","dayName"],"mappings":"AAAA,SAASA,IAAI,IAAIC,KAAjB,QAA8B,eAA9B;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,MAAMC,OAAO,GAAG;AACd;AACAN,EAAAA,IAAI,EAAE,UAAUO,GAAV,EAAeC,KAAf,EAAsB;AAC1B,QAAID,GAAG,KAAKE,SAAZ,EAAuB;AACrB,UAAIC,CAAC,GAAG,KAAKC,KAAL,EAAR;AACAJ,MAAAA,GAAG,GAAGK,QAAQ,CAACL,GAAD,EAAM,EAAN,CAAd;;AACA,UAAIA,GAAJ,EAAS;AACPG,QAAAA,CAAC,CAACG,KAAF,GAAUZ,KAAK,CAACS,CAAD,EAAIH,GAAJ,EAASC,KAAT,CAAf;AACD;;AACD,aAAOE,CAAP;AACD;;AACD,WAAO,KAAKI,CAAL,CAAOC,OAAP,EAAP;AACD,GAZa;AAcd;AACAC,EAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiBT,KAAjB,EAAwB;AAC3B,QAAIS,KAAK,KAAKR,SAAd,EAAyB;AACvB,aAAO,KAAKK,CAAL,CAAOI,MAAP,EAAP;AACD;;AACD,QAAIC,QAAQ,GAAG,KAAKR,KAAL,EAAf;AACA,QAAIS,IAAI,GAAGH,KAAX,CAL2B,CAM3B;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGA,KAAK,CAACI,WAAN,EAAR;;AACA,UAAInB,OAAO,CAACoB,cAAR,CAAuBL,KAAvB,CAAJ,EAAmC;AACjCG,QAAAA,IAAI,GAAGlB,OAAO,CAACe,KAAD,CAAd;AACD,OAFD,MAEO;AACLG,QAAAA,IAAI,GAAGjB,KAAK,GAAGoB,OAAR,CAAgBN,KAAhB,CAAP;;AACA,YAAIG,IAAI,KAAK,CAAC,CAAd,EAAiB;AACfA,UAAAA,IAAI,GAAGhB,IAAI,GAAGmB,OAAP,CAAeN,KAAf,CAAP;AACD;AACF;AACF,KAjB0B,CAkB3B;;;AACA,QAAID,GAAG,GAAG,KAAKF,CAAL,CAAOI,MAAP,EAAV;AACA,QAAIM,IAAI,GAAGR,GAAG,GAAGI,IAAjB;;AACA,QAAIZ,KAAK,KAAK,IAAV,IAAkBgB,IAAI,GAAG,CAA7B,EAAgC;AAC9BA,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACD;;AACD,QAAIhB,KAAK,KAAK,KAAV,IAAmBgB,IAAI,GAAG,CAA9B,EAAiC;AAC/BA,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACD;;AACD,QAAId,CAAC,GAAG,KAAKe,QAAL,CAAcD,IAAd,EAAoB,MAApB,CAAR,CA3B2B,CA4B3B;;AACAnB,IAAAA,MAAM,CAACK,CAAD,EAAI;AACRgB,MAAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,EADE;AAERC,MAAAA,MAAM,EAAER,QAAQ,CAACQ,MAAT,EAFA;AAGRC,MAAAA,MAAM,EAAET,QAAQ,CAACS,MAAT;AAHA,KAAJ,CAAN;AAKA,WAAOlB,CAAP;AACD,GAlDa;AAoDd;AACAmB,EAAAA,OAAO,EAAE,UAAUZ,KAAV,EAAiBT,KAAjB,EAAwB;AAC/B,QAAIS,KAAK,KAAKR,SAAd,EAAyB;AACvB,aAAOL,IAAI,GAAG,KAAKY,GAAL,EAAH,CAAX;AACD;;AACD,QAAIN,CAAC,GAAG,KAAKC,KAAL,EAAR;AACAD,IAAAA,CAAC,GAAGA,CAAC,CAACM,GAAF,CAAMC,KAAN,EAAaT,KAAb,CAAJ;AACA,WAAOE,CAAP;AACD;AA5Da,CAAhB;AA8DA,eAAeJ,OAAf","sourcesContent":["import { date as _date } from '../set/set.js'\nimport { aliases, short, long } from '../../data/days.js'\nimport walkTo from '../set/walk.js'\n\nconst methods = {\n  // # day in the month\n  date: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      num = parseInt(num, 10)\n      if (num) {\n        s.epoch = _date(s, num, goFwd)\n      }\n      return s\n    }\n    return this.d.getDate()\n  },\n\n  //like 'wednesday' (hard!)\n  day: function (input, goFwd) {\n    if (input === undefined) {\n      return this.d.getDay()\n    }\n    let original = this.clone()\n    let want = input\n    // accept 'wednesday'\n    if (typeof input === 'string') {\n      input = input.toLowerCase()\n      if (aliases.hasOwnProperty(input)) {\n        want = aliases[input]\n      } else {\n        want = short().indexOf(input)\n        if (want === -1) {\n          want = long().indexOf(input)\n        }\n      }\n    }\n    //move approx\n    let day = this.d.getDay()\n    let diff = day - want\n    if (goFwd === true && diff > 0) {\n      diff = diff - 7\n    }\n    if (goFwd === false && diff < 0) {\n      diff = diff + 7\n    }\n    let s = this.subtract(diff, 'days')\n    //tighten it back up\n    walkTo(s, {\n      hour: original.hour(),\n      minute: original.minute(),\n      second: original.second()\n    })\n    return s\n  },\n\n  //these are helpful name-wrappers\n  dayName: function (input, goFwd) {\n    if (input === undefined) {\n      return long()[this.day()]\n    }\n    let s = this.clone()\n    s = s.day(input, goFwd)\n    return s\n  }\n}\nexport default methods\n"]},"metadata":{},"sourceType":"module"}