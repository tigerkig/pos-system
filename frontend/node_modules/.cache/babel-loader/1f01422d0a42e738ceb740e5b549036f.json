{"ast":null,"code":"// truncate any sub-millisecond values\nconst parseMs = function () {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  str = String(str); //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n\n  if (str.length > 3) {\n    str = str.substr(0, 3);\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00';\n  } else if (str.length === 2) {\n    str = str + '0';\n  }\n\n  return Number(str) || 0;\n};\n\nconst parseTime = function (s) {\n  let str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase(); //formal time format - 04:30.23\n\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/);\n\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1]);\n\n    if (h < 0 || h > 24) {\n      return s.startOf('day');\n    }\n\n    let m = Number(arr[2]); //don't accept '5:3pm'\n\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day');\n    }\n\n    s = s.hour(h);\n    s = s.minute(m);\n    s = s.seconds(arr[3] || 0);\n    s = s.millisecond(parseMs(arr[4])); //parse-out am/pm\n\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/);\n\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1]);\n    }\n\n    return s;\n  } //try an informal form - 5pm (no minutes)\n\n\n  arr = str.match(/([0-9]+) ?(am|pm)/);\n\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1]); //validate it a little..\n\n    if (h > 12 || h < 1) {\n      return s.startOf('day');\n    }\n\n    s = s.hour(arr[1] || 0);\n    s = s.ampm(arr[2]);\n    s = s.startOf('hour');\n    return s;\n  } //no time info found, use start-of-day\n\n\n  s = s.startOf('day');\n  return s;\n};\n\nexport default parseTime;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/formats/parseTime.js"],"names":["parseMs","str","String","length","substr","Number","parseTime","s","replace","toLowerCase","arr","match","h","startOf","m","hour","minute","seconds","millisecond","ampm"],"mappings":"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","sourcesContent":["// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str)\n  //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substr(0, 3)\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00'\n  } else if (str.length === 2) {\n    str = str + '0'\n  }\n  return Number(str) || 0\n}\n\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase()\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/)\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1])\n    if (h < 0 || h > 24) {\n      return s.startOf('day')\n    }\n    let m = Number(arr[2]) //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day')\n    }\n    s = s.hour(h)\n    s = s.minute(m)\n    s = s.seconds(arr[3] || 0)\n    s = s.millisecond(parseMs(arr[4]))\n    //parse-out am/pm\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/)\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1])\n    }\n    return s\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/)\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1])\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day')\n    }\n    s = s.hour(arr[1] || 0)\n    s = s.ampm(arr[2])\n    s = s.startOf('hour')\n    return s\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day')\n  return s\n}\nexport default parseTime\n"]},"metadata":{},"sourceType":"module"}