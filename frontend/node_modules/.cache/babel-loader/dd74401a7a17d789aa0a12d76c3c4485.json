{"ast":null,"code":"var $ = require('./$'),\n    global = require('./$.global'),\n    isRegExp = require('./$.is-regexp'),\n    $flags = require('./$.flags'),\n    $RegExp = global.RegExp,\n    Base = $RegExp,\n    proto = $RegExp.prototype,\n    re1 = /a/g,\n    re2 = /a/g // \"new\" creates a new object, old webkit buggy here\n,\n    CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./$.descriptors') && (!CORRECT_NEW || require('./$.fails')(function () {\n  re2[require('./$.wks')('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match\n\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var piRE = isRegExp(p),\n        fiU = f === undefined;\n    return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p : CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);\n  };\n\n  $.each.call($.getNames(Base), function (key) {\n    key in $RegExp || $.setDesc($RegExp, key, {\n      configurable: true,\n      get: function () {\n        return Base[key];\n      },\n      set: function (it) {\n        Base[key] = it;\n      }\n    });\n  });\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n\n  require('./$.redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./$.set-species')('RegExp');","map":{"version":3,"sources":["E:/React/pos-system/frontend/node_modules/babel/node_modules/core-js/modules/es6.regexp.constructor.js"],"names":["$","require","global","isRegExp","$flags","$RegExp","RegExp","Base","proto","prototype","re1","re2","CORRECT_NEW","p","f","piRE","fiU","undefined","constructor","source","call","each","getNames","key","setDesc","configurable","get","set","it"],"mappings":"AAAA,IAAIA,CAAC,GAAUC,OAAO,CAAC,KAAD,CAAtB;AAAA,IACIC,MAAM,GAAKD,OAAO,CAAC,YAAD,CADtB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAFtB;AAAA,IAGIG,MAAM,GAAKH,OAAO,CAAC,WAAD,CAHtB;AAAA,IAIII,OAAO,GAAIH,MAAM,CAACI,MAJtB;AAAA,IAKIC,IAAI,GAAOF,OALf;AAAA,IAMIG,KAAK,GAAMH,OAAO,CAACI,SANvB;AAAA,IAOIC,GAAG,GAAQ,IAPf;AAAA,IAQIC,GAAG,GAAQ,IARf,CASE;AATF;AAAA,IAUIC,WAAW,GAAG,IAAIP,OAAJ,CAAYK,GAAZ,MAAqBA,GAVvC;;AAYA,IAAGT,OAAO,CAAC,iBAAD,CAAP,KAA+B,CAACW,WAAD,IAAgBX,OAAO,CAAC,WAAD,CAAP,CAAqB,YAAU;AAC/EU,EAAAA,GAAG,CAACV,OAAO,CAAC,SAAD,CAAP,CAAmB,OAAnB,CAAD,CAAH,GAAmC,KAAnC,CAD+E,CAE/E;;AACA,SAAOI,OAAO,CAACK,GAAD,CAAP,IAAgBA,GAAhB,IAAuBL,OAAO,CAACM,GAAD,CAAP,IAAgBA,GAAvC,IAA8CN,OAAO,CAACK,GAAD,EAAM,GAAN,CAAP,IAAqB,MAA1E;AACD,CAJiD,CAA/C,CAAH,EAII;AACFL,EAAAA,OAAO,GAAG,SAASC,MAAT,CAAgBO,CAAhB,EAAmBC,CAAnB,EAAqB;AAC7B,QAAIC,IAAI,GAAGZ,QAAQ,CAACU,CAAD,CAAnB;AAAA,QACIG,GAAG,GAAIF,CAAC,KAAKG,SADjB;AAEA,WAAO,EAAE,gBAAgBZ,OAAlB,KAA8BU,IAA9B,IAAsCF,CAAC,CAACK,WAAF,KAAkBb,OAAxD,IAAmEW,GAAnE,GAAyEH,CAAzE,GACHD,WAAW,GACT,IAAIL,IAAJ,CAASQ,IAAI,IAAI,CAACC,GAAT,GAAeH,CAAC,CAACM,MAAjB,GAA0BN,CAAnC,EAAsCC,CAAtC,CADS,GAETP,IAAI,CAAC,CAACQ,IAAI,GAAGF,CAAC,YAAYR,OAArB,IAAgCQ,CAAC,CAACM,MAAlC,GAA2CN,CAA5C,EAA+CE,IAAI,IAAIC,GAAR,GAAcZ,MAAM,CAACgB,IAAP,CAAYP,CAAZ,CAAd,GAA+BC,CAA9E,CAHV;AAID,GAPD;;AAQAd,EAAAA,CAAC,CAACqB,IAAF,CAAOD,IAAP,CAAYpB,CAAC,CAACsB,QAAF,CAAWf,IAAX,CAAZ,EAA8B,UAASgB,GAAT,EAAa;AACzCA,IAAAA,GAAG,IAAIlB,OAAP,IAAkBL,CAAC,CAACwB,OAAF,CAAUnB,OAAV,EAAmBkB,GAAnB,EAAwB;AACxCE,MAAAA,YAAY,EAAE,IAD0B;AAExCC,MAAAA,GAAG,EAAE,YAAU;AAAE,eAAOnB,IAAI,CAACgB,GAAD,CAAX;AAAmB,OAFI;AAGxCI,MAAAA,GAAG,EAAE,UAASC,EAAT,EAAY;AAAErB,QAAAA,IAAI,CAACgB,GAAD,CAAJ,GAAYK,EAAZ;AAAiB;AAHI,KAAxB,CAAlB;AAKD,GAND;AAOApB,EAAAA,KAAK,CAACU,WAAN,GAAoBb,OAApB;AACAA,EAAAA,OAAO,CAACI,SAAR,GAAoBD,KAApB;;AACAP,EAAAA,OAAO,CAAC,cAAD,CAAP,CAAwBC,MAAxB,EAAgC,QAAhC,EAA0CG,OAA1C;AACD;;AAEDJ,OAAO,CAAC,iBAAD,CAAP,CAA2B,QAA3B","sourcesContent":["var $        = require('./$')\n  , global   = require('./$.global')\n  , isRegExp = require('./$.is-regexp')\n  , $flags   = require('./$.flags')\n  , $RegExp  = global.RegExp\n  , Base     = $RegExp\n  , proto    = $RegExp.prototype\n  , re1      = /a/g\n  , re2      = /a/g\n  // \"new\" creates a new object, old webkit buggy here\n  , CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif(require('./$.descriptors') && (!CORRECT_NEW || require('./$.fails')(function(){\n  re2[require('./$.wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))){\n  $RegExp = function RegExp(p, f){\n    var piRE = isRegExp(p)\n      , fiU  = f === undefined;\n    return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p\n      : CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);\n  };\n  $.each.call($.getNames(Base), function(key){\n    key in $RegExp || $.setDesc($RegExp, key, {\n      configurable: true,\n      get: function(){ return Base[key]; },\n      set: function(it){ Base[key] = it; }\n    });\n  });\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./$.redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./$.set-species')('RegExp');"]},"metadata":{},"sourceType":"script"}