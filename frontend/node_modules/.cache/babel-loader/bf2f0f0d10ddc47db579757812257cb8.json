{"ast":null,"code":"import axios from 'axios';\nimport { useToasts } from 'react-toast-notifications'; // const { api_url } = process.env\n\nconst api_url = \"http://localhost:8080/\";\nexport const register = newUser => {\n  // const { addToast } = useToasts()\n  return axios.post(api_url + 'users/register', {\n    firstName: newUser.firstName,\n    lastName: newUser.lastName,\n    email: newUser.email,\n    password: newUser.password,\n    confirmPassword: newUser.confirmPassword\n  }).then(response => {\n    console.log('Registered'); // addToast(response, { appearance: 'success', autoDismiss: true, })\n  });\n};\nexport const login = user => {\n  return axios.post(api_url + 'users/login', {\n    email: user.email,\n    password: user.password\n  }).then(response => {\n    localStorage.setItem('usertoken', response.data.token);\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getProfile = token => {\n  return axios.get('users/profile', {\n    headers: {\n      Authorization: token\n    }\n  }).then(response => {\n    response.data.status = 'success';\n    return response.data;\n  }).catch(err => {\n    console.dir(err);\n    return {\n      'error': err.message,\n      'status': 'failed'\n    };\n  });\n};\nexport const updatePassword = updatePasswordRequest => {\n  return axios.put(`/users/password/`, {\n    email: updatePasswordRequest.email,\n    password: updatePasswordRequest.password,\n    new_password: updatePasswordRequest.new_password\n  }, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': updatePasswordRequest.token\n    }\n  }).then(function (response) {\n    return response.data;\n  }).catch(err => {\n    console.dir(\"err\", err);\n    return err.message;\n  });\n};","map":{"version":3,"sources":["E:/React/pos-system/main/src/auth/UserFunction.js"],"names":["axios","useToasts","api_url","register","newUser","post","firstName","lastName","email","password","confirmPassword","then","response","console","log","login","user","localStorage","setItem","data","token","catch","err","getProfile","get","headers","Authorization","status","dir","message","updatePassword","updatePasswordRequest","put","new_password"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,2BAA1B,C,CAEA;;AACA,MAAMC,OAAO,GAAG,wBAAhB;AAGA,OAAO,MAAMC,QAAQ,GAAGC,OAAO,IAAI;AACjC;AACA,SAAOJ,KAAK,CACTK,IADI,CACCH,OAAO,GAAG,gBADX,EAC6B;AAChCI,IAAAA,SAAS,EAAEF,OAAO,CAACE,SADa;AAEhCC,IAAAA,QAAQ,EAAEH,OAAO,CAACG,QAFc;AAGhCC,IAAAA,KAAK,EAAEJ,OAAO,CAACI,KAHiB;AAIhCC,IAAAA,QAAQ,EAAEL,OAAO,CAACK,QAJc;AAKhCC,IAAAA,eAAe,EAAEN,OAAO,CAACM;AALO,GAD7B,EAQJC,IARI,CAQCC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADgB,CAEhB;AACD,GAXI,CAAP;AAYD,CAdM;AAgBP,OAAO,MAAMC,KAAK,GAAGC,IAAI,IAAI;AAC3B,SAAOhB,KAAK,CACTK,IADI,CACCH,OAAO,GAAG,aADX,EAC0B;AAC7BM,IAAAA,KAAK,EAAEQ,IAAI,CAACR,KADiB;AAE7BC,IAAAA,QAAQ,EAAEO,IAAI,CAACP;AAFc,GAD1B,EAKJE,IALI,CAKCC,QAAQ,IAAI;AAChBK,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCN,QAAQ,CAACO,IAAT,CAAcC,KAAhD;AACA,WAAOR,QAAQ,CAACO,IAAhB;AACD,GARI,EASJE,KATI,CASEC,GAAG,IAAI;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACD,GAXI,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAGH,KAAK,IAAI;AACjC,SAAOpB,KAAK,CACTwB,GADI,CACA,eADA,EACiB;AACpBC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEN;AAAjB;AADW,GADjB,EAIJT,IAJI,CAICC,QAAQ,IAAI;AAChBA,IAAAA,QAAQ,CAACO,IAAT,CAAcQ,MAAd,GAAuB,SAAvB;AACA,WAAOf,QAAQ,CAACO,IAAhB;AACD,GAPI,EAQJE,KARI,CAQEC,GAAG,IAAI;AACZT,IAAAA,OAAO,CAACe,GAAR,CAAYN,GAAZ;AACA,WAAO;AAAC,eAAQA,GAAG,CAACO,OAAb;AAAqB,gBAAS;AAA9B,KAAP;AACD,GAXI,CAAP;AAYD,CAbM;AAiBP,OAAO,MAAMC,cAAc,GAAGC,qBAAqB,IAAI;AACrD,SAAO/B,KAAK,CACTgC,GADI,CAEF,kBAFE,EAGH;AACExB,IAAAA,KAAK,EAACuB,qBAAqB,CAACvB,KAD9B;AAEEC,IAAAA,QAAQ,EAAEsB,qBAAqB,CAACtB,QAFlC;AAGEwB,IAAAA,YAAY,EAAEF,qBAAqB,CAACE;AAHtC,GAHG,EAQH;AACER,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBM,qBAAqB,CAACX;AAFlC;AADX,GARG,EAeJT,IAfI,CAeC,UAASC,QAAT,EAAmB;AACrB,WAAOA,QAAQ,CAACO,IAAhB;AACH,GAjBI,EAiBFE,KAjBE,CAiBIC,GAAG,IAAE;AACZT,IAAAA,OAAO,CAACe,GAAR,CAAY,KAAZ,EAAkBN,GAAlB;AACA,WAAOA,GAAG,CAACO,OAAX;AACD,GApBI,CAAP;AAqBD,CAtBM","sourcesContent":["import axios from 'axios'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\n// const { api_url } = process.env\r\nconst api_url = \"http://localhost:8080/\"\r\n\r\n\r\nexport const register = newUser => {\r\n  // const { addToast } = useToasts()\r\n  return axios\r\n    .post(api_url + 'users/register', {\r\n      firstName: newUser.firstName,\r\n      lastName: newUser.lastName,\r\n      email: newUser.email,\r\n      password: newUser.password,\r\n      confirmPassword: newUser.confirmPassword\r\n    })\r\n    .then(response => {\r\n      console.log('Registered')\r\n      // addToast(response, { appearance: 'success', autoDismiss: true, })\r\n    })\r\n}\r\n\r\nexport const login = user => {\r\n  return axios\r\n    .post(api_url + 'users/login', {\r\n      email: user.email,\r\n      password: user.password\r\n    })\r\n    .then(response => {\r\n      localStorage.setItem('usertoken', response.data.token)\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n\r\nexport const getProfile = token => {\r\n  return axios\r\n    .get('users/profile', {\r\n      headers: { Authorization: token }\r\n    })\r\n    .then(response => {\r\n      response.data.status = 'success';\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.dir(err)\r\n      return {'error':err.message,'status':'failed'};\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const updatePassword = updatePasswordRequest => {\r\n  return axios\r\n    .put(\r\n      `/users/password/`,\r\n      {\r\n        email:updatePasswordRequest.email,\r\n        password: updatePasswordRequest.password,\r\n        new_password: updatePasswordRequest.new_password\r\n      },\r\n      {\r\n        headers: { \r\n            'Content-Type': 'application/json', \r\n            'Authorization': updatePasswordRequest.token \r\n        }\r\n      }\r\n    )\r\n    .then(function(response) {\r\n        return response.data;\r\n    }).catch(err=>{\r\n      console.dir(\"err\",err);\r\n      return err.message;\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}