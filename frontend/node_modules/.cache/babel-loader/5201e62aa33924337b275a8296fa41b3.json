{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { useCellEditing } from './useGridCellEditing.old';\nimport { useGridRowEditing } from './useGridRowEditing.old';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\n/**\n * @requires useGridFocus - can be after, async only\n * @requires useGridParamsApi (method)\n * @requires useGridColumns (state)\n */\n\nexport function useGridEditing(apiRef, props) {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n  useCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  apiRef.current.unstable_registerControlState({\n    stateId: 'editRows',\n    propModel: props.editRowsModel,\n    propOnChange: props.onEditRowsModelChange,\n    stateSelector: gridEditRowsStateSelector,\n    changeEvent: 'editRowsModelChange'\n  });\n  const isCellEditable = React.useCallback(params => !params.rowNode.isAutoGenerated && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.isCellEditable]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    }\n\n    const callbackToRunImmediately = () => {\n      callback();\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, callbackToRunImmediately];\n  };\n\n  const runPendingEditCellValueMutation = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, callback] = debounceMap.current[id][debouncedField];\n        callback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, callback] = debounceMap.current[id][field];\n      callback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback(function (params) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    maybeDebounce(params.id, params.field, params.debounceMs, () => {\n      var _props$experimentalFe;\n\n      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n        if (props.editMode === 'row') {\n          return apiRef.current.unstable_setRowEditingEditCellValue(params);\n        }\n\n        return apiRef.current.unstable_setCellEditingEditCellValue(params);\n      }\n\n      const newParams = {\n        id: params.id,\n        field: params.field,\n        props: {\n          value: params.value\n        }\n      };\n      return apiRef.current.publishEvent('editCellPropsChange', newParams, event);\n    });\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const parseValue = React.useCallback((id, field, value) => {\n    const column = apiRef.current.getColumn(field);\n    return column.valueParser ? column.valueParser(value, apiRef.current.getCellParams(id, field)) : value;\n  }, [apiRef]);\n  const setEditCellProps = React.useCallback(params => {\n    const {\n      id,\n      field,\n      props: editProps\n    } = params;\n    logger.debug(`Setting cell props on id: ${id} field: ${field}`);\n    apiRef.current.setState(state => {\n      const editRowsModel = _extends({}, state.editRows);\n\n      editRowsModel[id] = _extends({}, state.editRows[id]);\n      editRowsModel[id][field] = _extends({}, editProps, {\n        value: parseValue(id, field, editProps.value)\n      });\n      return _extends({}, state, {\n        editRows: editRowsModel\n      });\n    });\n    apiRef.current.forceUpdate();\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id][field];\n  }, [apiRef, logger, parseValue]);\n  const setEditRowsModel = React.useCallback(model => {\n    const currentModel = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting editRows model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        editRows: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const getEditRowsModel = React.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);\n  const preventTextSelection = React.useCallback((params, event) => {\n    const isMoreThanOneClick = event.detail > 1;\n\n    if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {\n      // If we click more than one time, then we prevent the default behavior of selecting the text cell.\n      event.preventDefault();\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventTextSelection);\n  useGridApiOptionHandler(apiRef, 'editCellPropsChange', props.onEditCellPropsChange); // TODO v6: remove, use `preProcessEditCellProps` instead\n\n  const editingSharedApi = {\n    isCellEditable,\n    setEditRowsModel,\n    getEditRowsModel,\n    setEditCellValue,\n    unstable_setEditCellProps: setEditCellProps,\n    unstable_parseValue: parseValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditRowApi');\n  React.useEffect(() => {\n    if (props.editRowsModel !== undefined) {\n      apiRef.current.setEditRowsModel(props.editRowsModel);\n    }\n  }, [apiRef, props.editRowsModel]);\n}","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.old.js"],"names":["_extends","React","GridCellModes","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridEditRowsStateSelector","useCellEditing","useGridRowEditing","editingStateInitializer","state","editRows","useGridEditing","apiRef","props","_props$experimentalFe2","logger","debounceMap","useRef","current","unstable_registerControlState","stateId","propModel","editRowsModel","propOnChange","onEditRowsModelChange","stateSelector","changeEvent","isCellEditable","useCallback","params","rowNode","isAutoGenerated","colDef","editable","renderEditCell","maybeDebounce","id","field","debounceMs","callback","timeout","clearTimeout","callbackToRunImmediately","setTimeout","runPendingEditCellValueMutation","Object","keys","forEach","debouncedField","setEditCellValue","event","_props$experimentalFe","experimentalFeatures","preventCommitWhileValidating","editMode","unstable_setRowEditingEditCellValue","unstable_setCellEditingEditCellValue","newParams","value","publishEvent","parseValue","column","getColumn","valueParser","getCellParams","setEditCellProps","editProps","debug","setState","forceUpdate","editRowsState","setEditRowsModel","model","currentModel","getEditRowsModel","preventTextSelection","isMoreThanOneClick","detail","isEditable","cellMode","View","preventDefault","onEditCellPropsChange","editingSharedApi","unstable_setEditCellProps","unstable_parseValue","unstable_runPendingEditCellValueMutation","useEffect","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { useCellEditing } from './useGridCellEditing.old';\nimport { useGridRowEditing } from './useGridRowEditing.old';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\n/**\n * @requires useGridFocus - can be after, async only\n * @requires useGridParamsApi (method)\n * @requires useGridColumns (state)\n */\n\nexport function useGridEditing(apiRef, props) {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n  useCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  apiRef.current.unstable_registerControlState({\n    stateId: 'editRows',\n    propModel: props.editRowsModel,\n    propOnChange: props.onEditRowsModelChange,\n    stateSelector: gridEditRowsStateSelector,\n    changeEvent: 'editRowsModelChange'\n  });\n  const isCellEditable = React.useCallback(params => !params.rowNode.isAutoGenerated && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.isCellEditable]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    }\n\n    const callbackToRunImmediately = () => {\n      callback();\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, callbackToRunImmediately];\n  };\n\n  const runPendingEditCellValueMutation = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, callback] = debounceMap.current[id][debouncedField];\n        callback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, callback] = debounceMap.current[id][field];\n      callback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback((params, event = {}) => {\n    maybeDebounce(params.id, params.field, params.debounceMs, () => {\n      var _props$experimentalFe;\n\n      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n        if (props.editMode === 'row') {\n          return apiRef.current.unstable_setRowEditingEditCellValue(params);\n        }\n\n        return apiRef.current.unstable_setCellEditingEditCellValue(params);\n      }\n\n      const newParams = {\n        id: params.id,\n        field: params.field,\n        props: {\n          value: params.value\n        }\n      };\n      return apiRef.current.publishEvent('editCellPropsChange', newParams, event);\n    });\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const parseValue = React.useCallback((id, field, value) => {\n    const column = apiRef.current.getColumn(field);\n    return column.valueParser ? column.valueParser(value, apiRef.current.getCellParams(id, field)) : value;\n  }, [apiRef]);\n  const setEditCellProps = React.useCallback(params => {\n    const {\n      id,\n      field,\n      props: editProps\n    } = params;\n    logger.debug(`Setting cell props on id: ${id} field: ${field}`);\n    apiRef.current.setState(state => {\n      const editRowsModel = _extends({}, state.editRows);\n\n      editRowsModel[id] = _extends({}, state.editRows[id]);\n      editRowsModel[id][field] = _extends({}, editProps, {\n        value: parseValue(id, field, editProps.value)\n      });\n      return _extends({}, state, {\n        editRows: editRowsModel\n      });\n    });\n    apiRef.current.forceUpdate();\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id][field];\n  }, [apiRef, logger, parseValue]);\n  const setEditRowsModel = React.useCallback(model => {\n    const currentModel = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting editRows model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        editRows: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const getEditRowsModel = React.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);\n  const preventTextSelection = React.useCallback((params, event) => {\n    const isMoreThanOneClick = event.detail > 1;\n\n    if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {\n      // If we click more than one time, then we prevent the default behavior of selecting the text cell.\n      event.preventDefault();\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventTextSelection);\n  useGridApiOptionHandler(apiRef, 'editCellPropsChange', props.onEditCellPropsChange); // TODO v6: remove, use `preProcessEditCellProps` instead\n\n  const editingSharedApi = {\n    isCellEditable,\n    setEditRowsModel,\n    getEditRowsModel,\n    setEditCellValue,\n    unstable_setEditCellProps: setEditCellProps,\n    unstable_parseValue: parseValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditRowApi');\n  React.useEffect(() => {\n    if (props.editRowsModel !== undefined) {\n      apiRef.current.setEditRowsModel(props.editRowsModel);\n    }\n  }, [apiRef, props.editRowsModel]);\n}"]},"metadata":{},"sourceType":"module"}