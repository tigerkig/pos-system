{"ast":null,"code":"import { isObject, isDate, isArray } from '../fns.js';\nimport fns from './helpers.js';\nconst {\n  parseArray,\n  parseObject,\n  parseNumber\n} = fns;\nimport namedDates from './named-dates.js';\nimport normalize from './normalize.js';\nimport parseString from './parse.js'; //we have to actually parse these inputs ourselves\n//  -  can't use built-in js parser ;(\n//=========================================\n// ISO Date\t  \"2015-03-25\"\n// Short Date\t\"03/25/2015\" or \"2015/03/25\"\n// Long Date\t\"Mar 25 2015\" or \"25 Mar 2015\"\n// Full Date\t\"Wednesday March 25 2015\"\n//=========================================\n\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}; //find the epoch from different input styles\n\nconst parseInput = (s, input) => {\n  let today = s._today || defaults; //if we've been given a epoch number, it's easy\n\n  if (typeof input === 'number') {\n    return parseNumber(s, input);\n  } //set tmp time\n\n\n  s.epoch = Date.now(); // overwrite tmp time with 'today' value, if exists\n\n  if (s._today && isObject(s._today) && Object.keys(s._today).length > 0) {\n    let res = parseObject(s, today, defaults);\n\n    if (res.isValid()) {\n      s.epoch = res.epoch;\n    }\n  } // null input means 'now'\n\n\n  if (input === null || input === undefined || input === '') {\n    return s; //k, we're good.\n  } //support input of Date() object\n\n\n  if (isDate(input) === true) {\n    s.epoch = input.getTime();\n    return s;\n  } //support [2016, 03, 01] format\n\n\n  if (isArray(input) === true) {\n    s = parseArray(s, input, today);\n    return s;\n  } //support {year:2016, month:3} format\n\n\n  if (isObject(input) === true) {\n    //support spacetime object as input\n    if (input.epoch) {\n      s.epoch = input.epoch;\n      s.tz = input.tz;\n      return s;\n    }\n\n    s = parseObject(s, input, today);\n    return s;\n  } //input as a string..\n\n\n  if (typeof input !== 'string') {\n    return s;\n  } //little cleanup..\n\n\n  input = normalize(input); //try some known-words, like 'now'\n\n  if (namedDates.hasOwnProperty(input) === true) {\n    s = namedDates[input](s);\n    return s;\n  } //try each text-parse template, use the first good result\n\n\n  return parseString(s, input);\n};\n\nexport default parseInput;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/index.js"],"names":["isObject","isDate","isArray","fns","parseArray","parseObject","parseNumber","namedDates","normalize","parseString","defaults","year","Date","getFullYear","month","date","parseInput","s","input","today","_today","epoch","now","Object","keys","length","res","isValid","undefined","getTime","tz","hasOwnProperty"],"mappings":"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","sourcesContent":["import { isObject, isDate, isArray } from '../fns.js'\nimport fns from './helpers.js'\nconst { parseArray, parseObject, parseNumber } = fns\nimport namedDates from './named-dates.js'\nimport normalize from './normalize.js'\nimport parseString from './parse.js'\n//we have to actually parse these inputs ourselves\n//  -  can't use built-in js parser ;(\n//=========================================\n// ISO Date\t  \"2015-03-25\"\n// Short Date\t\"03/25/2015\" or \"2015/03/25\"\n// Long Date\t\"Mar 25 2015\" or \"25 Mar 2015\"\n// Full Date\t\"Wednesday March 25 2015\"\n//=========================================\n\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//find the epoch from different input styles\nconst parseInput = (s, input) => {\n  let today = s._today || defaults\n  //if we've been given a epoch number, it's easy\n  if (typeof input === 'number') {\n    return parseNumber(s, input)\n  }\n  //set tmp time\n  s.epoch = Date.now()\n  // overwrite tmp time with 'today' value, if exists\n  if (s._today && isObject(s._today) && Object.keys(s._today).length > 0) {\n    let res = parseObject(s, today, defaults)\n    if (res.isValid()) {\n      s.epoch = res.epoch\n    }\n  }\n  // null input means 'now'\n  if (input === null || input === undefined || input === '') {\n    return s //k, we're good.\n  }\n  //support input of Date() object\n  if (isDate(input) === true) {\n    s.epoch = input.getTime()\n    return s\n  }\n  //support [2016, 03, 01] format\n  if (isArray(input) === true) {\n    s = parseArray(s, input, today)\n    return s\n  }\n  //support {year:2016, month:3} format\n  if (isObject(input) === true) {\n    //support spacetime object as input\n    if (input.epoch) {\n      s.epoch = input.epoch\n      s.tz = input.tz\n      return s\n    }\n    s = parseObject(s, input, today)\n    return s\n  }\n  //input as a string..\n  if (typeof input !== 'string') {\n    return s\n  }\n  //little cleanup..\n  input = normalize(input)\n  //try some known-words, like 'now'\n  if (namedDates.hasOwnProperty(input) === true) {\n    s = namedDates[input](s)\n    return s\n  }\n  //try each text-parse template, use the first good result\n  return parseString(s, input)\n}\nexport default parseInput\n"]},"metadata":{},"sourceType":"module"}