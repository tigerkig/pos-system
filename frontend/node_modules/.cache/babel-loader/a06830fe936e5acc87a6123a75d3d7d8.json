{"ast":null,"code":"import _defineProperty from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\"],\n    _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rowModesModel = _React$useState2[0],\n      setRowModesModel = _React$useState2[1];\n\n  var prevRowModesModel = React.useRef({});\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var processRowUpdate = props.processRowUpdate,\n      onProcessRowUpdateError = props.onProcessRowUpdateError,\n      rowModesModelProp = props.rowModesModel,\n      onRowModesModelChange = props.onRowModesModelChange,\n      signature = props.signature;\n\n  var runIfEditModeIsRow = function runIfEditModeIsRow(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, mode) {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    var rowParams = apiRef.current.getRowParams(params.id);\n\n    var newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(function () {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridRowModes.Edit) {\n      var reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        var columnFields = gridColumnFieldsSelector(apiRef).filter(function (field) {\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          reason: reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        _reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (_reason) {\n        var _rowParams = apiRef.current.getRowParams(params.id);\n\n        var _newParams = _extends({}, _rowParams, {\n          field: params.field,\n          reason: _reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        reason = params.reason;\n    var startRowEditModeParams = {\n      id: id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params) {\n    var id = params.id,\n        reason = params.reason,\n        field = params.field;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    var ignoreModifications = reason === 'escapeKeyDown';\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(function (fieldProps) {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id: id,\n      ignoreModifications: ignoreModifications,\n      field: field,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var updateRowModesModel = React.useCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      var details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  }, [apiRef, onRowModesModelChange, props.rowModesModel, signature]);\n  var updateRowInRowModesModel = React.useCallback(function (id, newProps) {\n    var newModel = _extends({}, rowModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [rowModesModel, updateRowModesModel]);\n  var updateOrDeleteRowState = React.useCallback(function (id, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStartRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        fieldToFocus = params.fieldToFocus,\n        deleteValue = params.deleteValue;\n    var columnFields = gridColumnFieldsSelector(apiRef);\n    var newProps = columnFields.reduce(function (acc, field) {\n      var cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      var shouldDeleteValue = deleteValue && fieldToFocus === field;\n      acc[field] = {\n        value: shouldDeleteValue ? '' : apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, updateOrDeleteRowState]);\n  var stopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        ignoreModifications = params.ignoreModifications,\n        focusedField = params.field,\n        _params$cellToFocusAf = params.cellToFocusAfter,\n        cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    var finishRowEditMode = function finishRowEditMode() {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var isSomeFieldProcessingProps = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.isProcessingProps;\n    });\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    var hasSomeFieldWithError = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.error;\n    });\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    var rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      var handleError = function handleError(errorThrown) {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, updateOrDeleteRowState, updateRowInRowModesModel]);\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        value = params.value;\n    throwIfNotEditable(id, field);\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n    var parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    var newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(function (resolve) {\n      var promises = [];\n\n      if (column.preProcessEditCellProps) {\n        var hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        var _editingState$id = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        var promise = Promise.resolve(column.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: newProps,\n          hasChanged: hasChanged,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            thisField = _ref2[0],\n            fieldProps = _ref2[1];\n\n        if (thisField === field) {\n          return;\n        }\n\n        var fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        var _editingState$id2 = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        var promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(function () {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromRowEditing = React.useCallback(function (id) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n\n    var rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          field = _ref4[0],\n          fieldProps = _ref4[1];\n\n      var column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  var editingApi = {\n    getRowMode: getRowMode,\n    startRowEditMode: startRowEditMode,\n    stopRowEditMode: stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(function () {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    var copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = rowModesModel;\n    Object.entries(rowModesModel).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          id = _ref6[0],\n          params = _ref6[1];\n\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      var prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsIdToIdLookupSelector","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","useState","rowModesModel","setRowModesModel","prevRowModesModel","useRef","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","signature","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","shouldDeleteValue","value","getCellValue","error","setCellFocus","updateStateToStopRowEditMode","focusedField","finishRowEditMode","unstable_moveFocusToRelativeCell","row","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","valueSetter","editingApi","unstable_setRowEditingEditCellValue","idToIdLookup","copyOfPrevRowModesModel","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"mappings":"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","sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  }, [apiRef, onRowModesModelChange, props.rowModesModel, signature]);\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [rowModesModel, updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      const shouldDeleteValue = deleteValue && fieldToFocus === field;\n      acc[field] = {\n        value: shouldDeleteValue ? '' : apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, updateOrDeleteRowState, updateRowInRowModesModel]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = rowModesModel;\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"]},"metadata":{},"sourceType":"module"}