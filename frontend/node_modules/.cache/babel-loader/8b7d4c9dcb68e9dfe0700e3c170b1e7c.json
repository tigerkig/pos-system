{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport var useGridColumnSpanning = function useGridColumnSpanning(apiRef) {\n  var lookup = React.useRef({});\n  var setCellColSpanInfo = React.useCallback(function (rowId, columnIndex, cellColSpanInfo) {\n    var sizes = lookup.current;\n\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  var getCellColSpanInfo = React.useCallback(function (rowId, columnIndex) {\n    var _lookup$current$rowId;\n\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  var calculateCellColSpan = React.useCallback(function (params) {\n    var columnIndex = params.columnIndex,\n        rowId = params.rowId,\n        minFirstColumnIndex = params.minFirstColumnIndex,\n        maxLastColumnIndex = params.maxLastColumnIndex;\n    var visibleColumns = apiRef.current.getVisibleColumns();\n    var columnsLength = visibleColumns.length;\n    var column = visibleColumns[columnIndex];\n    var colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n\n    var width = column.computedWidth;\n\n    for (var j = 1; j < colSpan; j += 1) {\n      var nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        var nextColumn = visibleColumns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: colSpan,\n          width: width\n        }\n      });\n    }\n\n    return {\n      colSpan: colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  var calculateColSpan = React.useCallback(function (_ref) {\n    var rowId = _ref.rowId,\n        minFirstColumn = _ref.minFirstColumn,\n        maxLastColumn = _ref.maxLastColumn;\n\n    for (var i = minFirstColumn; i < maxLastColumn; i += 1) {\n      var cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId: rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  var columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  var handleColumnReorderChange = React.useCallback(function () {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js"],"names":["React","useGridApiMethod","useGridApiEventHandler","useGridColumnSpanning","apiRef","lookup","useRef","setCellColSpanInfo","useCallback","rowId","columnIndex","cellColSpanInfo","sizes","current","getCellColSpanInfo","_lookup$current$rowId","calculateCellColSpan","params","minFirstColumnIndex","maxLastColumnIndex","visibleColumns","getVisibleColumns","columnsLength","length","column","colSpan","getCellParams","field","spannedByColSpan","cellProps","width","computedWidth","j","nextColumnIndex","nextColumn","rightVisibleCellIndex","Math","min","leftVisibleCellIndex","calculateColSpan","minFirstColumn","maxLastColumn","i","columnSpanningApi","unstable_getCellColSpanInfo","unstable_calculateColSpan","handleColumnReorderChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const setCellColSpanInfo = React.useCallback((rowId, columnIndex, cellColSpanInfo) => {\n    const sizes = lookup.current;\n\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  const getCellColSpanInfo = React.useCallback((rowId, columnIndex) => {\n    var _lookup$current$rowId;\n\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  const calculateCellColSpan = React.useCallback(params => {\n    const {\n      columnIndex,\n      rowId,\n      minFirstColumnIndex,\n      maxLastColumnIndex\n    } = params;\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const columnsLength = visibleColumns.length;\n    const column = visibleColumns[columnIndex];\n    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n\n    let width = column.computedWidth;\n\n    for (let j = 1; j < colSpan; j += 1) {\n      const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        const nextColumn = visibleColumns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan,\n          width\n        }\n      });\n    }\n\n    return {\n      colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  const columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};"]},"metadata":{},"sourceType":"module"}