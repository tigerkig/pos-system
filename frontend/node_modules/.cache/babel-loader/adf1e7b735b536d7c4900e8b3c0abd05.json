{"ast":null,"code":"//find the implicit iana code for this machine.\n//safely query the Intl object\n//based on - https://bitbucket.org/pellepim/jstimezonedetect/src\nconst fallbackTZ = 'utc'; //\n//this Intl object is not supported often, yet\n\nconst safeIntl = () => {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return null;\n  }\n\n  let format = Intl.DateTimeFormat();\n\n  if (typeof format === 'undefined' || typeof format.resolvedOptions === 'undefined') {\n    return null;\n  }\n\n  let timezone = format.resolvedOptions().timeZone;\n\n  if (!timezone) {\n    return null;\n  }\n\n  return timezone.toLowerCase();\n};\n\nconst guessTz = () => {\n  let timezone = safeIntl();\n\n  if (timezone === null) {\n    return fallbackTZ;\n  }\n\n  return timezone;\n}; //do it once per computer\n\n\nexport default guessTz;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/timezone/guessTz.js"],"names":["fallbackTZ","safeIntl","Intl","DateTimeFormat","format","resolvedOptions","timezone","timeZone","toLowerCase","guessTz"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,KAAnB,C,CAAyB;AAEzB;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+B,OAAOA,IAAI,CAACC,cAAZ,KAA+B,WAAlE,EAA+E;AAC7E,WAAO,IAAP;AACD;;AACD,MAAIC,MAAM,GAAGF,IAAI,CAACC,cAAL,EAAb;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,eAAd,KAAkC,WAAvE,EAAoF;AAClF,WAAO,IAAP;AACD;;AACD,MAAIC,QAAQ,GAAGF,MAAM,CAACC,eAAP,GAAyBE,QAAxC;;AACA,MAAI,CAACD,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AACD,SAAOA,QAAQ,CAACE,WAAT,EAAP;AACD,CAbD;;AAeA,MAAMC,OAAO,GAAG,MAAM;AACpB,MAAIH,QAAQ,GAAGL,QAAQ,EAAvB;;AACA,MAAIK,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAON,UAAP;AACD;;AACD,SAAOM,QAAP;AACD,CAND,C,CAOA;;;AACA,eAAeG,OAAf","sourcesContent":["//find the implicit iana code for this machine.\n//safely query the Intl object\n//based on - https://bitbucket.org/pellepim/jstimezonedetect/src\nconst fallbackTZ = 'utc' //\n\n//this Intl object is not supported often, yet\nconst safeIntl = () => {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return null\n  }\n  let format = Intl.DateTimeFormat()\n  if (typeof format === 'undefined' || typeof format.resolvedOptions === 'undefined') {\n    return null\n  }\n  let timezone = format.resolvedOptions().timeZone\n  if (!timezone) {\n    return null\n  }\n  return timezone.toLowerCase()\n}\n\nconst guessTz = () => {\n  let timezone = safeIntl()\n  if (timezone === null) {\n    return fallbackTZ\n  }\n  return timezone\n}\n//do it once per computer\nexport default guessTz\n"]},"metadata":{},"sourceType":"module"}