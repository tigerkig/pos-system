{"ast":null,"code":"import _slicedToArray from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"quickFilterParser\", \"quickFilterFormatter\", \"debounceMs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { styled } from '@mui/material/styles';\nimport { debounce } from '@mui/material/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridQuickFilterValuesSelector } from '../../hooks/features/filter';\nimport { isDeepEqual } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar GridToolbarQuickFilterRoot = styled(TextField, {\n  name: 'MuiDataGrid',\n  slot: 'ToolbarQuickFilter',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.toolbarQuickFilter;\n  }\n})(function (_ref) {\n  var _ref2;\n\n  var theme = _ref.theme;\n  return _ref2 = {\n    width: 'auto',\n    paddingBottom: theme.spacing(0.5),\n    '& input': {\n      marginLeft: theme.spacing(0.5)\n    },\n    '& .MuiInput-underline:before': {\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, _defineProperty(_ref2, \"& input[type=search]::-ms-clear,\\n& input[type=search]::-ms-reveal\", {\n    /* clears the 'X' icon from IE */\n    display: 'none',\n    width: 0,\n    height: 0\n  }), _defineProperty(_ref2, \"& input[type=\\\"search\\\"]::-webkit-search-decoration,\\n  & input[type=\\\"search\\\"]::-webkit-search-cancel-button,\\n  & input[type=\\\"search\\\"]::-webkit-search-results-button,\\n  & input[type=\\\"search\\\"]::-webkit-search-results-decoration\", {\n    /* clears the 'X' icon from Chrome */\n    display: 'none'\n  }), _ref2;\n});\n\nvar defaultSearchValueParser = function defaultSearchValueParser(searchText) {\n  return searchText.split(' ').filter(function (word) {\n    return word !== '';\n  });\n};\n\nvar defaultSearchValueFormatter = function defaultSearchValueFormatter(values) {\n  return values.join(' ');\n};\n\nfunction GridToolbarQuickFilter(props) {\n  var _rootProps$components;\n\n  var _props$quickFilterPar = props.quickFilterParser,\n      quickFilterParser = _props$quickFilterPar === void 0 ? defaultSearchValueParser : _props$quickFilterPar,\n      _props$quickFilterFor = props.quickFilterFormatter,\n      quickFilterFormatter = _props$quickFilterFor === void 0 ? defaultSearchValueFormatter : _props$quickFilterFor,\n      _props$debounceMs = props.debounceMs,\n      debounceMs = _props$debounceMs === void 0 ? 500 : _props$debounceMs,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);\n\n  var _React$useState = React.useState(function () {\n    return quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchValue = _React$useState2[0],\n      setSearchValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(quickFilterValues),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevQuickFilterValues = _React$useState4[0],\n      setPrevQuickFilterValues = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (!isDeepEqual(prevQuickFilterValues, quickFilterValues)) {\n      // The model of quick filter value has been updated\n      setPrevQuickFilterValues(quickFilterValues); // Update the input value if needed to match the new model\n\n      setSearchValue(function (prevSearchValue) {\n        return isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []);\n      });\n    }\n  }, [prevQuickFilterValues, quickFilterValues, quickFilterFormatter, quickFilterParser]);\n  var updateSearchValue = React.useCallback(function (newSearchValue) {\n    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));\n  }, [apiRef, quickFilterParser]);\n  var debouncedUpdateSearchValue = React.useMemo(function () {\n    return debounce(updateSearchValue, debounceMs);\n  }, [updateSearchValue, debounceMs]);\n  var handleSearchValueChange = React.useCallback(function (event) {\n    var newSearchValue = event.target.value;\n    setSearchValue(newSearchValue);\n    debouncedUpdateSearchValue(newSearchValue);\n  }, [debouncedUpdateSearchValue]);\n  var handleSearchReset = React.useCallback(function () {\n    setSearchValue('');\n    updateSearchValue('');\n  }, [updateSearchValue]);\n  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({\n    as: rootProps.components.BaseTextField,\n    variant: \"standard\",\n    value: searchValue,\n    onChange: handleSearchValueChange,\n    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),\n    \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),\n    type: \"search\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/_jsx(rootProps.components.QuickFilterIcon, {\n        fontSize: \"small\"\n      }),\n      endAdornment: /*#__PURE__*/_jsx(IconButton, {\n        \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterDeleteIconLabel'),\n        size: \"small\",\n        sx: {\n          visibility: searchValue ? 'visible' : 'hidden'\n        },\n        onClick: handleSearchReset,\n        children: /*#__PURE__*/_jsx(rootProps.components.QuickFilterClearIcon, {\n          fontSize: \"small\"\n        })\n      })\n    }\n  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarQuickFilter.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The debounce time in milliseconds.\n   * @default 500\n   */\n  debounceMs: PropTypes.number,\n\n  /**\n   * Function responsible for formatting values of quick filter in a string when the model is modified\n   * @param {any[]} values The new values passed to the quick filter model\n   * @returns {string} The string to display in the text field\n   */\n  quickFilterFormatter: PropTypes.func,\n\n  /**\n   * Function responsible for parsing text input in an array of independent values for quick filtering.\n   * @param {string} input The value entered by the user\n   * @returns {any[]} The array of value on which quick filter is applied\n   */\n  quickFilterParser: PropTypes.func\n} : void 0;\nexport { GridToolbarQuickFilter };","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","TextField","IconButton","styled","debounce","useGridApiContext","useGridRootProps","useGridSelector","gridQuickFilterValuesSelector","isDeepEqual","jsx","_jsx","GridToolbarQuickFilterRoot","name","slot","overridesResolver","props","styles","toolbarQuickFilter","theme","width","paddingBottom","spacing","marginLeft","borderBottom","palette","divider","display","height","defaultSearchValueParser","searchText","split","filter","word","defaultSearchValueFormatter","values","join","GridToolbarQuickFilter","_rootProps$components","quickFilterParser","quickFilterFormatter","debounceMs","other","apiRef","rootProps","quickFilterValues","useState","searchValue","setSearchValue","prevQuickFilterValues","setPrevQuickFilterValues","useEffect","prevSearchValue","updateSearchValue","useCallback","newSearchValue","current","setQuickFilterValues","debouncedUpdateSearchValue","useMemo","handleSearchValueChange","event","target","value","handleSearchReset","as","components","BaseTextField","variant","onChange","placeholder","getLocaleText","type","InputProps","startAdornment","QuickFilterIcon","fontSize","endAdornment","size","sx","visibility","onClick","children","QuickFilterClearIcon","componentsProps","baseTextField","process","env","NODE_ENV","propTypes","number","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"quickFilterParser\", \"quickFilterFormatter\", \"debounceMs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { styled } from '@mui/material/styles';\nimport { debounce } from '@mui/material/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridQuickFilterValuesSelector } from '../../hooks/features/filter';\nimport { isDeepEqual } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridToolbarQuickFilterRoot = styled(TextField, {\n  name: 'MuiDataGrid',\n  slot: 'ToolbarQuickFilter',\n  overridesResolver: (props, styles) => styles.toolbarQuickFilter\n})(({\n  theme\n}) => ({\n  width: 'auto',\n  paddingBottom: theme.spacing(0.5),\n  '& input': {\n    marginLeft: theme.spacing(0.5)\n  },\n  '& .MuiInput-underline:before': {\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  [`& input[type=search]::-ms-clear,\n& input[type=search]::-ms-reveal`]: {\n    /* clears the 'X' icon from IE */\n    display: 'none',\n    width: 0,\n    height: 0\n  },\n  [`& input[type=\"search\"]::-webkit-search-decoration,\n  & input[type=\"search\"]::-webkit-search-cancel-button,\n  & input[type=\"search\"]::-webkit-search-results-button,\n  & input[type=\"search\"]::-webkit-search-results-decoration`]: {\n    /* clears the 'X' icon from Chrome */\n    display: 'none'\n  }\n}));\n\nconst defaultSearchValueParser = searchText => searchText.split(' ').filter(word => word !== '');\n\nconst defaultSearchValueFormatter = values => values.join(' ');\n\nfunction GridToolbarQuickFilter(props) {\n  var _rootProps$components;\n\n  const {\n    quickFilterParser = defaultSearchValueParser,\n    quickFilterFormatter = defaultSearchValueFormatter,\n    debounceMs = 500\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);\n  const [searchValue, setSearchValue] = React.useState(() => quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n  const [prevQuickFilterValues, setPrevQuickFilterValues] = React.useState(quickFilterValues);\n  React.useEffect(() => {\n    if (!isDeepEqual(prevQuickFilterValues, quickFilterValues)) {\n      // The model of quick filter value has been updated\n      setPrevQuickFilterValues(quickFilterValues); // Update the input value if needed to match the new model\n\n      setSearchValue(prevSearchValue => isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n    }\n  }, [prevQuickFilterValues, quickFilterValues, quickFilterFormatter, quickFilterParser]);\n  const updateSearchValue = React.useCallback(newSearchValue => {\n    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));\n  }, [apiRef, quickFilterParser]);\n  const debouncedUpdateSearchValue = React.useMemo(() => debounce(updateSearchValue, debounceMs), [updateSearchValue, debounceMs]);\n  const handleSearchValueChange = React.useCallback(event => {\n    const newSearchValue = event.target.value;\n    setSearchValue(newSearchValue);\n    debouncedUpdateSearchValue(newSearchValue);\n  }, [debouncedUpdateSearchValue]);\n  const handleSearchReset = React.useCallback(() => {\n    setSearchValue('');\n    updateSearchValue('');\n  }, [updateSearchValue]);\n  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({\n    as: rootProps.components.BaseTextField,\n    variant: \"standard\",\n    value: searchValue,\n    onChange: handleSearchValueChange,\n    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),\n    \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),\n    type: \"search\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/_jsx(rootProps.components.QuickFilterIcon, {\n        fontSize: \"small\"\n      }),\n      endAdornment: /*#__PURE__*/_jsx(IconButton, {\n        \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterDeleteIconLabel'),\n        size: \"small\",\n        sx: {\n          visibility: searchValue ? 'visible' : 'hidden'\n        },\n        onClick: handleSearchReset,\n        children: /*#__PURE__*/_jsx(rootProps.components.QuickFilterClearIcon, {\n          fontSize: \"small\"\n        })\n      })\n    }\n  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarQuickFilter.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The debounce time in milliseconds.\n   * @default 500\n   */\n  debounceMs: PropTypes.number,\n\n  /**\n   * Function responsible for formatting values of quick filter in a string when the model is modified\n   * @param {any[]} values The new values passed to the quick filter model\n   * @returns {string} The string to display in the text field\n   */\n  quickFilterFormatter: PropTypes.func,\n\n  /**\n   * Function responsible for parsing text input in an array of independent values for quick filtering.\n   * @param {string} input The value entered by the user\n   * @returns {any[]} The array of value on which quick filter is applied\n   */\n  quickFilterParser: PropTypes.func\n} : void 0;\nexport { GridToolbarQuickFilter };"]},"metadata":{},"sourceType":"module"}