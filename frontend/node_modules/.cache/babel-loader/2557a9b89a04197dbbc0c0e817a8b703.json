{"ast":null,"code":"import { zeroPad as pad } from '../../fns.js';\nimport { formatTimezone } from '../../fns.js'; //parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n//time-symbols we support\n\nconst mapping = {\n  G: s => s.era(),\n  GG: s => s.era(),\n  GGG: s => s.era(),\n  GGGG: s => s.era() === 'AD' ? 'Anno Domini' : 'Before Christ',\n  //year\n  y: s => s.year(),\n  yy: s => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)));\n  },\n  yyy: s => s.year(),\n  yyyy: s => s.year(),\n  yyyyy: s => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n  //quarter\n  Q: s => s.quarter(),\n  QQ: s => s.quarter(),\n  QQQ: s => s.quarter(),\n  QQQQ: s => s.quarter(),\n  //month\n  M: s => s.month() + 1,\n  MM: s => pad(s.month() + 1),\n  MMM: s => s.format('month-short'),\n  MMMM: s => s.format('month'),\n  //week\n  w: s => s.week(),\n  ww: s => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n  //date of month\n  d: s => s.date(),\n  dd: s => pad(s.date()),\n  //date of year\n  D: s => s.dayOfYear(),\n  DD: s => pad(s.dayOfYear()),\n  DDD: s => pad(s.dayOfYear(), 3),\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n  //day\n  E: s => s.format('day-short'),\n  EE: s => s.format('day-short'),\n  EEE: s => s.format('day-short'),\n  EEEE: s => s.format('day'),\n  EEEEE: s => s.format('day')[0],\n  e: s => s.day(),\n  ee: s => s.day(),\n  eee: s => s.format('day-short'),\n  eeee: s => s.format('day'),\n  eeeee: s => s.format('day')[0],\n  //am/pm\n  a: s => s.ampm().toUpperCase(),\n  aa: s => s.ampm().toUpperCase(),\n  aaa: s => s.ampm().toUpperCase(),\n  aaaa: s => s.ampm().toUpperCase(),\n  //hour\n  h: s => s.h12(),\n  hh: s => pad(s.h12()),\n  H: s => s.hour(),\n  HH: s => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n  m: s => s.minute(),\n  mm: s => pad(s.minute()),\n  s: s => s.second(),\n  ss: s => pad(s.second()),\n  //milliseconds\n  SSS: s => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: s => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: s => s.timezone().name,\n  zz: s => s.timezone().name,\n  zzz: s => s.timezone().name,\n  zzzz: s => s.timezone().name,\n  Z: s => formatTimezone(s.timezone().current.offset),\n  ZZ: s => formatTimezone(s.timezone().current.offset),\n  ZZZ: s => formatTimezone(s.timezone().current.offset),\n  ZZZZ: s => formatTimezone(s.timezone().current.offset, ':')\n};\n\nconst addAlias = (char, to, n) => {\n  let name = char;\n  let toName = to;\n\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName];\n    name += char;\n    toName += to;\n  }\n};\n\naddAlias('q', 'Q', 4);\naddAlias('L', 'M', 4);\naddAlias('Y', 'y', 4);\naddAlias('c', 'e', 4);\naddAlias('k', 'H', 2);\naddAlias('K', 'h', 2);\naddAlias('S', 's', 2);\naddAlias('v', 'z', 4);\naddAlias('V', 'Z', 4); // support unix-style escaping with ' character\n\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o];\n        }\n\n        if (arr[o] === `'`) {\n          arr[o] = null;\n          break;\n        }\n\n        arr[o] = null;\n      }\n    }\n  }\n\n  return arr.filter(ch => ch);\n}; //combine consecutive chars, like 'yyyy' as one.\n\n\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]; // greedy-forward\n\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o];\n        arr[o] = null;\n      } else {\n        break;\n      }\n    }\n  } // '' means one apostrophe\n\n\n  arr = arr.filter(ch => ch);\n  arr = arr.map(str => {\n    if (str === `''`) {\n      str = `'`;\n    }\n\n    return str;\n  });\n  return arr;\n};\n\nconst unixFmt = (s, str) => {\n  let arr = str.split(''); // support character escaping\n\n  arr = escapeChars(arr); //combine 'yyyy' as string.\n\n  arr = combineRepeated(arr);\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || '';\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '');\n      }\n\n      txt += c;\n    }\n\n    return txt;\n  }, '');\n};\n\nexport default unixFmt;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/format/unixFmt.js"],"names":["zeroPad","pad","formatTimezone","mapping","G","s","era","GG","GGG","GGGG","y","year","yy","Number","String","substr","yyy","yyyy","yyyyy","Q","quarter","QQ","QQQ","QQQQ","M","month","MM","MMM","format","MMMM","w","week","ww","d","date","dd","D","dayOfYear","DD","DDD","E","EE","EEE","EEEE","EEEEE","e","day","ee","eee","eeee","eeeee","a","ampm","toUpperCase","aa","aaa","aaaa","h","h12","hh","H","hour","HH","m","minute","mm","second","ss","SSS","millisecond","A","epoch","startOf","z","timezone","name","zz","zzz","zzzz","Z","current","offset","ZZ","ZZZ","ZZZZ","addAlias","char","to","n","toName","i","escapeChars","arr","length","o","filter","ch","combineRepeated","c","map","str","unixFmt","split","reduce","txt","undefined","test","replace"],"mappings":"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","sourcesContent":["import { zeroPad as pad } from '../../fns.js'\nimport { formatTimezone } from '../../fns.js'\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: (s) => s.era(),\n  GG: (s) => s.era(),\n  GGG: (s) => s.era(),\n  GGGG: (s) => (s.era() === 'AD' ? 'Anno Domini' : 'Before Christ'),\n  //year\n  y: (s) => s.year(),\n  yy: (s) => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)))\n  },\n  yyy: (s) => s.year(),\n  yyyy: (s) => s.year(),\n  yyyyy: (s) => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: (s) => s.quarter(),\n  QQ: (s) => s.quarter(),\n  QQQ: (s) => s.quarter(),\n  QQQQ: (s) => s.quarter(),\n\n  //month\n  M: (s) => s.month() + 1,\n  MM: (s) => pad(s.month() + 1),\n  MMM: (s) => s.format('month-short'),\n  MMMM: (s) => s.format('month'),\n\n  //week\n  w: (s) => s.week(),\n  ww: (s) => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: (s) => s.date(),\n  dd: (s) => pad(s.date()),\n  //date of year\n  D: (s) => s.dayOfYear(),\n  DD: (s) => pad(s.dayOfYear()),\n  DDD: (s) => pad(s.dayOfYear(), 3),\n\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: (s) => s.format('day-short'),\n  EE: (s) => s.format('day-short'),\n  EEE: (s) => s.format('day-short'),\n  EEEE: (s) => s.format('day'),\n  EEEEE: (s) => s.format('day')[0],\n  e: (s) => s.day(),\n  ee: (s) => s.day(),\n  eee: (s) => s.format('day-short'),\n  eeee: (s) => s.format('day'),\n  eeeee: (s) => s.format('day')[0],\n\n  //am/pm\n  a: (s) => s.ampm().toUpperCase(),\n  aa: (s) => s.ampm().toUpperCase(),\n  aaa: (s) => s.ampm().toUpperCase(),\n  aaaa: (s) => s.ampm().toUpperCase(),\n\n  //hour\n  h: (s) => s.h12(),\n  hh: (s) => pad(s.h12()),\n  H: (s) => s.hour(),\n  HH: (s) => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: (s) => s.minute(),\n  mm: (s) => pad(s.minute()),\n  s: (s) => s.second(),\n  ss: (s) => pad(s.second()),\n\n  //milliseconds\n  SSS: (s) => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: (s) => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: (s) => s.timezone().name,\n  zz: (s) => s.timezone().name,\n  zzz: (s) => s.timezone().name,\n  zzzz: (s) => s.timezone().name,\n  Z: (s) => formatTimezone(s.timezone().current.offset),\n  ZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZZ: (s) => formatTimezone(s.timezone().current.offset, ':')\n}\n\nconst addAlias = (char, to, n) => {\n  let name = char\n  let toName = to\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName]\n    name += char\n    toName += to\n  }\n}\naddAlias('q', 'Q', 4)\naddAlias('L', 'M', 4)\naddAlias('Y', 'y', 4)\naddAlias('c', 'e', 4)\naddAlias('k', 'H', 2)\naddAlias('K', 'h', 2)\naddAlias('S', 's', 2)\naddAlias('v', 'z', 4)\naddAlias('V', 'Z', 4)\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o]\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null\n          break\n        }\n        arr[o] = null\n      }\n    }\n  }\n  return arr.filter((ch) => ch)\n}\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o]\n        arr[o] = null\n      } else {\n        break\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter((ch) => ch)\n  arr = arr.map((str) => {\n    if (str === `''`) {\n      str = `'`\n    }\n    return str\n  })\n  return arr\n}\n\nconst unixFmt = (s, str) => {\n  let arr = str.split('')\n  // support character escaping\n  arr = escapeChars(arr)\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr)\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || ''\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '')\n      }\n      txt += c\n    }\n    return txt\n  }, '')\n}\nexport default unixFmt\n"]},"metadata":{},"sourceType":"module"}