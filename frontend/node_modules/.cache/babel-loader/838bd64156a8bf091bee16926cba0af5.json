{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PaperProps\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps, timePickerValueManager } from '../TimePicker/shared';\nimport { TimePickerToolbar } from '../TimePicker/TimePickerToolbar';\nimport { DesktopWrapper } from '../internals/components/wrappers/DesktopWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useTimeValidation } from '../internals/hooks/validation/useTimeValidation';\nimport { KeyboardDateInput } from '../internals/components/KeyboardDateInput';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)\n */\n\nexport const DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, timePickerValueManager);\n\n  const {\n    PaperProps,\n    PopperProps,\n    ToolbarComponent = TimePickerToolbar,\n    TransitionComponent,\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    components,\n    componentsProps,\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    PaperProps: PaperProps,\n    TransitionComponent: TransitionComponent,\n    components: components,\n    componentsProps: componentsProps,\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @template TDate\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useTimePickerDefaultizedProps","timePickerValueManager","TimePickerToolbar","DesktopWrapper","CalendarOrClockPicker","useTimeValidation","KeyboardDateInput","usePickerState","jsx","_jsx","DesktopTimePicker","forwardRef","inProps","ref","props","validationError","pickerProps","inputProps","wrapperProps","PaperProps","PopperProps","ToolbarComponent","TransitionComponent","components","componentsProps","other","DateInputProps","KeyboardDateInputComponent","children","autoFocus","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","ampm","bool","ampmInClock","node","className","string","closeOnSelect","object","disabled","disableIgnoringDatePartForTimeValidation","disableMaskedInput","disableOpenPicker","getClockLabelText","func","getOpenDialogAriaText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","mask","maxTime","any","minTime","minutesStep","number","onAccept","onChange","isRequired","onClose","onError","onOpen","onViewChange","open","OpenPickerButtonProps","openTo","oneOf","orientation","readOnly","renderInput","rifmFormatter","shouldDisableTime","showToolbar","elementType","value","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PaperProps\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps, timePickerValueManager } from '../TimePicker/shared';\nimport { TimePickerToolbar } from '../TimePicker/TimePickerToolbar';\nimport { DesktopWrapper } from '../internals/components/wrappers/DesktopWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useTimeValidation } from '../internals/hooks/validation/useTimeValidation';\nimport { KeyboardDateInput } from '../internals/components/KeyboardDateInput';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)\n */\nexport const DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, timePickerValueManager);\n\n  const {\n    PaperProps,\n    PopperProps,\n    ToolbarComponent = TimePickerToolbar,\n    TransitionComponent,\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    components,\n    componentsProps,\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    PaperProps: PaperProps,\n    TransitionComponent: TransitionComponent,\n    components: components,\n    componentsProps: componentsProps,\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @template TDate\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}