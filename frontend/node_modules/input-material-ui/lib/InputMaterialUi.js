"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var React = require("react");
var InputField_1 = require("./InputField");
var RemoveValue_1 = require("./RemoveValue");
var SeeHidePassword_1 = require("./SeeHidePassword");
var InputMaterialUi = (function (_super) {
    __extends(InputMaterialUi, _super);
    function InputMaterialUi() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isPasswordVisible: false,
            value: undefined,
        };
        _this.handleChange = function (event) { return _this.handleChangeValue(event.target.value); };
        _this.handleRemoveValue = function () { return _this.handleChangeValue(''); };
        _this.handleChangeValue = function (value) {
            _this.setState({
                value: value,
            });
            _this.props.onChange(value);
        };
        _this.handleInputVisibility = function (isPasswordVisible) {
            return _this.setState({
                isPasswordVisible: isPasswordVisible,
            });
        };
        return _this;
    }
    InputMaterialUi.prototype.render = function () {
        var _a = this.props, FormHelperTextProps = _a.FormHelperTextProps, helperText = _a.helperText, id = _a.id, InputLabelProps = _a.InputLabelProps, InputProps = _a.InputProps, label = _a.label, placeholder = _a.placeholder, valueInProps = _a.value;
        var _b = this.state.value, valueInState = _b === void 0 ? '' : _b;
        var value = (0, lodash_1.isNil)(valueInProps) ? valueInState : valueInProps;
        return (React.createElement(InputField_1.default, { endAdornment: this.getEndAdornament(), helperText: helperText, helperTextProps: FormHelperTextProps, id: id, inputLabelProps: InputLabelProps, inputProps: InputProps, label: label, onChange: this.handleChange, placeholder: placeholder, startAdornment: this.getStartAdornament(), type: this.getType(), value: value }));
    };
    InputMaterialUi.prototype.componentDidMount = function () {
        var _a = this.props, defaultValue = _a.defaultValue, value = _a.value;
        if ((0, lodash_1.isNil)(this.state.value) && (0, lodash_1.isNil)(defaultValue) === false) {
            this.setState({
                value: defaultValue,
            });
            return;
        }
        if ((0, lodash_1.isNil)(value) === false && value !== this.state.value) {
            this.setState({
                value: this.props.value,
            });
        }
    };
    InputMaterialUi.prototype.getType = function () {
        var type = this.props.type;
        if ((0, lodash_1.isNil)(type)) {
            return 'text';
        }
        if (type !== 'password') {
            return type;
        }
        return this.state.isPasswordVisible ? 'text' : 'password';
    };
    InputMaterialUi.prototype.getStartAdornament = function () {
        if (this.props.type !== 'password') {
            return null;
        }
        var isPasswordVisible = this.state.isPasswordVisible;
        return React.createElement(SeeHidePassword_1.default, { isPasswordVisible: isPasswordVisible, onClick: this.handleInputVisibility });
    };
    InputMaterialUi.prototype.getEndAdornament = function () {
        if ((0, lodash_1.isEmpty)(this.state.value)) {
            return null;
        }
        return React.createElement(RemoveValue_1.default, { onClick: this.handleRemoveValue });
    };
    return InputMaterialUi;
}(React.PureComponent));
exports.default = InputMaterialUi;
//# sourceMappingURL=InputMaterialUi.js.map