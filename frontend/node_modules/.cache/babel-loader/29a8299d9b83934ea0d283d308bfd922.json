{"ast":null,"code":"import _slicedToArray from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useGridApiEventHandler } from '../hooks/utils/useGridApiEventHandler';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridDensityHeaderHeightSelector } from '../hooks/features/density/densitySelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CLIFF = 1;\nvar SLOP = 1.5;\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var scrollDirection = ownerState.scrollDirection,\n      classes = ownerState.classes;\n  var slots = {\n    root: ['scrollArea', \"scrollArea--\".concat(scrollDirection)]\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nvar GridScrollAreaRawRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ScrollArea',\n  overridesResolver: function overridesResolver(props, styles) {\n    return [_defineProperty({}, \"&.\".concat(gridClasses['scrollArea--left']), styles['scrollArea--left']), _defineProperty({}, \"&.\".concat(gridClasses['scrollArea--right']), styles['scrollArea--right']), styles.scrollArea];\n  }\n})(function () {\n  var _ref3;\n\n  return _ref3 = {\n    position: 'absolute',\n    top: 0,\n    zIndex: 101,\n    width: 20,\n    bottom: 0\n  }, _defineProperty(_ref3, \"&.\".concat(gridClasses['scrollArea--left']), {\n    left: 0\n  }), _defineProperty(_ref3, \"&.\".concat(gridClasses['scrollArea--right']), {\n    right: 0\n  }), _ref3;\n});\n\nfunction GridScrollAreaRaw(props) {\n  var scrollDirection = props.scrollDirection;\n  var rootRef = React.useRef(null);\n  var apiRef = useGridApiContext();\n  var timeout = React.useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragging = _React$useState2[0],\n      setDragging = _React$useState2[1];\n\n  var height = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  var scrollPosition = React.useRef({\n    left: 0,\n    top: 0\n  });\n  var rootProps = useGridRootProps();\n\n  var ownerState = _extends({}, props, {\n    classes: rootProps.classes\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var handleScrolling = React.useCallback(function (newScrollPosition) {\n    scrollPosition.current = newScrollPosition;\n  }, []);\n  var handleDragOver = React.useCallback(function (event) {\n    var offset;\n\n    if (scrollDirection === 'left') {\n      offset = event.clientX - rootRef.current.getBoundingClientRect().right;\n    } else if (scrollDirection === 'right') {\n      offset = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);\n    } else {\n      throw new Error('MUI: Wrong drag direction');\n    }\n\n    offset = (offset - CLIFF) * SLOP + CLIFF;\n    clearTimeout(timeout.current); // Avoid freeze and inertia.\n\n    timeout.current = setTimeout(function () {\n      apiRef.current.scroll({\n        left: scrollPosition.current.left + offset,\n        top: scrollPosition.current.top\n      });\n    });\n  }, [scrollDirection, apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(timeout.current);\n    };\n  }, []);\n  var toggleDragging = React.useCallback(function () {\n    setDragging(function (prevDragging) {\n      return !prevDragging;\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScrolling);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', toggleDragging);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', toggleDragging);\n  return dragging ? /*#__PURE__*/_jsx(GridScrollAreaRawRoot, {\n    ref: rootRef,\n    className: clsx(classes.root),\n    onDragOver: handleDragOver,\n    style: {\n      height: height\n    }\n  }) : null;\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridScrollAreaRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  scrollDirection: PropTypes.oneOf(['left', 'right']).isRequired\n} : void 0;\nvar GridScrollArea = /*#__PURE__*/React.memo(GridScrollAreaRaw);\nexport { GridScrollArea };","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/components/GridScrollArea.js"],"names":["_extends","React","PropTypes","clsx","unstable_composeClasses","composeClasses","styled","useGridApiEventHandler","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridDensityHeaderHeightSelector","useGridSelector","jsx","_jsx","CLIFF","SLOP","useUtilityClasses","ownerState","scrollDirection","classes","slots","root","GridScrollAreaRawRoot","name","slot","overridesResolver","props","styles","scrollArea","position","top","zIndex","width","bottom","left","right","GridScrollAreaRaw","rootRef","useRef","apiRef","timeout","useState","dragging","setDragging","height","scrollPosition","rootProps","handleScrolling","useCallback","newScrollPosition","current","handleDragOver","event","offset","clientX","getBoundingClientRect","Math","max","Error","clearTimeout","setTimeout","scroll","useEffect","toggleDragging","prevDragging","ref","className","onDragOver","style","process","env","NODE_ENV","propTypes","oneOf","isRequired","GridScrollArea","memo"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useGridApiEventHandler } from '../hooks/utils/useGridApiEventHandler';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridDensityHeaderHeightSelector } from '../hooks/features/density/densitySelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CLIFF = 1;\nconst SLOP = 1.5;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    scrollDirection,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['scrollArea', `scrollArea--${scrollDirection}`]\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridScrollAreaRawRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ScrollArea',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['scrollArea--left']}`]: styles['scrollArea--left']\n  }, {\n    [`&.${gridClasses['scrollArea--right']}`]: styles['scrollArea--right']\n  }, styles.scrollArea]\n})(() => ({\n  position: 'absolute',\n  top: 0,\n  zIndex: 101,\n  width: 20,\n  bottom: 0,\n  [`&.${gridClasses['scrollArea--left']}`]: {\n    left: 0\n  },\n  [`&.${gridClasses['scrollArea--right']}`]: {\n    right: 0\n  }\n}));\n\nfunction GridScrollAreaRaw(props) {\n  const {\n    scrollDirection\n  } = props;\n  const rootRef = React.useRef(null);\n  const apiRef = useGridApiContext();\n  const timeout = React.useRef();\n  const [dragging, setDragging] = React.useState(false);\n  const height = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const scrollPosition = React.useRef({\n    left: 0,\n    top: 0\n  });\n  const rootProps = useGridRootProps();\n\n  const ownerState = _extends({}, props, {\n    classes: rootProps.classes\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const handleScrolling = React.useCallback(newScrollPosition => {\n    scrollPosition.current = newScrollPosition;\n  }, []);\n  const handleDragOver = React.useCallback(event => {\n    let offset;\n\n    if (scrollDirection === 'left') {\n      offset = event.clientX - rootRef.current.getBoundingClientRect().right;\n    } else if (scrollDirection === 'right') {\n      offset = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);\n    } else {\n      throw new Error('MUI: Wrong drag direction');\n    }\n\n    offset = (offset - CLIFF) * SLOP + CLIFF;\n    clearTimeout(timeout.current); // Avoid freeze and inertia.\n\n    timeout.current = setTimeout(() => {\n      apiRef.current.scroll({\n        left: scrollPosition.current.left + offset,\n        top: scrollPosition.current.top\n      });\n    });\n  }, [scrollDirection, apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeout.current);\n    };\n  }, []);\n  const toggleDragging = React.useCallback(() => {\n    setDragging(prevDragging => !prevDragging);\n  }, []);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScrolling);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', toggleDragging);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', toggleDragging);\n  return dragging ? /*#__PURE__*/_jsx(GridScrollAreaRawRoot, {\n    ref: rootRef,\n    className: clsx(classes.root),\n    onDragOver: handleDragOver,\n    style: {\n      height\n    }\n  }) : null;\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridScrollAreaRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  scrollDirection: PropTypes.oneOf(['left', 'right']).isRequired\n} : void 0;\nconst GridScrollArea = /*#__PURE__*/React.memo(GridScrollAreaRaw);\nexport { GridScrollArea };"]},"metadata":{},"sourceType":"module"}