{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector, gridPageSizeSelector } from './gridPaginationSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport var getPageCount = function getPageCount(rowCount, pageSize) {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nvar applyValidPage = function applyValidPage(paginationState) {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nvar mergeStateWithPage = function mergeStateWithPage(page) {\n  return function (state) {\n    return _extends({}, state, {\n      pagination: applyValidPage(_extends({}, state.pagination, {\n        page: page\n      }))\n    });\n  };\n};\n\nvar noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport var useGridPage = function useGridPage(apiRef, props) {\n  var _props$initialState2, _props$initialState2$;\n\n  var logger = useGridLogger(apiRef, 'useGridPage');\n  var visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: 'pageChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  var setPage = React.useCallback(function (page) {\n    logger.debug(\"Setting page to \".concat(page));\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  var pageApi = {\n    setPage: setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState) {\n    var _props$initialState, _props$initialState$p;\n\n    var pageToExport = gridPageSelector(apiRef);\n    var shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto, _context$stateToResto2; // We apply the constraint even if the page did not change in case the pageSize changed.\n\n\n    var page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  var handlePageSizeChange = function handlePageSizeChange(pageSize) {\n    apiRef.current.setState(function (state) {\n      var pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount: pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  var handlePageChange = function handlePageChange() {\n    return apiRef.current.scrollToIndexes({\n      rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)\n    });\n  };\n\n  useGridApiEventHandler(apiRef, 'pageSizeChange', handlePageSizeChange);\n  useGridApiEventHandler(apiRef, 'pageChange', handlePageChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(function () {\n    apiRef.current.setState(function (state) {\n      var rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      var pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      var page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page: page,\n          rowCount: rowCount,\n          pageCount: pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPage.js"],"names":["_extends","React","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","gridVisibleTopLevelRowCountSelector","gridPageSelector","gridPageSizeSelector","useGridRegisterPipeProcessor","buildWarning","getPageCount","rowCount","pageSize","Math","ceil","applyValidPage","paginationState","pageCount","page","max","min","mergeStateWithPage","state","pagination","noRowCountInServerMode","useGridPage","apiRef","props","_props$initialState2","_props$initialState2$","logger","visibleTopLevelRowCount","current","unstable_registerControlState","stateId","propModel","propOnChange","onPageChange","stateSelector","changeEvent","setPage","useCallback","debug","setState","forceUpdate","pageApi","stateExportPreProcessing","prevState","_props$initialState","_props$initialState$p","pageToExport","shouldExportPage","initialState","stateRestorePreProcessing","params","context","_context$stateToResto","_context$stateToResto2","stateToRestore","handlePageSizeChange","handlePageChange","scrollToIndexes","rowIndex","useEffect","process","env","NODE_ENV","paginationMode","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector, gridPageSizeSelector } from './gridPaginationSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: 'pageChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2;\n\n    // We apply the constraint even if the page did not change in case the pageSize changed.\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  const handlePageChange = () => apiRef.current.scrollToIndexes({\n    rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)\n  });\n\n  useGridApiEventHandler(apiRef, 'pageSizeChange', handlePageSizeChange);\n  useGridApiEventHandler(apiRef, 'pageChange', handlePageChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};"]},"metadata":{},"sourceType":"module"}