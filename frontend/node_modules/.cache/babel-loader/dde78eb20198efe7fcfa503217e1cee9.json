{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat, getMaskFromCurrentFormat } from '../utils/text-field-helper';\nexport const useMaskedInput = _ref => {\n  let {\n    acceptRegex = /[\\d]/gi,\n    disabled,\n    disableMaskedInput,\n    ignoreInvalidInputs,\n    inputFormat,\n    inputProps,\n    label,\n    mask,\n    onChange,\n    rawValue,\n    readOnly,\n    rifmFormatter,\n    TextFieldProps,\n    validationError\n  } = _ref;\n  const utils = useUtils();\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const {\n    shouldUseMaskedInput,\n    maskToUse\n  } = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (disableMaskedInput) {\n      return {\n        shouldUseMaskedInput: false,\n        maskToUse: ''\n      };\n    }\n\n    const computedMaskToUse = getMaskFromCurrentFormat(mask, inputFormat, acceptRegex, utils);\n    return {\n      shouldUseMaskedInput: checkMaskIsValidForCurrentFormat(computedMaskToUse, inputFormat, acceptRegex, utils),\n      maskToUse: computedMaskToUse\n    };\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && maskToUse ? maskedDateFormatter(maskToUse, acceptRegex) : st => st, [acceptRegex, maskToUse, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`\n\n  const parsedValue = rawValue === null ? null : utils.date(rawValue); // Track the value of the input\n\n  const [innerInputValue, setInnerInputValue] = React.useState(parsedValue); // control the input text\n\n  const [innerDisplayedInputValue, setInnerDisplayedInputValue] = React.useState(getDisplayDate(utils, rawValue, inputFormat));\n  const isAcceptedValue = rawValue === null || utils.isValid(parsedValue);\n\n  if (isAcceptedValue && !utils.isEqual(innerInputValue, parsedValue)) {\n    // When dev set a new valid value, we trust them\n    const newDisplayDate = getDisplayDate(utils, rawValue, inputFormat);\n    setInnerInputValue(parsedValue);\n    setInnerDisplayedInputValue(newDisplayDate);\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerDisplayedInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    setInnerInputValue(date);\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerDisplayedInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerDisplayedInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps)\n  }, TextFieldProps);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers/internals/hooks/useMaskedInput.js"],"names":["_extends","React","useRifm","useUtils","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","getMaskFromCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","formatHelperText","getFormatHelperText","shouldUseMaskedInput","maskToUse","useMemo","computedMaskToUse","formatter","st","parsedValue","date","innerInputValue","setInnerInputValue","useState","innerDisplayedInputValue","setInnerDisplayedInputValue","isAcceptedValue","isValid","isEqual","newDisplayDate","handleChange","text","finalString","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","placeholder","type"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat, getMaskFromCurrentFormat } from '../utils/text-field-helper';\nexport const useMaskedInput = ({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) => {\n  const utils = useUtils();\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const {\n    shouldUseMaskedInput,\n    maskToUse\n  } = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (disableMaskedInput) {\n      return {\n        shouldUseMaskedInput: false,\n        maskToUse: ''\n      };\n    }\n\n    const computedMaskToUse = getMaskFromCurrentFormat(mask, inputFormat, acceptRegex, utils);\n    return {\n      shouldUseMaskedInput: checkMaskIsValidForCurrentFormat(computedMaskToUse, inputFormat, acceptRegex, utils),\n      maskToUse: computedMaskToUse\n    };\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && maskToUse ? maskedDateFormatter(maskToUse, acceptRegex) : st => st, [acceptRegex, maskToUse, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`\n\n  const parsedValue = rawValue === null ? null : utils.date(rawValue); // Track the value of the input\n\n  const [innerInputValue, setInnerInputValue] = React.useState(parsedValue); // control the input text\n\n  const [innerDisplayedInputValue, setInnerDisplayedInputValue] = React.useState(getDisplayDate(utils, rawValue, inputFormat));\n  const isAcceptedValue = rawValue === null || utils.isValid(parsedValue);\n\n  if (isAcceptedValue && !utils.isEqual(innerInputValue, parsedValue)) {\n    // When dev set a new valid value, we trust them\n    const newDisplayDate = getDisplayDate(utils, rawValue, inputFormat);\n    setInnerInputValue(parsedValue);\n    setInnerDisplayedInputValue(newDisplayDate);\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerDisplayedInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    setInnerInputValue(date);\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerDisplayedInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerDisplayedInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps)\n  }, TextFieldProps);\n};"]},"metadata":{},"sourceType":"module"}