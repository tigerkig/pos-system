{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // import { CalendarPickerView } from '../internals/models';\n\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  // calendarViewSwitchingButtonAriaLabel: (view: CalendarPickerView) => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\" // Clock labels\n  // clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,\n  // hoursClockNumberText: hours => `${hours} hours`,\n  // minutesClockNumberText: minutes => `${minutes} minutes`,\n  // secondsClockNumberText: seconds => `${seconds} seconds`,\n  // Open picker labels\n  // openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue)!, 'fullDate')}` : 'Choose date',\n  // openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue)!, 'fullTime')}` : 'Choose time',\n  // Table labels\n  // timeTableLabel: 'pick time',\n  // dateTableLabel: 'pick date',\n\n};\nexport const frFR = getPickersLocalization(frFRPickers);","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers/locales/frFR.js"],"names":["getPickersLocalization","frFRPickers","previousMonth","nextMonth","openPreviousView","openNextView","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","frFR"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC,C,CAAyE;;AAEzE,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,gBAFG;AAGlBC,EAAAA,SAAS,EAAE,cAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,0BALA;AAMlBC,EAAAA,YAAY,EAAE,wBANI;AAOlB;AACA;AACAC,EAAAA,KAAK,EAAE,OATW;AAUlBC,EAAAA,GAAG,EAAE,KAVa;AAWlB;AACAC,EAAAA,iBAAiB,EAAE,SAZD;AAalBC,EAAAA,gBAAgB,EAAE,OAbA;AAclBC,EAAAA,aAAa,EAAE,IAdG;AAelBC,EAAAA,gBAAgB,EAAE,aAfA,CAec;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzBkB,CAApB;AA4BA,OAAO,MAAMC,IAAI,GAAGZ,sBAAsB,CAACC,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization'; // import { CalendarPickerView } from '../internals/models';\n\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  // calendarViewSwitchingButtonAriaLabel: (view: CalendarPickerView) => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\" // Clock labels\n  // clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,\n  // hoursClockNumberText: hours => `${hours} hours`,\n  // minutesClockNumberText: minutes => `${minutes} minutes`,\n  // secondsClockNumberText: seconds => `${seconds} seconds`,\n  // Open picker labels\n  // openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue)!, 'fullDate')}` : 'Choose date',\n  // openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue)!, 'fullTime')}` : 'Choose time',\n  // Table labels\n  // timeTableLabel: 'pick time',\n  // dateTableLabel: 'pick date',\n\n};\nexport const frFR = getPickersLocalization(frFRPickers);"]},"metadata":{},"sourceType":"module"}