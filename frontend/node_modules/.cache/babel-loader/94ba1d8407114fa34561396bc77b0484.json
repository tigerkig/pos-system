{"ast":null,"code":"import _slicedToArray from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport var useGridColumnHeaders = function useGridColumnHeaders(props) {\n  var innerRefProp = props.innerRef,\n      _props$minColumnIndex = props.minColumnIndex,\n      minColumnIndex = _props$minColumnIndex === void 0 ? 0 : _props$minColumnIndex;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragCol = _React$useState2[0],\n      setDragCol = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      resizeCol = _React$useState4[0],\n      setResizeCol = _React$useState4[1];\n\n  var apiRef = useGridApiContext();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  var cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  var headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  var filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  var sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  var columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  var rootProps = useGridRootProps();\n  var innerRef = React.useRef(null);\n  var handleInnerRef = useForkRef(innerRefProp, innerRef);\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      renderContext = _React$useState6[0],\n      setRenderContext = _React$useState6[1];\n\n  var prevRenderContext = React.useRef(renderContext);\n  var prevScrollLeft = React.useRef(0);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(function () {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  var getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: function equalityCheck(a, b) {\n      return ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(function (key) {\n        return a[key] === b[key];\n      });\n    }\n  }));\n  var updateInnerPosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n        firstRowToRender = _getRenderableIndexes2[0],\n        lastRowToRender = _getRenderableIndexes2[1];\n\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      apiRef: apiRef,\n      visibleRows: currentPage.rows\n    });\n    var offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = \"translate3d(\".concat(-offset, \"px, 0px, 0px)\");\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(function () {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  var handleScroll = React.useCallback(function (_ref, event) {\n    var left = _ref.left,\n        _ref$renderContext = _ref.renderContext,\n        nextRenderContext = _ref$renderContext === void 0 ? null : _ref$renderContext;\n\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    var canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(function () {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  var handleColumnResizeStart = React.useCallback(function (params) {\n    return setResizeCol(params.field);\n  }, []);\n  var handleColumnResizeStop = React.useCallback(function () {\n    return setResizeCol('');\n  }, []);\n  var handleColumnReorderStart = React.useCallback(function (params) {\n    return setDragCol(params.field);\n  }, []);\n  var handleColumnReorderStop = React.useCallback(function () {\n    return setDragCol('');\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n\n  var getColumns = function getColumns(params) {\n    var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _ref2 = params || {},\n        _ref2$renderContext = _ref2.renderContext,\n        nextRenderContext = _ref2$renderContext === void 0 ? renderContext : _ref2$renderContext,\n        _ref2$minFirstColumn = _ref2.minFirstColumn,\n        minFirstColumn = _ref2$minFirstColumn === void 0 ? minColumnIndex : _ref2$minFirstColumn,\n        _ref2$maxLastColumn = _ref2.maxLastColumn,\n        maxLastColumn = _ref2$maxLastColumn === void 0 ? visibleColumns.length : _ref2$maxLastColumn;\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    var columns = [];\n\n    var _getRenderableIndexes3 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n        firstRowToRender = _getRenderableIndexes4[0],\n        lastRowToRender = _getRenderableIndexes4[1];\n\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (var i = 0; i < renderedColumns.length; i += 1) {\n      var column = renderedColumns[i];\n      var columnIndex = firstColumnToRender + i;\n      var isFirstColumn = columnIndex === 0;\n      var hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      var tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      var hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      var open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return columns;\n  };\n\n  var rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: \"\".concat(headerHeight, \"px\")\n  };\n  return {\n    renderContext: renderContext,\n    getColumns: getColumns,\n    isDragging: !!dragCol,\n    getRootProps: function getRootProps() {\n      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: function getInnerProps() {\n      return {\n        ref: handleInnerRef,\n        'aria-rowindex': 1,\n        role: 'row'\n      };\n    }\n  };\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"names":["_extends","React","ReactDOM","useForkRef","defaultMemoize","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridColumnHeaderItem","getFirstColumnIndexToRender","useGridVisibleRows","getRenderableIndexes","jsx","_jsx","isUIEvent","event","target","useGridColumnHeaders","props","innerRefProp","innerRef","minColumnIndex","useState","dragCol","setDragCol","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","currentPage","useEffect","current","columnHeadersContainerElementRef","scrollLeft","getFirstColumnIndexToRenderRef","equalityCheck","a","b","every","key","updateInnerPosition","useCallback","nextRenderContext","firstIndex","firstRowIndex","lastIndex","lastRowIndex","minFirstIndex","maxLastIndex","rows","length","buffer","rowBuffer","firstRowToRender","lastRowToRender","firstColumnToRender","firstColumnIndex","columnBuffer","visibleRows","offset","style","transform","useLayoutEffect","handleScroll","left","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","canUpdateInnerPosition","flushSync","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","getColumns","other","minFirstColumn","maxLastColumn","columns","lastColumnToRender","Math","min","renderedColumns","slice","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref","role"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }, event) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n\n  const getColumns = (params, other = {}) => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}