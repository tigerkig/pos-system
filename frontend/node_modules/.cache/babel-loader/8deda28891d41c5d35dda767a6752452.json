{"ast":null,"code":"import walkTo from '../../methods/set/walk.js';\nimport { toCardinal } from '../../fns.js';\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js';\nexport default [// =====\n//  y-m-d\n// =====\n//iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n{\n  reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: m[1],\n      month: parseInt(m[2], 10) - 1,\n      date: m[3]\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    parseOffset(s, m[5]);\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n}, //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n{\n  reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: m[1],\n      month: parseInt(m[2], 10) - 1,\n      date: parseInt(m[3], 10)\n    };\n\n    if (obj.month >= 12) {\n      //support yyyy/dd/mm (weird, but ok)\n      obj.date = parseInt(m[2], 10);\n      obj.month = parseInt(m[3], 10) - 1;\n    }\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n}, //text-month \"2015-feb-25\"\n{\n  reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: parseYear(m[1], s._today),\n      month: parseMonth(m[2]),\n      date: toCardinal(m[3] || '')\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n}];","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/formats/01-ymd.js"],"names":["walkTo","toCardinal","validate","parseTime","parseYear","parseMonth","parseOffset","reg","parse","s","m","obj","year","month","parseInt","date","epoch","_today"],"mappings":"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","sourcesContent":["import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  y-m-d\n  // =====\n  //iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n  {\n    reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: m[3]\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      parseOffset(s, m[5])\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: parseInt(m[3], 10)\n      }\n      if (obj.month >= 12) {\n        //support yyyy/dd/mm (weird, but ok)\n        obj.date = parseInt(m[2], 10)\n        obj.month = parseInt(m[3], 10) - 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //text-month \"2015-feb-25\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[1], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[3] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"module"}