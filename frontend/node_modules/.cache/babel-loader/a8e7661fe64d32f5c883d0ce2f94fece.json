{"ast":null,"code":"import monthLength from '../../data/monthLengths.js';\nimport { isLeapYear } from '../../fns.js';\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return monthLength[month];\n}; //month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\n\n\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10);\n    want.year = old.year() + years;\n    want.month = want.month % 12;\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month);\n    let years = parseInt(m / 12, 10);\n\n    if (m % 12 !== 0) {\n      years += 1;\n    }\n\n    want.year = old.year() - years; //ignore extras\n\n    want.month = want.month % 12;\n    want.month = want.month + 12;\n\n    if (want.month === 12) {\n      want.month = 0;\n    }\n  }\n\n  return want;\n}; // briefly support day=-2 (this does not need to be perfect.)\n\n\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year();\n  want.month = old.month();\n  let date = old.date();\n  want.date = date - Math.abs(sum);\n\n  while (want.date < 1) {\n    want.month -= 1;\n\n    if (want.month < 0) {\n      want.month = 11;\n      want.year -= 1;\n    }\n\n    let max = getMonthLength(want.month, want.year);\n    want.date += max;\n  }\n\n  return want;\n}; // briefly support day=33 (this does not need to be perfect.)\n\n\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year();\n  let month = old.month();\n  let max = getMonthLength(month, year);\n\n  while (sum > max) {\n    sum -= max;\n    month += 1;\n\n    if (month >= 12) {\n      month -= 12;\n      year += 1;\n    }\n\n    max = getMonthLength(month, year);\n  }\n\n  want.month = month;\n  want.date = sum;\n  return want;\n};\n\nexport const months = rollMonth;\nexport const days = rollDaysUp;\nexport const daysBack = rollDaysDown;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/set/_model.js"],"names":["monthLength","isLeapYear","getMonthLength","month","year","rollMonth","want","old","years","parseInt","m","Math","abs","rollDaysDown","sum","date","max","rollDaysUp","months","days","daysBack"],"mappings":"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","sourcesContent":["import monthLength from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29\n  }\n  return monthLength[month]\n}\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10)\n    want.year = old.year() + years\n    want.month = want.month % 12\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month)\n    let years = parseInt(m / 12, 10)\n    if (m % 12 !== 0) {\n      years += 1\n    }\n    want.year = old.year() - years\n    //ignore extras\n    want.month = want.month % 12\n    want.month = want.month + 12\n    if (want.month === 12) {\n      want.month = 0\n    }\n  }\n  return want\n}\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year()\n  want.month = old.month()\n  let date = old.date()\n  want.date = date - Math.abs(sum)\n  while (want.date < 1) {\n    want.month -= 1\n    if (want.month < 0) {\n      want.month = 11\n      want.year -= 1\n    }\n    let max = getMonthLength(want.month, want.year)\n    want.date += max\n  }\n  return want\n}\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year()\n  let month = old.month()\n  let max = getMonthLength(month, year)\n  while (sum > max) {\n    sum -= max\n    month += 1\n    if (month >= 12) {\n      month -= 12\n      year += 1\n    }\n    max = getMonthLength(month, year)\n  }\n  want.month = month\n  want.date = sum\n  return want\n}\n\nexport const months = rollMonth\nexport const days = rollDaysUp\nexport const daysBack = rollDaysDown\n"]},"metadata":{},"sourceType":"module"}