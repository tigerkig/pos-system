{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport var focusStateInitializer = function focusStateInitializer(state) {\n  return _extends({}, state, {\n    focus: {\n      cell: null,\n      columnHeader: null\n    },\n    tabIndex: {\n      cell: null,\n      columnHeader: null\n    }\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport var useGridFocus = function useGridFocus(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridFocus');\n  var lastClickedCell = React.useRef(null);\n  var setCellFocus = React.useCallback(function (id, field) {\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on cell with id=\".concat(id, \" and field=\").concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  var setColumnHeaderFocus = React.useCallback(function (field) {\n    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on column header with colIndex=\".concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  var moveFocusToRelativeCell = React.useCallback(function (id, field, direction) {\n    var columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    var rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    var visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    var currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    var rowToFocus = currentPage.rows[rowIndexToFocus];\n    var columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  var handleCellDoubleClick = React.useCallback(function (_ref) {\n    var id = _ref.id,\n        field = _ref.field;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  var handleColumnHeaderFocus = React.useCallback(function (_ref2, event) {\n    var field = _ref2.field;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  var handleBlur = React.useCallback(function () {\n    logger.debug(\"Clearing focus\");\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      });\n    });\n  }, [logger, apiRef]);\n  var handleCellMouseUp = React.useCallback(function (params) {\n    lastClickedCell.current = params;\n  }, []);\n  var handleDocumentClick = React.useCallback(function (event) {\n    var cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    var cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  var handleCellModeChange = React.useCallback(function (params) {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    var cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  var handleRowSet = React.useCallback(function () {\n    var cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        });\n      });\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus: setCellFocus,\n    setColumnHeaderFocus: setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(function () {\n    var doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return function () {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseUp', handleCellMouseUp);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"names":["_extends","React","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","setCellFocus","useCallback","id","field","focusedCell","current","setState","debug","forceUpdate","getRow","publishEvent","getCellParams","setColumnHeaderFocus","event","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseUp","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","unstable_moveFocusToRelativeCell","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseUp', handleCellMouseUp);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"]},"metadata":{},"sourceType":"module"}