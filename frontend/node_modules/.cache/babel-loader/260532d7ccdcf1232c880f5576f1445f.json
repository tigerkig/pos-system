{"ast":null,"code":"'use strict';\n\nvar $ = require('./$'),\n    global = require('./$.global'),\n    has = require('./$.has'),\n    cof = require('./$.cof'),\n    toPrimitive = require('./$.to-primitive'),\n    fails = require('./$.fails'),\n    $trim = require('./$.string-trim').trim,\n    NUMBER = 'Number',\n    $Number = global[NUMBER],\n    Base = $Number,\n    proto = $Number.prototype // Opera ~12 has broken Object#toString\n,\n    BROKEN_COF = cof($.create(proto)) == NUMBER,\n    TRIM = ('trim' in String.prototype); // 7.1.3 ToNumber(argument)\n\n\nvar toNumber = function toNumber(argument) {\n  var it = toPrimitive(argument, false);\n\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0),\n        third,\n        radix,\n        maxCode;\n\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66:\n        case 98:\n          radix = 2;\n          maxCode = 49;\n          break;\n        // fast equal /^0b[01]+$/i\n\n        case 79:\n        case 111:\n          radix = 8;\n          maxCode = 55;\n          break;\n        // fast equal /^0o[0-7]+$/i\n\n        default:\n          return +it;\n      }\n\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n\n        if (code < 48 || code > maxCode) return NaN;\n      }\n\n      return parseInt(digits, radix);\n    }\n  }\n\n  return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value,\n        that = this;\n    return that instanceof $Number // check on 1..constructor(foo) case\n    && (BROKEN_COF ? fails(function () {\n      proto.valueOf.call(that);\n    }) : cof(that) != NUMBER) ? new Base(toNumber(it)) : toNumber(it);\n  };\n\n  $.each.call(require('./$.descriptors') ? $.getNames(Base) : ( // ES3:\n  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):\n  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), function (key) {\n    if (has(Base, key) && !has($Number, key)) {\n      $.setDesc($Number, key, $.getDesc(Base, key));\n    }\n  });\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n\n  require('./$.redefine')(global, NUMBER, $Number);\n}","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/babel/node_modules/core-js/modules/es6.number.constructor.js"],"names":["$","require","global","has","cof","toPrimitive","fails","$trim","trim","NUMBER","$Number","Base","proto","prototype","BROKEN_COF","create","TRIM","String","toNumber","argument","it","length","first","charCodeAt","third","radix","maxCode","NaN","digits","slice","i","l","code","parseInt","Number","value","arguments","that","valueOf","call","each","getNames","split","key","setDesc","getDesc","constructor"],"mappings":"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","sourcesContent":["'use strict';\nvar $           = require('./$')\n  , global      = require('./$.global')\n  , has         = require('./$.has')\n  , cof         = require('./$.cof')\n  , toPrimitive = require('./$.to-primitive')\n  , fails       = require('./$.fails')\n  , $trim       = require('./$.string-trim').trim\n  , NUMBER      = 'Number'\n  , $Number     = global[NUMBER]\n  , Base        = $Number\n  , proto       = $Number.prototype\n  // Opera ~12 has broken Object#toString\n  , BROKEN_COF  = cof($.create(proto)) == NUMBER\n  , TRIM        = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function(argument){\n  var it = toPrimitive(argument, false);\n  if(typeof it == 'string' && it.length > 2){\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0)\n      , third, radix, maxCode;\n    if(first === 43 || first === 45){\n      third = it.charCodeAt(2);\n      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if(first === 48){\n      switch(it.charCodeAt(1)){\n        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default : return +it;\n      }\n      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if(code < 48 || code > maxCode)return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){\n  $Number = function Number(value){\n    var it = arguments.length < 1 ? 0 : value\n      , that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? new Base(toNumber(it)) : toNumber(it);\n  };\n  $.each.call(require('./$.descriptors') ? $.getNames(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), function(key){\n    if(has(Base, key) && !has($Number, key)){\n      $.setDesc($Number, key, $.getDesc(Base, key));\n    }\n  });\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./$.redefine')(global, NUMBER, $Number);\n}"]},"metadata":{},"sourceType":"script"}