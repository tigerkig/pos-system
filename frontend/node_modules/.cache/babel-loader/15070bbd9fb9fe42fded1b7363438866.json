{"ast":null,"code":"/* eslint-disable */\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction utf8Encode(str) {\n  for (let n = 0; n < str.length; n++) {\n    const c = str.charCodeAt(n);\n\n    if (c >= 128) {\n      throw new Error('ASCII only support');\n    }\n  }\n\n  return str;\n}\n\nexport const base64Decode = input => {\n  let output = '';\n  let chr1, chr2, chr3;\n  let enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  while (i < input.length) {\n    enc1 = _keyStr.indexOf(input.charAt(i++));\n    enc2 = _keyStr.indexOf(input.charAt(i++));\n    enc3 = _keyStr.indexOf(input.charAt(i++));\n    enc4 = _keyStr.indexOf(input.charAt(i++));\n    chr1 = enc1 << 2 | enc2 >> 4;\n    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n    chr3 = (enc3 & 3) << 6 | enc4;\n    output = output + String.fromCharCode(chr1);\n\n    if (enc3 != 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n\n    if (enc4 != 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  }\n\n  return output;\n};\nexport const base64Encode = input => {\n  let output = '';\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = utf8Encode(input);\n\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-license-pro/encoding/base64.js"],"names":["_keyStr","utf8Encode","str","n","length","c","charCodeAt","Error","base64Decode","input","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","replace","indexOf","charAt","String","fromCharCode","base64Encode","isNaN"],"mappings":"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","sourcesContent":["/* eslint-disable */\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction utf8Encode(str) {\n  for (let n = 0; n < str.length; n++) {\n    const c = str.charCodeAt(n);\n\n    if (c >= 128) {\n      throw new Error('ASCII only support');\n    }\n  }\n\n  return str;\n}\n\nexport const base64Decode = input => {\n  let output = '';\n  let chr1, chr2, chr3;\n  let enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  while (i < input.length) {\n    enc1 = _keyStr.indexOf(input.charAt(i++));\n    enc2 = _keyStr.indexOf(input.charAt(i++));\n    enc3 = _keyStr.indexOf(input.charAt(i++));\n    enc4 = _keyStr.indexOf(input.charAt(i++));\n    chr1 = enc1 << 2 | enc2 >> 4;\n    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n    chr3 = (enc3 & 3) << 6 | enc4;\n    output = output + String.fromCharCode(chr1);\n\n    if (enc3 != 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n\n    if (enc4 != 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  }\n\n  return output;\n};\nexport const base64Encode = input => {\n  let output = '';\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = utf8Encode(input);\n\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};"]},"metadata":{},"sourceType":"module"}