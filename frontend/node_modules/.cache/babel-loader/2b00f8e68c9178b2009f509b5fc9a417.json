{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"onChange\", \"ToolbarComponent\", \"value\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps, timePickerValueManager } from '../TimePicker/shared';\nimport { TimePickerToolbar } from '../TimePicker/TimePickerToolbar';\nimport { PickerStaticWrapper } from '../internals/components/PickerStaticWrapper/PickerStaticWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useTimeValidation } from '../internals/hooks/validation/useTimeValidation';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/x/api/date-pickers/static-time-picker/)\n */\n\nexport const StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    ToolbarComponent = TimePickerToolbar,\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, timePickerValueManager);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError,\n    components,\n    componentsProps\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.any,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @template TDate\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useTimePickerDefaultizedProps","timePickerValueManager","TimePickerToolbar","PickerStaticWrapper","CalendarOrClockPicker","useTimeValidation","usePickerState","jsx","_jsx","StaticTimePicker","forwardRef","inProps","ref","props","displayStaticWrapperAs","ToolbarComponent","components","componentsProps","other","validationError","pickerProps","inputProps","wrapperProps","DateInputProps","children","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","ampm","bool","ampmInClock","className","string","closeOnSelect","any","object","disabled","disableIgnoringDatePartForTimeValidation","disableMaskedInput","disableOpenPicker","oneOf","getClockLabelText","func","getOpenDialogAriaText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","node","mask","maxTime","minTime","minutesStep","number","onAccept","onChange","isRequired","onError","onViewChange","OpenPickerButtonProps","openTo","orientation","readOnly","renderInput","rifmFormatter","shouldDisableTime","showToolbar","elementType","value","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"onChange\", \"ToolbarComponent\", \"value\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps, timePickerValueManager } from '../TimePicker/shared';\nimport { TimePickerToolbar } from '../TimePicker/TimePickerToolbar';\nimport { PickerStaticWrapper } from '../internals/components/PickerStaticWrapper/PickerStaticWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useTimeValidation } from '../internals/hooks/validation/useTimeValidation';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/x/api/date-pickers/static-time-picker/)\n */\nexport const StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    ToolbarComponent = TimePickerToolbar,\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, timePickerValueManager);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError,\n    components,\n    componentsProps\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps,\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.any,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @template TDate\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TValue\n   * @param {TValue} value The new parsed value.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}