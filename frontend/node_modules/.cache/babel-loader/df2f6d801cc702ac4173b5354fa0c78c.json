{"ast":null,"code":"import parsers from './formats/index.js';\n\nconst parseString = function (s, input, givenTz) {\n  // let parsers = s.parsers || []\n  //try each text-parse template, use the first good result\n  for (let i = 0; i < parsers.length; i++) {\n    let m = input.match(parsers[i].reg);\n\n    if (m) {\n      // console.log(parsers[i].reg)\n      let res = parsers[i].parse(s, m, givenTz);\n\n      if (res !== null && res.isValid()) {\n        return res;\n      }\n    }\n  }\n\n  if (s.silent === false) {\n    console.warn(\"Warning: couldn't parse date-string: '\" + input + \"'\");\n  }\n\n  s.epoch = null;\n  return s;\n};\n\nexport default parseString;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/parse.js"],"names":["parsers","parseString","s","input","givenTz","i","length","m","match","reg","res","parse","isValid","silent","console","warn","epoch"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,WAAW,GAAG,UAAUC,CAAV,EAAaC,KAAb,EAAoBC,OAApB,EAA6B;AAC/C;AACA;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIE,CAAC,GAAGJ,KAAK,CAACK,KAAN,CAAYR,OAAO,CAACK,CAAD,CAAP,CAAWI,GAAvB,CAAR;;AACA,QAAIF,CAAJ,EAAO;AACL;AACA,UAAIG,GAAG,GAAGV,OAAO,CAACK,CAAD,CAAP,CAAWM,KAAX,CAAiBT,CAAjB,EAAoBK,CAApB,EAAuBH,OAAvB,CAAV;;AACA,UAAIM,GAAG,KAAK,IAAR,IAAgBA,GAAG,CAACE,OAAJ,EAApB,EAAmC;AACjC,eAAOF,GAAP;AACD;AACF;AACF;;AACD,MAAIR,CAAC,CAACW,MAAF,KAAa,KAAjB,EAAwB;AACtBC,IAAAA,OAAO,CAACC,IAAR,CAAa,2CAA2CZ,KAA3C,GAAmD,GAAhE;AACD;;AACDD,EAAAA,CAAC,CAACc,KAAF,GAAU,IAAV;AACA,SAAOd,CAAP;AACD,CAlBD;;AAmBA,eAAeD,WAAf","sourcesContent":["import parsers from './formats/index.js'\n\nconst parseString = function (s, input, givenTz) {\n  // let parsers = s.parsers || []\n  //try each text-parse template, use the first good result\n  for (let i = 0; i < parsers.length; i++) {\n    let m = input.match(parsers[i].reg)\n    if (m) {\n      // console.log(parsers[i].reg)\n      let res = parsers[i].parse(s, m, givenTz)\n      if (res !== null && res.isValid()) {\n        return res\n      }\n    }\n  }\n  if (s.silent === false) {\n    console.warn(\"Warning: couldn't parse date-string: '\" + input + \"'\")\n  }\n  s.epoch = null\n  return s\n}\nexport default parseString\n"]},"metadata":{},"sourceType":"module"}