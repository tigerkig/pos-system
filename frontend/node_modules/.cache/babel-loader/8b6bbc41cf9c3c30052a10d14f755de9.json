{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = _ref2 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref2;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    const lastMeasuredIndex = Math.max(0, apiRef.current.unstable_getLastMeasuredRowIndex());\n    const allRowsMeasured = lastMeasuredIndex === Infinity;\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndex] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndex);\n  }, [apiRef, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth,\n      ignoreAutoHeight\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) || ignoreAutoHeight ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"sources":["E:/React/pos-system/frontend/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","getNearestIndexToRender","useCallback","lastMeasuredIndex","max","current","unstable_getLastMeasuredRowIndex","allRowsMeasured","Infinity","computeRenderContext","firstRowIndex","lastRowIndex","rows","firstColumnIndex","lastColumnIndex","autoHeight","clientHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","unstable_rowHasAutoHeight","id","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","useLayoutEffect","updateRenderContext","initialRenderContext","params","publishEvent","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","ignoreAutoHeight","range","renderedRows","push","unstable_calculateColSpan","rowId","lastColumnToRender","renderedColumns","slice","_rootProps$components","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","getRowParams","components","Row","selected","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","shouldExtendContent","size","width","minHeight","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    const lastMeasuredIndex = Math.max(0, apiRef.current.unstable_getLastMeasuredRowIndex());\n    const allRowsMeasured = lastMeasuredIndex === Infinity;\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndex] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndex);\n  }, [apiRef, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth,\n      ignoreAutoHeight\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) || ignoreAutoHeight ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}