{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback(function (params) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event.key) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent('cellEditStart', params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent('cellEditStop', params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event.key)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.old.js"],"names":["_extends","React","useEventCallback","useGridApiOptionHandler","useGridApiEventHandler","GridCellModes","GridEditModes","isKeyboardEvent","isPrintableKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isDeleteKeys","useGridLogger","gridFocusCellSelector","useGridApiMethod","gridEditRowsStateSelector","isPromise","promise","then","useCellEditing","apiRef","props","_props$experimentalFe2","logger","buildCallback","callback","editMode","Cell","setCellMode","useCallback","id","field","mode","current","getCellMode","debug","setState","state","newEditRowsState","editRows","Edit","value","getCellValue","Object","keys","length","forceUpdate","publishEvent","getCellParams","editRowsState","isEditing","View","commitCellChange","params","event","_props$experimentalFe","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","Error","editCellProps","column","getColumn","row","getRow","experimentalFeatures","preventCommitWhileValidating","cellProps","isValidating","error","commitParams","hasError","preProcessEditCellProps","result","newEditCellProps","unstable_setEditCellProps","setCellEditingEditCellValue","Promise","resolve","unstable_parseValue","newEditCellPropsProcessed","cellEditingApi","unstable_setCellEditingEditCellValue","handleCellKeyDown","cellMode","isEditable","isEditMode","isModifierKeyPressed","ctrlKey","metaKey","altKey","key","shiftKey","setEditCellValue","isValid","handleCellDoubleClick","commitPropsAndExit","handleCellFocusOut","handleColumnHeaderDragStart","cell","handleCellEditStart","handleCellEditStop","setCellFocus","handleCellEditCommit","toString","rowUpdate","valueSetter","updateRows","handleEditCellPropsChange","onCellEditCommit","onCellEditStart","onCellEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback((params, event = {}) => {\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event.key) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent('cellEditStart', params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent('cellEditStop', params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event.key)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};"]},"metadata":{},"sourceType":"module"}