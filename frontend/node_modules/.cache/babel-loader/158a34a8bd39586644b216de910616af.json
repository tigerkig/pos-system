{"ast":null,"code":"import walkTo from '../../methods/set/walk.js';\nimport { toCardinal } from '../../fns.js';\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js';\nexport default [// =====\n//  m-d-y\n// =====\n//mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n{\n  reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n  parse: (s, arr) => {\n    let month = parseInt(arr[1], 10) - 1;\n    let date = parseInt(arr[2], 10); //support dd/mm/yyy\n\n    if (s.british || month >= 12) {\n      date = parseInt(arr[1], 10);\n      month = parseInt(arr[2], 10) - 1;\n    }\n\n    let obj = {\n      date,\n      month,\n      year: parseYear(arr[3], s._today) || new Date().getFullYear()\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n}, //alt short format - \"feb-25-2015\"\n{\n  reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[3], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n}, //Long \"Mar 25 2015\"\n//February 22, 2017 15:30:00\n{\n  reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[3], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n}, // 'Sun Mar 14 15:09:48 +0000 2021'\n{\n  reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[5], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n\n    walkTo(s, obj);\n    s = parseTime(s, arr[3]);\n    return s;\n  }\n}];","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/formats/02-mdy.js"],"names":["walkTo","toCardinal","validate","parseTime","parseYear","parseMonth","reg","parse","s","arr","month","parseInt","date","british","obj","year","_today","Date","getFullYear","epoch"],"mappings":"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","sourcesContent":["import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  m-d-y\n  // =====\n  //mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, arr) => {\n      let month = parseInt(arr[1], 10) - 1\n      let date = parseInt(arr[2], 10)\n      //support dd/mm/yyy\n      if (s.british || month >= 12) {\n        date = parseInt(arr[1], 10)\n        month = parseInt(arr[2], 10) - 1\n      }\n      let obj = {\n        date,\n        month,\n        year: parseYear(arr[3], s._today) || new Date().getFullYear()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  //alt short format - \"feb-25-2015\"\n  {\n    reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  //Long \"Mar 25 2015\"\n  //February 22, 2017 15:30:00\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  // 'Sun Mar 14 15:09:48 +0000 2021'\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[5], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[3])\n      return s\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"module"}