{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Filtering\n */\n\nexport var gridFilterStateSelector = function gridFilterStateSelector(state) {\n  return state.filter;\n};\n/**\n * Get the current filter model.\n * @category Filtering\n */\n\nexport var gridFilterModelSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filterModel;\n});\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\n\nexport var gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, function (filterModel) {\n  return filterModel.quickFilterValues;\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport var gridVisibleRowsLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.visibleRowsLookup;\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport var gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredRowsLookup;\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport var gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredDescendantCountLookup;\n});\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport var gridVisibleSortedRowEntriesSelector = createSelector(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, function (visibleRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return visibleRowsLookup[row.id] !== false;\n  });\n});\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport var gridVisibleSortedRowIdsSelector = createSelector(gridVisibleSortedRowEntriesSelector, function (visibleSortedRowEntries) {\n  return visibleSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport var gridFilteredSortedRowEntriesSelector = createSelector(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, function (filteredRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return filteredRowsLookup[row.id] !== false;\n  });\n});\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport var gridFilteredSortedRowIdsSelector = createSelector(gridFilteredSortedRowEntriesSelector, function (filteredSortedRowEntries) {\n  return filteredSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n/**\n * @category Filtering\n * @deprecated Use `gridVisibleSortedRowIdsSelector` instead\n * @ignore - do not document.\n * TODO: Add deprecation warning once we have the new selectors without the \"visible\" keyword.\n */\n\nexport var gridVisibleRowsSelector = gridVisibleSortedRowIdsSelector;\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport var gridVisibleSortedTopLevelRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridRowTreeSelector, gridRowTreeDepthSelector, function (visibleSortedRows, rowTree, rowTreeDepth) {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n\n  return visibleSortedRows.filter(function (row) {\n    var _rowTree$row$id;\n\n    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;\n  });\n});\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport var gridVisibleRowCountSelector = createSelector(gridVisibleSortedRowEntriesSelector, function (visibleSortedRows) {\n  return visibleSortedRows.length;\n});\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport var gridVisibleTopLevelRowCountSelector = createSelector(gridVisibleSortedTopLevelRowEntriesSelector, function (visibleSortedTopLevelRows) {\n  return visibleSortedTopLevelRows.length;\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport var gridFilterActiveItemsSelector = createSelector(gridFilterModelSelector, gridColumnLookupSelector, function (filterModel, columnLookup) {\n  var _filterModel$items;\n\n  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(function (item) {\n    var _column$filterOperato, _item$value;\n\n    if (!item.columnField) {\n      return false;\n    }\n\n    var column = columnLookup[item.columnField];\n\n    if (!(column != null && column.filterOperators) || (column == null ? void 0 : (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {\n      return false;\n    }\n\n    var filterOperator = column.filterOperators.find(function (operator) {\n      return operator.value === item.operatorValue;\n    });\n\n    if (!filterOperator) {\n      return false;\n    }\n\n    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';\n  });\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport var gridFilterActiveItemsLookupSelector = createSelector(gridFilterActiveItemsSelector, function (activeFilters) {\n  var result = activeFilters.reduce(function (res, filterItem) {\n    if (!res[filterItem.columnField]) {\n      res[filterItem.columnField] = [filterItem];\n    } else {\n      res[filterItem.columnField].push(filterItem);\n    }\n\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js"],"names":["createSelector","gridSortedRowEntriesSelector","gridColumnLookupSelector","gridRowTreeDepthSelector","gridRowTreeSelector","gridFilterStateSelector","state","filter","gridFilterModelSelector","filterState","filterModel","gridQuickFilterValuesSelector","quickFilterValues","gridVisibleRowsLookupSelector","visibleRowsLookup","gridFilteredRowsLookupSelector","filteredRowsLookup","gridFilteredDescendantCountLookupSelector","filteredDescendantCountLookup","gridVisibleSortedRowEntriesSelector","sortedRows","row","id","gridVisibleSortedRowIdsSelector","visibleSortedRowEntries","map","gridFilteredSortedRowEntriesSelector","gridFilteredSortedRowIdsSelector","filteredSortedRowEntries","gridVisibleRowsSelector","gridVisibleSortedTopLevelRowEntriesSelector","visibleSortedRows","rowTree","rowTreeDepth","_rowTree$row$id","depth","gridVisibleRowCountSelector","length","gridVisibleTopLevelRowCountSelector","visibleSortedTopLevelRows","gridFilterActiveItemsSelector","columnLookup","_filterModel$items","items","item","_column$filterOperato","_item$value","columnField","column","filterOperators","filterOperator","find","operator","value","operatorValue","InputComponent","toString","gridFilterActiveItemsLookupSelector","activeFilters","result","reduce","res","filterItem","push"],"mappings":"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","sourcesContent":["import { createSelector } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Filtering\n */\n\nexport const gridFilterStateSelector = state => state.filter;\n/**\n * Get the current filter model.\n * @category Filtering\n */\n\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\n\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridVisibleRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.visibleRowsLookup);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport const gridVisibleSortedRowEntriesSelector = createSelector(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\n\nexport const gridVisibleSortedRowIdsSelector = createSelector(gridVisibleSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport const gridFilteredSortedRowEntriesSelector = createSelector(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\n\nexport const gridFilteredSortedRowIdsSelector = createSelector(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n/**\n * @category Filtering\n * @deprecated Use `gridVisibleSortedRowIdsSelector` instead\n * @ignore - do not document.\n * TODO: Add deprecation warning once we have the new selectors without the \"visible\" keyword.\n */\n\nexport const gridVisibleRowsSelector = gridVisibleSortedRowIdsSelector;\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridVisibleSortedTopLevelRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridRowTreeSelector, gridRowTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n\n  return visibleSortedRows.filter(row => {\n    var _rowTree$row$id;\n\n    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;\n  });\n});\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridVisibleRowCountSelector = createSelector(gridVisibleSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\n\nexport const gridVisibleTopLevelRowCountSelector = createSelector(gridVisibleSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n/**\n * @category Filtering\n * @ignore - do not document.\n */\n\nexport const gridFilterActiveItemsSelector = createSelector(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {\n  var _filterModel$items;\n\n  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(item => {\n    var _column$filterOperato, _item$value;\n\n    if (!item.columnField) {\n      return false;\n    }\n\n    const column = columnLookup[item.columnField];\n\n    if (!(column != null && column.filterOperators) || (column == null ? void 0 : (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {\n      return false;\n    }\n\n    const filterOperator = column.filterOperators.find(operator => operator.value === item.operatorValue);\n\n    if (!filterOperator) {\n      return false;\n    }\n\n    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';\n  });\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsLookupSelector = createSelector(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.columnField]) {\n      res[filterItem.columnField] = [filterItem];\n    } else {\n      res[filterItem.columnField].push(filterItem);\n    }\n\n    return res;\n  }, {});\n  return result;\n});"]},"metadata":{},"sourceType":"module"}