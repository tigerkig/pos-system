{"ast":null,"code":"var ctx = require('./$.ctx'),\n    call = require('./$.iter-call'),\n    isArrayIter = require('./$.is-array-iter'),\n    anObject = require('./$.an-object'),\n    toLength = require('./$.to-length'),\n    getIterFn = require('./core.get-iterator-method');\n\nmodule.exports = function (iterable, entries, fn, that) {\n  var iterFn = getIterFn(iterable),\n      f = ctx(fn, that, entries ? 2 : 1),\n      index = 0,\n      length,\n      step,\n      iterator;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator\n\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    call(iterator, f, step.value, entries);\n  }\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/babel/node_modules/core-js/modules/$.for-of.js"],"names":["ctx","require","call","isArrayIter","anObject","toLength","getIterFn","module","exports","iterable","entries","fn","that","iterFn","f","index","length","step","iterator","TypeError","next","done","value"],"mappings":"AAAA,IAAIA,GAAG,GAAWC,OAAO,CAAC,SAAD,CAAzB;AAAA,IACIC,IAAI,GAAUD,OAAO,CAAC,eAAD,CADzB;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,mBAAD,CAFzB;AAAA,IAGIG,QAAQ,GAAMH,OAAO,CAAC,eAAD,CAHzB;AAAA,IAIII,QAAQ,GAAMJ,OAAO,CAAC,eAAD,CAJzB;AAAA,IAKIK,SAAS,GAAKL,OAAO,CAAC,4BAAD,CALzB;;AAMAM,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,OAAnB,EAA4BC,EAA5B,EAAgCC,IAAhC,EAAqC;AACpD,MAAIC,MAAM,GAAGP,SAAS,CAACG,QAAD,CAAtB;AAAA,MACIK,CAAC,GAAQd,GAAG,CAACW,EAAD,EAAKC,IAAL,EAAWF,OAAO,GAAG,CAAH,GAAO,CAAzB,CADhB;AAAA,MAEIK,KAAK,GAAI,CAFb;AAAA,MAGIC,MAHJ;AAAA,MAGYC,IAHZ;AAAA,MAGkBC,QAHlB;AAIA,MAAG,OAAOL,MAAP,IAAiB,UAApB,EAA+B,MAAMM,SAAS,CAACV,QAAQ,GAAG,mBAAZ,CAAf,CALqB,CAMpD;;AACA,MAAGN,WAAW,CAACU,MAAD,CAAd,EAAuB,KAAIG,MAAM,GAAGX,QAAQ,CAACI,QAAQ,CAACO,MAAV,CAArB,EAAwCA,MAAM,GAAGD,KAAjD,EAAwDA,KAAK,EAA7D,EAAgE;AACrFL,IAAAA,OAAO,GAAGI,CAAC,CAACV,QAAQ,CAACa,IAAI,GAAGR,QAAQ,CAACM,KAAD,CAAhB,CAAR,CAAiC,CAAjC,CAAD,EAAsCE,IAAI,CAAC,CAAD,CAA1C,CAAJ,GAAqDH,CAAC,CAACL,QAAQ,CAACM,KAAD,CAAT,CAA7D;AACD,GAFD,MAEO,KAAIG,QAAQ,GAAGL,MAAM,CAACX,IAAP,CAAYO,QAAZ,CAAf,EAAsC,CAAC,CAACQ,IAAI,GAAGC,QAAQ,CAACE,IAAT,EAAR,EAAyBC,IAAhE,GAAuE;AAC5EnB,IAAAA,IAAI,CAACgB,QAAD,EAAWJ,CAAX,EAAcG,IAAI,CAACK,KAAnB,EAA0BZ,OAA1B,CAAJ;AACD;AACF,CAZD","sourcesContent":["var ctx         = require('./$.ctx')\n  , call        = require('./$.iter-call')\n  , isArrayIter = require('./$.is-array-iter')\n  , anObject    = require('./$.an-object')\n  , toLength    = require('./$.to-length')\n  , getIterFn   = require('./core.get-iterator-method');\nmodule.exports = function(iterable, entries, fn, that){\n  var iterFn = getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    call(iterator, f, step.value, entries);\n  }\n};"]},"metadata":{},"sourceType":"script"}