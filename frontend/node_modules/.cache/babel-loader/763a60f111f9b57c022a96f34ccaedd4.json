{"ast":null,"code":"import { titleCase, zeroPad, ordinal } from '../../fns.js';\nimport { short } from '../../data/months.js';\nimport { short as _short } from '../../data/days.js';\nimport { useTitleCase } from '../../data/caseFormat.js';\nimport isoOffset from './_offset.js';\n\nconst applyCaseFormat = str => {\n  if (useTitleCase()) {\n    return titleCase(str);\n  }\n\n  return str;\n}; // iso-year padding\n\n\nconst padYear = num => {\n  if (num >= 0) {\n    return zeroPad(num, 4);\n  } else {\n    num = Math.abs(num);\n    return '-' + zeroPad(num, 4);\n  }\n};\n\nconst format = {\n  day: s => applyCaseFormat(s.dayName()),\n  'day-short': s => applyCaseFormat(_short()[s.day()]),\n  'day-number': s => s.day(),\n  'day-ordinal': s => ordinal(s.day()),\n  'day-pad': s => zeroPad(s.day()),\n  date: s => s.date(),\n  'date-ordinal': s => ordinal(s.date()),\n  'date-pad': s => zeroPad(s.date()),\n  month: s => applyCaseFormat(s.monthName()),\n  'month-short': s => applyCaseFormat(short()[s.month()]),\n  'month-number': s => s.month(),\n  'month-ordinal': s => ordinal(s.month()),\n  'month-pad': s => zeroPad(s.month()),\n  'iso-month': s => zeroPad(s.month() + 1),\n  //1-based months\n  year: s => {\n    let year = s.year();\n\n    if (year > 0) {\n      return year;\n    }\n\n    year = Math.abs(year);\n    return year + ' BC';\n  },\n  'year-short': s => {\n    let year = s.year();\n\n    if (year > 0) {\n      return `'${String(s.year()).substr(2, 4)}`;\n    }\n\n    year = Math.abs(year);\n    return year + ' BC';\n  },\n  'iso-year': s => {\n    let year = s.year();\n    let isNegative = year < 0;\n    let str = zeroPad(Math.abs(year), 4); //0-padded\n\n    if (isNegative) {\n      //negative years are for some reason 6-digits ('-00008')\n      str = zeroPad(str, 6);\n      str = '-' + str;\n    }\n\n    return str;\n  },\n  time: s => s.time(),\n  'time-24': s => `${s.hour24()}:${zeroPad(s.minute())}`,\n  hour: s => s.hour12(),\n  'hour-pad': s => zeroPad(s.hour12()),\n  'hour-24': s => s.hour24(),\n  'hour-24-pad': s => zeroPad(s.hour24()),\n  minute: s => s.minute(),\n  'minute-pad': s => zeroPad(s.minute()),\n  second: s => s.second(),\n  'second-pad': s => zeroPad(s.second()),\n  millisecond: s => s.millisecond(),\n  'millisecond-pad': s => zeroPad(s.millisecond(), 3),\n  ampm: s => s.ampm(),\n  quarter: s => 'Q' + s.quarter(),\n  season: s => s.season(),\n  era: s => s.era(),\n  json: s => s.json(),\n  timezone: s => s.timezone().name,\n  offset: s => isoOffset(s),\n  numeric: s => `${s.year()}/${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`,\n  // yyyy/mm/dd\n  'numeric-us': s => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}/${s.year()}`,\n  // mm/dd/yyyy\n  'numeric-uk': s => `${zeroPad(s.date())}/${zeroPad(s.month() + 1)}/${s.year()}`,\n  //dd/mm/yyyy\n  'mm/dd': s => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`,\n  //mm/dd\n  // ... https://en.wikipedia.org/wiki/ISO_8601 ;(((\n  iso: s => {\n    let year = s.format('iso-year');\n    let month = zeroPad(s.month() + 1); //1-based months\n\n    let date = zeroPad(s.date());\n    let hour = zeroPad(s.h24());\n    let minute = zeroPad(s.minute());\n    let second = zeroPad(s.second());\n    let ms = zeroPad(s.millisecond(), 3);\n    let offset = isoOffset(s);\n    return `${year}-${month}-${date}T${hour}:${minute}:${second}.${ms}${offset}`; //2018-03-09T08:50:00.000-05:00\n  },\n  'iso-short': s => {\n    let month = zeroPad(s.month() + 1); //1-based months\n\n    let date = zeroPad(s.date());\n    let year = padYear(s.year());\n    return `${year}-${month}-${date}`; //2017-02-15\n  },\n  'iso-utc': s => {\n    return new Date(s.epoch).toISOString(); //2017-03-08T19:45:28.367Z\n  },\n  //i made these up\n  nice: s => `${short()[s.month()]} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-24': s => `${short()[s.month()]} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(s.minute())}`,\n  'nice-year': s => `${short()[s.month()]} ${ordinal(s.date())}, ${s.year()}`,\n  'nice-day': s => `${_short()[s.day()]} ${applyCaseFormat(short()[s.month()])} ${ordinal(s.date())}`,\n  'nice-full': s => `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-full-24': s => `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(s.minute())}`\n}; //aliases\n\nconst aliases = {\n  'day-name': 'day',\n  'month-name': 'month',\n  'iso 8601': 'iso',\n  'time-h24': 'time-24',\n  'time-12': 'time',\n  'time-h12': 'time',\n  tz: 'timezone',\n  'day-num': 'day-number',\n  'month-num': 'month-number',\n  'month-iso': 'iso-month',\n  'year-iso': 'iso-year',\n  'nice-short': 'nice',\n  'nice-short-24': 'nice-24',\n  mdy: 'numeric-us',\n  dmy: 'numeric-uk',\n  ymd: 'numeric',\n  'yyyy/mm/dd': 'numeric',\n  'mm/dd/yyyy': 'numeric-us',\n  'dd/mm/yyyy': 'numeric-us',\n  'little-endian': 'numeric-uk',\n  'big-endian': 'numeric',\n  'day-nice': 'nice-day'\n};\nObject.keys(aliases).forEach(k => format[k] = format[aliases[k]]);\n\nconst printFormat = function (s) {\n  let str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  //don't print anything if it's an invalid date\n  if (s.isValid() !== true) {\n    return '';\n  } //support .format('month')\n\n\n  if (format.hasOwnProperty(str)) {\n    let out = format[str](s) || '';\n\n    if (str !== 'json') {\n      out = String(out);\n\n      if (str !== 'ampm') {\n        out = applyCaseFormat(out);\n      }\n    }\n\n    return out;\n  } //support '{hour}:{minute}' notation\n\n\n  if (str.indexOf('{') !== -1) {\n    let sections = /\\{(.+?)\\}/g;\n    str = str.replace(sections, (_, fmt) => {\n      fmt = fmt.toLowerCase().trim();\n\n      if (format.hasOwnProperty(fmt)) {\n        let out = String(format[fmt](s));\n\n        if (fmt !== 'ampm') {\n          return applyCaseFormat(out);\n        }\n\n        return out;\n      }\n\n      return '';\n    });\n    return str;\n  }\n\n  return s.format('iso-short');\n};\n\nexport default printFormat;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/format/index.js"],"names":["titleCase","zeroPad","ordinal","short","_short","useTitleCase","isoOffset","applyCaseFormat","str","padYear","num","Math","abs","format","day","s","dayName","date","month","monthName","year","String","substr","isNegative","time","hour24","minute","hour","hour12","second","millisecond","ampm","quarter","season","era","json","timezone","name","offset","numeric","iso","h24","ms","Date","epoch","toISOString","nice","aliases","tz","mdy","dmy","ymd","Object","keys","forEach","k","printFormat","isValid","hasOwnProperty","out","indexOf","sections","replace","_","fmt","toLowerCase","trim"],"mappings":"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","sourcesContent":["import { titleCase, zeroPad, ordinal } from '../../fns.js'\nimport { short } from '../../data/months.js'\nimport { short as _short } from '../../data/days.js'\nimport { useTitleCase } from '../../data/caseFormat.js'\nimport isoOffset from './_offset.js'\n\nconst applyCaseFormat = (str) => {\n  if (useTitleCase()) {\n    return titleCase(str)\n  }\n  return str\n}\n\n// iso-year padding\nconst padYear = (num) => {\n  if (num >= 0) {\n    return zeroPad(num, 4)\n  } else {\n    num = Math.abs(num)\n    return '-' + zeroPad(num, 4)\n  }\n}\n\nconst format = {\n  day: (s) => applyCaseFormat(s.dayName()),\n  'day-short': (s) => applyCaseFormat(_short()[s.day()]),\n  'day-number': (s) => s.day(),\n  'day-ordinal': (s) => ordinal(s.day()),\n  'day-pad': (s) => zeroPad(s.day()),\n\n  date: (s) => s.date(),\n  'date-ordinal': (s) => ordinal(s.date()),\n  'date-pad': (s) => zeroPad(s.date()),\n\n  month: (s) => applyCaseFormat(s.monthName()),\n  'month-short': (s) => applyCaseFormat(short()[s.month()]),\n  'month-number': (s) => s.month(),\n  'month-ordinal': (s) => ordinal(s.month()),\n  'month-pad': (s) => zeroPad(s.month()),\n  'iso-month': (s) => zeroPad(s.month() + 1), //1-based months\n\n  year: (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return year\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'year-short': (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return `'${String(s.year()).substr(2, 4)}`\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'iso-year': (s) => {\n    let year = s.year()\n    let isNegative = year < 0\n    let str = zeroPad(Math.abs(year), 4) //0-padded\n    if (isNegative) {\n      //negative years are for some reason 6-digits ('-00008')\n      str = zeroPad(str, 6)\n      str = '-' + str\n    }\n    return str\n  },\n\n  time: (s) => s.time(),\n  'time-24': (s) => `${s.hour24()}:${zeroPad(s.minute())}`,\n\n  hour: (s) => s.hour12(),\n  'hour-pad': (s) => zeroPad(s.hour12()),\n  'hour-24': (s) => s.hour24(),\n  'hour-24-pad': (s) => zeroPad(s.hour24()),\n\n  minute: (s) => s.minute(),\n  'minute-pad': (s) => zeroPad(s.minute()),\n  second: (s) => s.second(),\n  'second-pad': (s) => zeroPad(s.second()),\n  millisecond: (s) => s.millisecond(),\n  'millisecond-pad': (s) => zeroPad(s.millisecond(), 3),\n\n  ampm: (s) => s.ampm(),\n  quarter: (s) => 'Q' + s.quarter(),\n  season: (s) => s.season(),\n  era: (s) => s.era(),\n  json: (s) => s.json(),\n  timezone: (s) => s.timezone().name,\n  offset: (s) => isoOffset(s),\n\n  numeric: (s) => `${s.year()}/${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, // yyyy/mm/dd\n  'numeric-us': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}/${s.year()}`, // mm/dd/yyyy\n  'numeric-uk': (s) => `${zeroPad(s.date())}/${zeroPad(s.month() + 1)}/${s.year()}`, //dd/mm/yyyy\n  'mm/dd': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, //mm/dd\n\n  // ... https://en.wikipedia.org/wiki/ISO_8601 ;(((\n  iso: (s) => {\n    let year = s.format('iso-year')\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let hour = zeroPad(s.h24())\n    let minute = zeroPad(s.minute())\n    let second = zeroPad(s.second())\n    let ms = zeroPad(s.millisecond(), 3)\n    let offset = isoOffset(s)\n    return `${year}-${month}-${date}T${hour}:${minute}:${second}.${ms}${offset}` //2018-03-09T08:50:00.000-05:00\n  },\n  'iso-short': (s) => {\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let year = padYear(s.year())\n    return `${year}-${month}-${date}` //2017-02-15\n  },\n  'iso-utc': (s) => {\n    return new Date(s.epoch).toISOString() //2017-03-08T19:45:28.367Z\n  },\n\n  //i made these up\n  nice: (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-24': (s) =>\n    `${short()[s.month()]} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(\n      s.minute()\n    )}`,\n  'nice-year': (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.year()}`,\n  'nice-day': (s) =>\n    `${_short()[s.day()]} ${applyCaseFormat(short()[s.month()])} ${ordinal(\n      s.date()\n    )}`,\n  'nice-full': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-full-24': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(\n      s.date()\n    )}, ${s.hour24()}:${zeroPad(s.minute())}`\n}\n//aliases\nconst aliases = {\n  'day-name': 'day',\n  'month-name': 'month',\n  'iso 8601': 'iso',\n  'time-h24': 'time-24',\n  'time-12': 'time',\n  'time-h12': 'time',\n  tz: 'timezone',\n  'day-num': 'day-number',\n  'month-num': 'month-number',\n  'month-iso': 'iso-month',\n  'year-iso': 'iso-year',\n  'nice-short': 'nice',\n  'nice-short-24': 'nice-24',\n  mdy: 'numeric-us',\n  dmy: 'numeric-uk',\n  ymd: 'numeric',\n  'yyyy/mm/dd': 'numeric',\n  'mm/dd/yyyy': 'numeric-us',\n  'dd/mm/yyyy': 'numeric-us',\n  'little-endian': 'numeric-uk',\n  'big-endian': 'numeric',\n  'day-nice': 'nice-day'\n}\nObject.keys(aliases).forEach((k) => (format[k] = format[aliases[k]]))\n\nconst printFormat = (s, str = '') => {\n  //don't print anything if it's an invalid date\n  if (s.isValid() !== true) {\n    return ''\n  }\n  //support .format('month')\n  if (format.hasOwnProperty(str)) {\n    let out = format[str](s) || ''\n    if (str !== 'json') {\n      out = String(out)\n      if (str !== 'ampm') {\n        out = applyCaseFormat(out)\n      }\n    }\n    return out\n  }\n  //support '{hour}:{minute}' notation\n  if (str.indexOf('{') !== -1) {\n    let sections = /\\{(.+?)\\}/g\n    str = str.replace(sections, (_, fmt) => {\n      fmt = fmt.toLowerCase().trim()\n      if (format.hasOwnProperty(fmt)) {\n        let out = String(format[fmt](s))\n        if (fmt !== 'ampm') {\n          return applyCaseFormat(out)\n        }\n        return out\n      }\n      return ''\n    })\n    return str\n  }\n\n  return s.format('iso-short')\n}\nexport default printFormat\n"]},"metadata":{},"sourceType":"module"}