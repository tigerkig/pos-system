{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["E:/React/pos-system/frontend/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$componentsProp2","logger","current","unstable_registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","value","undefined","newFilterItems","filterItemOnTarget","find","columnField","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","unstable_updateControlState","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","filterModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,kCAAT,QAAmD,gCAAnD;AACA,SAASC,yBAAT,QAA0C,+CAA1C;AACA,SAASC,yBAAT,QAA0C,mBAA1C;AACA,SAASC,uBAAT,EAAkCC,mCAAlC,QAA6E,sBAA7E;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,qBAAT,EAAgCC,gCAAhC,QAAwE,+BAAxE;AACA,SAASC,4BAAT,EAAuCC,mBAAvC,EAA4DC,yBAA5D,EAAuFC,eAAvF,QAA8G,mBAA9G;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,KAA0B;AAC9D,MAAIC,IAAJ,EAAUC,kBAAV,EAA8BC,mBAA9B,EAAmDC,qBAAnD;;AAEA,QAAMC,WAAW,GAAG,CAACJ,IAAI,GAAG,CAACC,kBAAkB,GAAGH,KAAK,CAACM,WAA5B,KAA4C,IAA5C,GAAmDH,kBAAnD,GAAwE,CAACC,mBAAmB,GAAGJ,KAAK,CAACO,YAA7B,KAA8C,IAA9C,GAAqD,KAAK,CAA1D,GAA8D,CAACF,qBAAqB,GAAGD,mBAAmB,CAACI,MAA7C,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEH,qBAAqB,CAACC,WAA5O,KAA4P,IAA5P,GAAmQJ,IAAnQ,GAA0QnB,yBAAyB,EAAvT;AACA,SAAOR,QAAQ,CAAC,EAAD,EAAKwB,KAAL,EAAY;AACzBS,IAAAA,MAAM,EAAE;AACNF,MAAAA,WAAW,EAAEd,mBAAmB,CAACc,WAAD,EAAcN,KAAK,CAACS,+BAApB,EAAqDR,MAArD,CAD1B;AAENS,MAAAA,iBAAiB,EAAE,EAFb;AAGNC,MAAAA,6BAA6B,EAAE;AAHzB;AADiB,GAAZ,CAAf;AAOD,CAXM;AAYP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACX,MAAD,EAASD,KAAT,KAAmB;AAC9C,MAAIa,sBAAJ;;AAEA,QAAMC,MAAM,GAAGlC,aAAa,CAACqB,MAAD,EAAS,eAAT,CAA5B;AACAA,EAAAA,MAAM,CAACc,OAAP,CAAeC,6BAAf,CAA6C;AAC3CC,IAAAA,OAAO,EAAE,QADkC;AAE3CC,IAAAA,SAAS,EAAElB,KAAK,CAACM,WAF0B;AAG3Ca,IAAAA,YAAY,EAAEnB,KAAK,CAACoB,mBAHuB;AAI3CC,IAAAA,aAAa,EAAErC,uBAJ4B;AAK3CsC,IAAAA,WAAW,EAAE;AAL8B,GAA7C;AAOA,QAAMC,kBAAkB,GAAG/C,KAAK,CAACgD,WAAN,CAAkB,MAAM;AACjDvB,IAAAA,MAAM,CAACc,OAAP,CAAeU,QAAf,CAAwB1B,KAAK,IAAI;AAC/B,YAAMO,WAAW,GAAGtB,uBAAuB,CAACe,KAAD,EAAQE,MAAM,CAACc,OAAP,CAAeW,UAAvB,CAA3C;AACA,YAAMC,oBAAoB,GAAG3B,KAAK,CAAC4B,UAAN,KAAqBnD,uBAAuB,CAACoD,MAA7C,GAAsDtC,4BAA4B,CAACe,WAAD,EAAcL,MAAd,CAAlF,GAA0G,IAAvI;AACA,YAAM6B,eAAe,GAAG7B,MAAM,CAACc,OAAP,CAAegB,+BAAf,CAA+C,WAA/C,EAA4D;AAClFJ,QAAAA;AADkF,OAA5D,CAAxB;AAGA,aAAOpD,QAAQ,CAAC,EAAD,EAAKwB,KAAL,EAAY;AACzBS,QAAAA,MAAM,EAAEjC,QAAQ,CAAC,EAAD,EAAKwB,KAAK,CAACS,MAAX,EAAmBsB,eAAnB;AADS,OAAZ,CAAf;AAGD,KATD;AAUA7B,IAAAA,MAAM,CAACc,OAAP,CAAeiB,YAAf,CAA4B,iBAA5B;AACD,GAZ0B,EAYxB,CAAChC,KAAK,CAAC4B,UAAP,EAAmB3B,MAAnB,CAZwB,CAA3B;AAaA;AACF;AACA;;AAEE,QAAMgC,YAAY,GAAGzD,KAAK,CAACgD,WAAN,CAAkB,MAAM;AAC3CD,IAAAA,kBAAkB;AAClBtB,IAAAA,MAAM,CAACc,OAAP,CAAemB,WAAf;AACD,GAHoB,EAGlB,CAACjC,MAAD,EAASsB,kBAAT,CAHkB,CAArB;AAIA,QAAMY,gBAAgB,GAAG3D,KAAK,CAACgD,WAAN,CAAkBY,IAAI,IAAI;AACjD,UAAM9B,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;AACA,UAAMoC,KAAK,GAAG,CAAC,GAAG/B,WAAW,CAAC+B,KAAhB,CAAd;AACA,UAAMC,SAAS,GAAGD,KAAK,CAACE,SAAN,CAAgBC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBL,IAAI,CAACK,EAArD,CAAlB;;AAEA,QAAIH,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpBD,MAAAA,KAAK,CAACK,IAAN,CAAWN,IAAX;AACD,KAFD,MAEO;AACLC,MAAAA,KAAK,CAACC,SAAD,CAAL,GAAmBF,IAAnB;AACD;;AAEDnC,IAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD+B,MAAAA;AADsD,KAAlB,CAAtC,EAEI,kBAFJ;AAGD,GAdwB,EActB,CAACpC,MAAD,CAdsB,CAAzB;AAeA,QAAM2C,iBAAiB,GAAGpE,KAAK,CAACgD,WAAN,CAAkBa,KAAK,IAAI;AACnD,UAAM/B,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;AACA,UAAM4C,aAAa,GAAG,CAAC,GAAGvC,WAAW,CAAC+B,KAAhB,CAAtB;AACAA,IAAAA,KAAK,CAACS,OAAN,CAAcV,IAAI,IAAI;AACpB,YAAME,SAAS,GAAGD,KAAK,CAACE,SAAN,CAAgBC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBL,IAAI,CAACK,EAArD,CAAlB;;AAEA,UAAIH,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpBO,QAAAA,aAAa,CAACH,IAAd,CAAmBN,IAAnB;AACD,OAFD,MAEO;AACLS,QAAAA,aAAa,CAACP,SAAD,CAAb,GAA2BF,IAA3B;AACD;AACF,KARD;AASAnC,IAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD+B,MAAAA;AADsD,KAAlB,CAAtC,EAEI,mBAFJ;AAGD,GAfyB,EAevB,CAACpC,MAAD,CAfuB,CAA1B;AAgBA,QAAM8C,gBAAgB,GAAGvE,KAAK,CAACgD,WAAN,CAAkBwB,YAAY,IAAI;AACzD,UAAM1C,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;AACA,UAAMoC,KAAK,GAAG/B,WAAW,CAAC+B,KAAZ,CAAkB7B,MAAlB,CAAyB4B,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYO,YAAY,CAACP,EAA1D,CAAd;;AAEA,QAAIJ,KAAK,CAACY,MAAN,KAAiB3C,WAAW,CAAC+B,KAAZ,CAAkBY,MAAvC,EAA+C;AAC7C;AACD;;AAEDhD,IAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD+B,MAAAA;AADsD,KAAlB,CAAtC,EAEI,kBAFJ;AAGD,GAXwB,EAWtB,CAACpC,MAAD,CAXsB,CAAzB;AAYA,QAAMiD,eAAe,GAAG1E,KAAK,CAACgD,WAAN,CAAkB2B,iBAAiB,IAAI;AAC7DrC,IAAAA,MAAM,CAACsC,KAAP,CAAa,yBAAb;;AAEA,QAAID,iBAAJ,EAAuB;AACrB,YAAM7C,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;AACA,YAAMoD,oBAAoB,GAAG/C,WAAW,CAAC+B,KAAZ,CAAkB7B,MAAlB,CAAyB4B,IAAI,IAAIA,IAAI,CAACkB,KAAL,KAAeC,SAAhD,CAA7B;AACA,UAAIC,cAAJ;AACA,YAAMC,kBAAkB,GAAGJ,oBAAoB,CAACK,IAArB,CAA0BtB,IAAI,IAAIA,IAAI,CAACuB,WAAL,KAAqBR,iBAAvD,CAA3B;;AAEA,UAAIM,kBAAJ,EAAwB;AACtBD,QAAAA,cAAc,GAAGH,oBAAjB;AACD,OAFD,MAEO,IAAIrD,KAAK,CAACS,+BAAV,EAA2C;AAChD+C,QAAAA,cAAc,GAAG,CAAC9D,eAAe,CAAC;AAChCiE,UAAAA,WAAW,EAAER;AADmB,SAAD,EAE9BlD,MAF8B,CAAhB,CAAjB;AAGD,OAJM,MAIA;AACLuD,QAAAA,cAAc,GAAG,CAAC,GAAGH,oBAAJ,EAA0B3D,eAAe,CAAC;AACzDiE,UAAAA,WAAW,EAAER;AAD4C,SAAD,EAEvDlD,MAFuD,CAAzC,CAAjB;AAGD;;AAEDA,MAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD+B,QAAAA,KAAK,EAAEmB;AAD+C,OAAlB,CAAtC;AAGD;;AAEDvD,IAAAA,MAAM,CAACc,OAAP,CAAe6C,eAAf,CAA+B9E,yBAAyB,CAAC+E,OAAzD;AACD,GA3BuB,EA2BrB,CAAC5D,MAAD,EAASa,MAAT,EAAiBd,KAAK,CAACS,+BAAvB,CA3BqB,CAAxB;AA4BA,QAAMqD,eAAe,GAAGtF,KAAK,CAACgD,WAAN,CAAkB,MAAM;AAC9CV,IAAAA,MAAM,CAACsC,KAAP,CAAa,qBAAb;AACAnD,IAAAA,MAAM,CAACc,OAAP,CAAegD,eAAf;AACD,GAHuB,EAGrB,CAAC9D,MAAD,EAASa,MAAT,CAHqB,CAAxB;AAIA,QAAMkD,qBAAqB,GAAGxF,KAAK,CAACgD,WAAN,CAAkByC,YAAY,IAAI;AAC9D,UAAM3D,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;;AAEA,QAAIK,WAAW,CAAC2D,YAAZ,KAA6BA,YAAjC,EAA+C;AAC7C;AACD;;AAEDhE,IAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD2D,MAAAA;AADsD,KAAlB,CAAtC,EAEI,qBAFJ;AAGD,GAV6B,EAU3B,CAAChE,MAAD,CAV2B,CAA9B;AAWA,QAAMiE,oBAAoB,GAAG1F,KAAK,CAACgD,WAAN,CAAkB2C,MAAM,IAAI;AACvD,UAAM7D,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;;AAEA,QAAIN,WAAW,CAACW,WAAW,CAAC8D,iBAAb,EAAgCD,MAAhC,CAAf,EAAwD;AACtD;AACD;;AAEDlE,IAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD8D,MAAAA,iBAAiB,EAAE,CAAC,GAAGD,MAAJ;AADmC,KAAlB,CAAtC;AAGD,GAV4B,EAU1B,CAAClE,MAAD,CAV0B,CAA7B;AAWA,QAAM0C,cAAc,GAAGnE,KAAK,CAACgD,WAAN,CAAkB,CAAC6C,KAAD,EAAQC,MAAR,KAAmB;AAC1D,UAAMC,YAAY,GAAGvF,uBAAuB,CAACiB,MAAD,CAA5C;;AAEA,QAAIsE,YAAY,KAAKF,KAArB,EAA4B;AAC1BvD,MAAAA,MAAM,CAACsC,KAAP,CAAa,sBAAb;AACAnD,MAAAA,MAAM,CAACc,OAAP,CAAeyD,2BAAf,CAA2C,QAA3C,EAAqD/E,yBAAyB,CAAC4E,KAAD,EAAQrE,KAAK,CAACS,+BAAd,EAA+CR,MAA/C,CAA9E,EAAsIqE,MAAtI;AACArE,MAAAA,MAAM,CAACc,OAAP,CAAe0D,qBAAf;AACD;AACF,GARsB,EAQpB,CAACxE,MAAD,EAASa,MAAT,EAAiBd,KAAK,CAACS,+BAAvB,CARoB,CAAvB;AASA,QAAMiE,mBAAmB,GAAGlG,KAAK,CAACgD,WAAN,CAAkB,MAAM;AAClD,UAAMmD,iBAAiB,GAAG1F,mCAAmC,CAACgB,MAAD,CAA7D;AACA,WAAO,IAAI2E,GAAJ,CAAQD,iBAAiB,CAACE,GAAlB,CAAsBC,GAAG,IAAI,CAACA,GAAG,CAACrC,EAAL,EAASqC,GAAG,CAACT,KAAb,CAA7B,CAAR,CAAP;AACD,GAH2B,EAGzB,CAACpE,MAAD,CAHyB,CAA5B;AAIA,QAAM8E,SAAS,GAAG;AAChBf,IAAAA,qBADgB;AAEhBS,IAAAA,qBAAqB,EAAExC,YAFP;AAGhBc,IAAAA,gBAHgB;AAIhBZ,IAAAA,gBAJgB;AAKhBS,IAAAA,iBALgB;AAMhBD,IAAAA,cANgB;AAOhBO,IAAAA,eAPgB;AAQhBY,IAAAA,eARgB;AAShBY,IAAAA,mBATgB;AAUhBR,IAAAA;AAVgB,GAAlB;AAYAvF,EAAAA,gBAAgB,CAACsB,MAAD,EAAS8E,SAAT,EAAoB,eAApB,CAAhB;AACA;AACF;AACA;;AAEE,QAAMC,wBAAwB,GAAGxG,KAAK,CAACgD,WAAN,CAAkByD,SAAS,IAAI;AAC9D,UAAMC,mBAAmB,GAAGlG,uBAAuB,CAACiB,MAAD,CAAnD;;AAEA,QAAIiF,mBAAmB,CAAC7C,KAApB,CAA0BY,MAA1B,KAAqC,CAArC,IAA0CiC,mBAAmB,CAACjB,YAApB,KAAqClF,yBAAyB,GAAGkF,YAA/G,EAA6H;AAC3H,aAAOgB,SAAP;AACD;;AAED,WAAO1G,QAAQ,CAAC,EAAD,EAAK0G,SAAL,EAAgB;AAC7BzE,MAAAA,MAAM,EAAE;AACNF,QAAAA,WAAW,EAAE4E;AADP;AADqB,KAAhB,CAAf;AAKD,GAZgC,EAY9B,CAACjF,MAAD,CAZ8B,CAAjC;AAaA,QAAMkF,yBAAyB,GAAG3G,KAAK,CAACgD,WAAN,CAAkB,CAAC4D,MAAD,EAASC,OAAT,KAAqB;AACvE,QAAIC,qBAAJ;;AAEA,UAAMhF,WAAW,GAAG,CAACgF,qBAAqB,GAAGD,OAAO,CAACE,cAAR,CAAuB/E,MAAhD,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2E8E,qBAAqB,CAAChF,WAArH;;AAEA,QAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB,aAAO8E,MAAP;AACD;;AAEDnF,IAAAA,MAAM,CAACc,OAAP,CAAeyD,2BAAf,CAA2C,QAA3C,EAAqD/E,yBAAyB,CAACa,WAAD,EAAcN,KAAK,CAACS,+BAApB,EAAqDR,MAArD,CAA9E,EAA4I,cAA5I;AACA,WAAO1B,QAAQ,CAAC,EAAD,EAAK6G,MAAL,EAAa;AAC1BI,MAAAA,SAAS,EAAE,CAAC,GAAGJ,MAAM,CAACI,SAAX,EAAsBvF,MAAM,CAACc,OAAP,CAAe0D,qBAArC;AADe,KAAb,CAAf;AAGD,GAbiC,EAa/B,CAACxE,MAAD,EAASD,KAAK,CAACS,+BAAf,CAb+B,CAAlC;AAcA,QAAMgF,4BAA4B,GAAGjH,KAAK,CAACgD,WAAN,CAAkB,CAACkE,YAAD,EAAepC,KAAf,KAAyB;AAC9E,QAAIA,KAAK,KAAKxE,yBAAyB,CAAC+E,OAAxC,EAAiD;AAC/C,UAAI8B,qBAAJ;;AAEA,YAAMC,WAAW,GAAG5F,KAAK,CAAC6F,UAAN,CAAiBD,WAArC;AACA,aAAO,aAAa/F,IAAI,CAAC+F,WAAD,EAAcrH,QAAQ,CAAC,EAAD,EAAK,CAACoH,qBAAqB,GAAG3F,KAAK,CAAC8F,eAA/B,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEH,qBAAqB,CAACI,WAA9F,CAAtB,CAAxB;AACD;;AAED,WAAOL,YAAP;AACD,GAToC,EASlC,CAAC1F,KAAK,CAAC6F,UAAN,CAAiBD,WAAlB,EAA+B,CAAC/E,sBAAsB,GAAGb,KAAK,CAAC8F,eAAhC,KAAoD,IAApD,GAA2D,KAAK,CAAhE,GAAoEjF,sBAAsB,CAACkF,WAA1H,CATkC,CAArC;AAUA,QAAMC,mBAAmB,GAAGxH,KAAK,CAACgD,WAAN,CAAkB4D,MAAM,IAAI;AACtD,QAAIpF,KAAK,CAAC4B,UAAN,KAAqBnD,uBAAuB,CAACoD,MAA7C,IAAuDuD,MAAM,CAACzD,oBAAlE,EAAwF;AACtF,YAAMsE,MAAM,GAAG9G,kBAAkB,CAACc,MAAD,CAAjC;AACA,YAAMiG,kBAAkB,GAAG,EAA3B;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAAChD,MAA3B,EAAmCkD,CAAC,IAAI,CAAxC,EAA2C;AACzC,cAAMC,KAAK,GAAGH,MAAM,CAACE,CAAD,CAApB;AACAD,QAAAA,kBAAkB,CAACE,KAAD,CAAlB,GAA4BhB,MAAM,CAACzD,oBAAP,CAA4ByE,KAA5B,CAA5B;AACD;;AAED,aAAO;AACLF,QAAAA,kBADK;AAEL;AACAxF,QAAAA,iBAAiB,EAAEwF,kBAHd;AAILvF,QAAAA,6BAA6B,EAAE;AAJ1B,OAAP;AAMD;;AAED,WAAO;AACLD,MAAAA,iBAAiB,EAAE,EADd;AAELwF,MAAAA,kBAAkB,EAAE,EAFf;AAGLvF,MAAAA,6BAA6B,EAAE;AAH1B,KAAP;AAKD,GAvB2B,EAuBzB,CAACV,MAAD,EAASD,KAAK,CAAC4B,UAAf,CAvByB,CAA5B;AAwBAxC,EAAAA,4BAA4B,CAACa,MAAD,EAAS,aAAT,EAAwB+E,wBAAxB,CAA5B;AACA5F,EAAAA,4BAA4B,CAACa,MAAD,EAAS,cAAT,EAAyBkF,yBAAzB,CAA5B;AACA/F,EAAAA,4BAA4B,CAACa,MAAD,EAAS,iBAAT,EAA4BwF,4BAA5B,CAA5B;AACAnG,EAAAA,gCAAgC,CAACW,MAAD,EAASZ,qBAAT,EAAgC,WAAhC,EAA6C2G,mBAA7C,CAAhC;AACA;AACF;AACA;;AAEE,QAAMK,mBAAmB,GAAG7H,KAAK,CAACgD,WAAN,CAAkB,MAAM;AAClDV,IAAAA,MAAM,CAACsC,KAAP,CAAa,sDAAb;AACA,UAAM9C,WAAW,GAAGtB,uBAAuB,CAACiB,MAAD,CAA3C;AACA,UAAMqG,uBAAuB,GAAGzH,kCAAkC,CAACoB,MAAD,CAAlE;AACA,UAAMuD,cAAc,GAAGlD,WAAW,CAAC+B,KAAZ,CAAkB7B,MAAlB,CAAyB4B,IAAI,IAAIA,IAAI,CAACuB,WAAL,IAAoB2C,uBAAuB,CAAClE,IAAI,CAACuB,WAAN,CAA5E,CAAvB;;AAEA,QAAIH,cAAc,CAACP,MAAf,GAAwB3C,WAAW,CAAC+B,KAAZ,CAAkBY,MAA9C,EAAsD;AACpDhD,MAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8BpE,QAAQ,CAAC,EAAD,EAAK+B,WAAL,EAAkB;AACtD+B,QAAAA,KAAK,EAAEmB;AAD+C,OAAlB,CAAtC;AAGD;AACF,GAX2B,EAWzB,CAACvD,MAAD,EAASa,MAAT,CAXyB,CAA5B;AAYA,QAAMyF,6BAA6B,GAAG/H,KAAK,CAACgD,WAAN,CAAkBgF,UAAU,IAAI;AACpE,QAAIA,UAAU,KAAK,WAAnB,EAAgC;AAC9BvG,MAAAA,MAAM,CAACc,OAAP,CAAe0D,qBAAf;AACD;AACF,GAJqC,EAInC,CAACxE,MAAD,CAJmC,CAAtC,CAhP8C,CAoPhC;AACd;;AAEAvB,EAAAA,sBAAsB,CAACuB,MAAD,EAAS,SAAT,EAAoBsB,kBAApB,CAAtB;AACA7C,EAAAA,sBAAsB,CAACuB,MAAD,EAAS,oBAAT,EAA+BA,MAAM,CAACc,OAAP,CAAe0D,qBAA9C,CAAtB;AACA/F,EAAAA,sBAAsB,CAACuB,MAAD,EAAS,eAAT,EAA0BoG,mBAA1B,CAAtB;AACA3H,EAAAA,sBAAsB,CAACuB,MAAD,EAAS,+BAAT,EAA0CsG,6BAA1C,CAAtB;AACA;AACF;AACA;;AAEErH,EAAAA,cAAc,CAAC,MAAM;AACnBe,IAAAA,MAAM,CAACc,OAAP,CAAe0D,qBAAf;AACD,GAFa,CAAd;AAGA;AACF;AACA;;AAEEjG,EAAAA,KAAK,CAACiI,SAAN,CAAgB,MAAM;AACpB,QAAIzG,KAAK,CAACM,WAAN,KAAsBiD,SAA1B,EAAqC;AACnCtD,MAAAA,MAAM,CAACc,OAAP,CAAe4B,cAAf,CAA8B3C,KAAK,CAACM,WAApC;AACD;AACF,GAJD,EAIG,CAACL,MAAD,EAASa,MAAT,EAAiBd,KAAK,CAACM,WAAvB,CAJH;AAKD,CA3QM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}