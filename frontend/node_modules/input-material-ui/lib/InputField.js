"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@material-ui/core");
var lodash_1 = require("lodash");
var style = {
    height: '1.1875rem',
};
var getType = function (type) { return ((0, lodash_1.isEmpty)(type) ? 'text' : type); };
var getLabel = function (id, label, inputLabelProps) {
    if ((0, lodash_1.isEmpty)(label)) {
        return null;
    }
    if (inputLabelProps === undefined) {
        inputLabelProps = {};
    }
    return (React.createElement(core_1.InputLabel, __assign({}, inputLabelProps, { htmlFor: id }), label));
};
var getHelperText = function (helperText, helperTextProps) {
    if ((0, lodash_1.isEmpty)(helperText)) {
        return null;
    }
    if (helperTextProps === undefined) {
        helperTextProps = {};
    }
    return React.createElement(core_1.FormHelperText, __assign({}, helperTextProps), helperText);
};
var InputField = function (props) {
    var inputProps = props.inputProps
        ? props.inputProps
        : {
            inputProps: {},
        };
    return (React.createElement(core_1.FormControl, { fullWidth: true },
        getLabel(props.id, props.label, props.inputLabelProps),
        React.createElement(core_1.Input, __assign({}, inputProps, { id: props.id, inputProps: __assign(__assign({}, inputProps.inputProps), { style: style }), type: getType(props.type), placeholder: props.placeholder, value: props.value, name: (0, lodash_1.kebabCase)(props.id || props.label || props.placeholder), onFocus: props.onGotFocus, onBlur: props.onLostFocus, onChange: props.onChange, startAdornment: props.startAdornment, endAdornment: props.endAdornment })),
        getHelperText(props.helperText, props.helperTextProps)));
};
exports.default = InputField;
//# sourceMappingURL=InputField.js.map