{"ast":null,"code":"import ms from '../../data/milliseconds.js'; //basically, step-forward/backward until js Date object says we're there.\n\nconst walk = (s, n, fn, unit, previous) => {\n  let current = s.d[fn]();\n\n  if (current === n) {\n    return; //already there\n  }\n\n  let startUnit = previous === null ? null : s.d[previous]();\n  let original = s.epoch; //try to get it as close as we can\n\n  let diff = n - current;\n  s.epoch += ms[unit] * diff; //DST edge-case: if we are going many days, be a little conservative\n  // console.log(unit, diff)\n\n  if (unit === 'day') {\n    // s.epoch -= ms.minute\n    //but don't push it over a month\n    if (Math.abs(diff) > 28 && n < 28) {\n      s.epoch += ms.hour;\n    }\n  } // 1st time: oops, did we change previous unit? revert it.\n\n\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original; // s.epoch += ms[unit] * diff * 0.89 // maybe try and make it close...?\n  } //repair it if we've gone too far or something\n  //(go by half-steps, just in case)\n\n\n  const halfStep = ms[unit] / 2;\n\n  while (s.d[fn]() < n) {\n    s.epoch += halfStep;\n  }\n\n  while (s.d[fn]() > n) {\n    s.epoch -= halfStep;\n  } // 2nd time: did we change previous unit? revert it.\n\n\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original;\n  }\n}; //find the desired date by a increment/check while loop\n\n\nconst units = {\n  year: {\n    valid: n => n > -4000 && n < 4000,\n    walkTo: (s, n) => walk(s, n, 'getFullYear', 'year', null)\n  },\n  month: {\n    valid: n => n >= 0 && n <= 11,\n    walkTo: (s, n) => {\n      let d = s.d;\n      let current = d.getMonth();\n      let original = s.epoch;\n      let startUnit = d.getFullYear();\n\n      if (current === n) {\n        return;\n      } //try to get it as close as we can..\n\n\n      let diff = n - current;\n      s.epoch += ms.day * (diff * 28); //special case\n      //oops, did we change the year? revert it.\n\n      if (startUnit !== s.d.getFullYear()) {\n        s.epoch = original;\n      } //increment by day\n\n\n      while (s.d.getMonth() < n) {\n        s.epoch += ms.day;\n      }\n\n      while (s.d.getMonth() > n) {\n        s.epoch -= ms.day;\n      }\n    }\n  },\n  date: {\n    valid: n => n > 0 && n <= 31,\n    walkTo: (s, n) => walk(s, n, 'getDate', 'day', 'getMonth')\n  },\n  hour: {\n    valid: n => n >= 0 && n < 24,\n    walkTo: (s, n) => walk(s, n, 'getHours', 'hour', 'getDate')\n  },\n  minute: {\n    valid: n => n >= 0 && n < 60,\n    walkTo: (s, n) => walk(s, n, 'getMinutes', 'minute', 'getHours')\n  },\n  second: {\n    valid: n => n >= 0 && n < 60,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.seconds(n).epoch;\n    }\n  },\n  millisecond: {\n    valid: n => n >= 0 && n < 1000,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.milliseconds(n).epoch;\n    }\n  }\n};\n\nconst walkTo = (s, wants) => {\n  let keys = Object.keys(units);\n  let old = s.clone();\n\n  for (let i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    let n = wants[k];\n\n    if (n === undefined) {\n      n = old[k]();\n    }\n\n    if (typeof n === 'string') {\n      n = parseInt(n, 10);\n    } //make-sure it's valid\n\n\n    if (!units[k].valid(n)) {\n      s.epoch = null;\n\n      if (s.silent === false) {\n        console.warn('invalid ' + k + ': ' + n);\n      }\n\n      return;\n    }\n\n    units[k].walkTo(s, n);\n  }\n\n  return;\n};\n\nexport default walkTo;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/set/walk.js"],"names":["ms","walk","s","n","fn","unit","previous","current","d","startUnit","original","epoch","diff","Math","abs","hour","halfStep","units","year","valid","walkTo","month","getMonth","getFullYear","day","date","minute","second","seconds","millisecond","milliseconds","wants","keys","Object","old","clone","i","length","k","undefined","parseInt","silent","console","warn"],"mappings":"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","sourcesContent":["import ms from '../../data/milliseconds.js'\n\n//basically, step-forward/backward until js Date object says we're there.\nconst walk = (s, n, fn, unit, previous) => {\n  let current = s.d[fn]()\n  if (current === n) {\n    return //already there\n  }\n  let startUnit = previous === null ? null : s.d[previous]()\n  let original = s.epoch\n  //try to get it as close as we can\n  let diff = n - current\n  s.epoch += ms[unit] * diff\n  //DST edge-case: if we are going many days, be a little conservative\n  // console.log(unit, diff)\n  if (unit === 'day') {\n    // s.epoch -= ms.minute\n    //but don't push it over a month\n    if (Math.abs(diff) > 28 && n < 28) {\n      s.epoch += ms.hour\n    }\n  }\n  // 1st time: oops, did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n    // s.epoch += ms[unit] * diff * 0.89 // maybe try and make it close...?\n  }\n  //repair it if we've gone too far or something\n  //(go by half-steps, just in case)\n  const halfStep = ms[unit] / 2\n  while (s.d[fn]() < n) {\n    s.epoch += halfStep\n  }\n\n  while (s.d[fn]() > n) {\n    s.epoch -= halfStep\n  }\n  // 2nd time: did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n  }\n}\n//find the desired date by a increment/check while loop\nconst units = {\n  year: {\n    valid: (n) => n > -4000 && n < 4000,\n    walkTo: (s, n) => walk(s, n, 'getFullYear', 'year', null)\n  },\n  month: {\n    valid: (n) => n >= 0 && n <= 11,\n    walkTo: (s, n) => {\n      let d = s.d\n      let current = d.getMonth()\n      let original = s.epoch\n      let startUnit = d.getFullYear()\n      if (current === n) {\n        return\n      }\n      //try to get it as close as we can..\n      let diff = n - current\n      s.epoch += ms.day * (diff * 28) //special case\n      //oops, did we change the year? revert it.\n      if (startUnit !== s.d.getFullYear()) {\n        s.epoch = original\n      }\n      //increment by day\n      while (s.d.getMonth() < n) {\n        s.epoch += ms.day\n      }\n      while (s.d.getMonth() > n) {\n        s.epoch -= ms.day\n      }\n    }\n  },\n  date: {\n    valid: (n) => n > 0 && n <= 31,\n    walkTo: (s, n) => walk(s, n, 'getDate', 'day', 'getMonth')\n  },\n  hour: {\n    valid: (n) => n >= 0 && n < 24,\n    walkTo: (s, n) => walk(s, n, 'getHours', 'hour', 'getDate')\n  },\n  minute: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => walk(s, n, 'getMinutes', 'minute', 'getHours')\n  },\n  second: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.seconds(n).epoch\n    }\n  },\n  millisecond: {\n    valid: (n) => n >= 0 && n < 1000,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.milliseconds(n).epoch\n    }\n  }\n}\n\nconst walkTo = (s, wants) => {\n  let keys = Object.keys(units)\n  let old = s.clone()\n  for (let i = 0; i < keys.length; i++) {\n    let k = keys[i]\n    let n = wants[k]\n    if (n === undefined) {\n      n = old[k]()\n    }\n    if (typeof n === 'string') {\n      n = parseInt(n, 10)\n    }\n    //make-sure it's valid\n    if (!units[k].valid(n)) {\n      s.epoch = null\n      if (s.silent === false) {\n        console.warn('invalid ' + k + ': ' + n)\n      }\n      return\n    }\n    units[k].walkTo(s, n)\n  }\n  return\n}\n\nexport default walkTo\n"]},"metadata":{},"sourceType":"module"}