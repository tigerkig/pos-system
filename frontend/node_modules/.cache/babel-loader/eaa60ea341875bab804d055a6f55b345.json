{"ast":null,"code":"import { normalize } from '../fns.js';\nconst units = ['year', 'season', 'quarter', 'month', 'week', 'day', 'quarterHour', 'hour', 'minute'];\n\nconst doUnit = function (s, k) {\n  let start = s.clone().startOf(k);\n  let end = s.clone().endOf(k);\n  let duration = end.epoch - start.epoch;\n  let percent = (s.epoch - start.epoch) / duration;\n  return parseFloat(percent.toFixed(2));\n}; //how far it is along, from 0-1\n\n\nconst progress = (s, unit) => {\n  if (unit) {\n    unit = normalize(unit);\n    return doUnit(s, unit);\n  }\n\n  let obj = {};\n  units.forEach(k => {\n    obj[k] = doUnit(s, k);\n  });\n  return obj;\n};\n\nexport default progress;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/progress.js"],"names":["normalize","units","doUnit","s","k","start","clone","startOf","end","endOf","duration","epoch","percent","parseFloat","toFixed","progress","unit","obj","forEach"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,MAAMC,KAAK,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,EAA8B,OAA9B,EAAuC,MAAvC,EAA+C,KAA/C,EAAsD,aAAtD,EAAqE,MAArE,EAA6E,QAA7E,CAAd;;AAEA,MAAMC,MAAM,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC7B,MAAIC,KAAK,GAAGF,CAAC,CAACG,KAAF,GAAUC,OAAV,CAAkBH,CAAlB,CAAZ;AACA,MAAII,GAAG,GAAGL,CAAC,CAACG,KAAF,GAAUG,KAAV,CAAgBL,CAAhB,CAAV;AACA,MAAIM,QAAQ,GAAGF,GAAG,CAACG,KAAJ,GAAYN,KAAK,CAACM,KAAjC;AACA,MAAIC,OAAO,GAAG,CAACT,CAAC,CAACQ,KAAF,GAAUN,KAAK,CAACM,KAAjB,IAA0BD,QAAxC;AACA,SAAOG,UAAU,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAD,CAAjB;AACD,CAND,C,CAQA;;;AACA,MAAMC,QAAQ,GAAG,CAACZ,CAAD,EAAIa,IAAJ,KAAa;AAC5B,MAAIA,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAGhB,SAAS,CAACgB,IAAD,CAAhB;AACA,WAAOd,MAAM,CAACC,CAAD,EAAIa,IAAJ,CAAb;AACD;;AACD,MAAIC,GAAG,GAAG,EAAV;AACAhB,EAAAA,KAAK,CAACiB,OAAN,CAAcd,CAAC,IAAI;AACjBa,IAAAA,GAAG,CAACb,CAAD,CAAH,GAASF,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAf;AACD,GAFD;AAGA,SAAOa,GAAP;AACD,CAVD;;AAYA,eAAeF,QAAf","sourcesContent":["import { normalize } from '../fns.js'\nconst units = ['year', 'season', 'quarter', 'month', 'week', 'day', 'quarterHour', 'hour', 'minute']\n\nconst doUnit = function (s, k) {\n  let start = s.clone().startOf(k)\n  let end = s.clone().endOf(k)\n  let duration = end.epoch - start.epoch\n  let percent = (s.epoch - start.epoch) / duration\n  return parseFloat(percent.toFixed(2))\n}\n\n//how far it is along, from 0-1\nconst progress = (s, unit) => {\n  if (unit) {\n    unit = normalize(unit)\n    return doUnit(s, unit)\n  }\n  let obj = {}\n  units.forEach(k => {\n    obj[k] = doUnit(s, k)\n  })\n  return obj\n}\n\nexport default progress\n"]},"metadata":{},"sourceType":"module"}