{"ast":null,"code":"import monthLengths from '../../data/monthLengths.js';\nimport { isLeapYear } from '../../fns.js';\nimport { mapping } from '../../data/months.js';\nlet months = mapping();\nimport parseOffset from './parseOffset.js';\nimport parseTime from './parseTime.js'; //given a month, return whether day number exists in it\n\nconst validate = obj => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false;\n  } //support leap-year in february\n\n\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true;\n    } else {\n      return obj.date <= 28;\n    }\n  } //is this date too-big for this month?\n\n\n  let max = monthLengths[obj.month] || 0;\n\n  if (obj.date <= max) {\n    return true;\n  }\n\n  return false;\n};\n\nconst parseYear = function () {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let today = arguments.length > 1 ? arguments[1] : undefined;\n  str = str.trim(); // parse '86 shorthand\n\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''));\n\n    if (num > 50) {\n      return 1900 + num;\n    }\n\n    return 2000 + num;\n  }\n\n  let year = parseInt(str, 10); // use a given year from options.today\n\n  if (!year && today) {\n    year = today.year;\n  } // fallback to this year\n\n\n  year = year || new Date().getFullYear();\n  return year;\n};\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim();\n\n  if (str === 'sept') {\n    return months.sep;\n  }\n\n  return months[str];\n};\n\nexport { parseOffset, parseTime, parseYear, parseMonth, validate };","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/formats/_parsers.js"],"names":["monthLengths","isLeapYear","mapping","months","parseOffset","parseTime","validate","obj","hasOwnProperty","month","year","date","max","parseYear","str","today","trim","test","num","Number","replace","parseInt","Date","getFullYear","parseMonth","toLowerCase","sep"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,IAAIC,MAAM,GAAGD,OAAO,EAApB;AAEA,OAAOE,WAAP,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,gBAAtB,C,CAEA;;AACA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AACxB;AACA,MAAIP,YAAY,CAACQ,cAAb,CAA4BD,GAAG,CAACE,KAAhC,MAA2C,IAA/C,EAAqD;AACnD,WAAO,KAAP;AACD,GAJuB,CAKxB;;;AACA,MAAIF,GAAG,CAACE,KAAJ,KAAc,CAAlB,EAAqB;AACnB,QAAIR,UAAU,CAACM,GAAG,CAACG,IAAL,CAAV,IAAwBH,GAAG,CAACI,IAAJ,IAAY,EAAxC,EAA4C;AAC1C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOJ,GAAG,CAACI,IAAJ,IAAY,EAAnB;AACD;AACF,GAZuB,CAaxB;;;AACA,MAAIC,GAAG,GAAGZ,YAAY,CAACO,GAAG,CAACE,KAAL,CAAZ,IAA2B,CAArC;;AACA,MAAIF,GAAG,CAACI,IAAJ,IAAYC,GAAhB,EAAqB;AACnB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAnBD;;AAqBA,MAAMC,SAAS,GAAG,YAAqB;AAAA,MAApBC,GAAoB,uEAAd,EAAc;AAAA,MAAVC,KAAU;AACrCD,EAAAA,GAAG,GAAGA,GAAG,CAACE,IAAJ,EAAN,CADqC,CAErC;;AACA,MAAI,gBAAgBC,IAAhB,CAAqBH,GAArB,MAA8B,IAAlC,EAAwC;AACtC,QAAII,GAAG,GAAGC,MAAM,CAACL,GAAG,CAACM,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAD,CAAhB;;AACA,QAAIF,GAAG,GAAG,EAAV,EAAc;AACZ,aAAO,OAAOA,GAAd;AACD;;AACD,WAAO,OAAOA,GAAd;AACD;;AACD,MAAIR,IAAI,GAAGW,QAAQ,CAACP,GAAD,EAAM,EAAN,CAAnB,CAVqC,CAWrC;;AACA,MAAI,CAACJ,IAAD,IAASK,KAAb,EAAoB;AAClBL,IAAAA,IAAI,GAAGK,KAAK,CAACL,IAAb;AACD,GAdoC,CAerC;;;AACAA,EAAAA,IAAI,GAAGA,IAAI,IAAI,IAAIY,IAAJ,GAAWC,WAAX,EAAf;AACA,SAAOb,IAAP;AACD,CAlBD;;AAoBA,MAAMc,UAAU,GAAG,UAAUV,GAAV,EAAe;AAChCA,EAAAA,GAAG,GAAGA,GAAG,CAACW,WAAJ,GAAkBT,IAAlB,EAAN;;AACA,MAAIF,GAAG,KAAK,MAAZ,EAAoB;AAClB,WAAOX,MAAM,CAACuB,GAAd;AACD;;AACD,SAAOvB,MAAM,CAACW,GAAD,CAAb;AACD,CAND;;AAQA,SACEV,WADF,EAEEC,SAFF,EAGEQ,SAHF,EAIEW,UAJF,EAKElB,QALF","sourcesContent":["import monthLengths from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\nimport { mapping } from '../../data/months.js'\nlet months = mapping()\n\nimport parseOffset from './parseOffset.js'\nimport parseTime from './parseTime.js'\n\n//given a month, return whether day number exists in it\nconst validate = (obj) => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true\n    } else {\n      return obj.date <= 28\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0\n  if (obj.date <= max) {\n    return true\n  }\n  return false\n}\n\nconst parseYear = (str = '', today) => {\n  str = str.trim()\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''))\n    if (num > 50) {\n      return 1900 + num\n    }\n    return 2000 + num\n  }\n  let year = parseInt(str, 10)\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear()\n  return year\n}\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim()\n  if (str === 'sept') {\n    return months.sep\n  }\n  return months[str]\n}\n\nexport {\n  parseOffset,\n  parseTime,\n  parseYear,\n  parseMonth,\n  validate\n}"]},"metadata":{},"sourceType":"module"}