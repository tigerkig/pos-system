{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\pos-system\\\\main\\\\src\\\\components\\\\online\\\\currency\\\\index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AutoSuggest from 'react-autosuggest';\nimport LocaleCurrency from 'locale-currency';\nimport cc from 'country-code';\nimport _ from 'lodash';\nimport 'flag-icon-css/css/flag-icon.css';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countries = associateCurrencies(countriesWithCurrency(cc.countries));\n\nfunction associateCurrencies(countries) {\n  return _.map(countries, country => ({ ...country,\n    currencyCode: LocaleCurrency.getCurrency(country.alpha2)\n  }));\n}\n\nfunction countriesWithCurrency(countries) {\n  return _.filter(countries, country => !!LocaleCurrency.getCurrency(country.alpha2));\n}\n\nfunction stringStartsWith(s, fragment) {\n  return s.indexOf(fragment) === 0;\n}\n\nfunction stringContains(s, fragment) {\n  return s.indexOf(fragment) !== -1;\n}\n\nfunction getSuggestions() {\n  let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const value = arg.trim().toUpperCase();\n  return value === '' ? countries : _.filter(countries, country => {\n    return stringStartsWith(country.currencyCode, value) || stringContains(country.name.toUpperCase(), value);\n  });\n}\n\nfunction getSuggestionValue(country) {\n  return country.currencyCode;\n}\n\nfunction renderSuggestion(_ref) {\n  let {\n    name,\n    alpha2: countryCode,\n    currencyCode\n  } = _ref;\n  const iconClasses = classNames('flag-icon', `flag-icon-${countryCode.toLowerCase()}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: iconClasses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"country-name\",\n      children: [name, \" (\", currencyCode, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n}\n\nexport default class _class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (ev, _ref2) => {\n      let {\n        newValue\n      } = _ref2;\n      console.log(newValue);\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = _ref3 => {\n      let {\n        value\n      } = _ref3;\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (ev, _ref4) => {\n      let {\n        suggestionValue\n      } = _ref4;\n      const {\n        name\n      } = this.props; // this.props.onChange({target: {\n      // \tname,\n      // \tvalue: suggestionValue,\n      // }})\n    };\n\n    this.state = {\n      value: props.value,\n      suggestions: getSuggestions(props.value)\n    };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error);\n    console.log(info);\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const {\n      onChange,\n      name,\n      ...passProps\n    } = this.props;\n    const inputProps = { ...passProps,\n      value,\n      placeholder: \"USD or United...\",\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-currency\",\n      children: /*#__PURE__*/_jsxDEV(AutoSuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionSelected: getSuggestionValue,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        shouldRenderSuggestions: () => true,\n        onSuggestionSelected: this.onSuggestionSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n_class.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string\n};\n_class.defaultProps = {\n  value: ''\n};","map":{"version":3,"sources":["E:/React/pos-system/main/src/components/online/currency/index.js"],"names":["React","PropTypes","classNames","AutoSuggest","LocaleCurrency","cc","_","countries","associateCurrencies","countriesWithCurrency","map","country","currencyCode","getCurrency","alpha2","filter","stringStartsWith","s","fragment","indexOf","stringContains","getSuggestions","arg","value","trim","toUpperCase","name","getSuggestionValue","renderSuggestion","countryCode","iconClasses","toLowerCase","Component","constructor","props","onChange","ev","newValue","console","log","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","state","componentDidCatch","error","info","render","passProps","inputProps","placeholder","propTypes","func","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport AutoSuggest from 'react-autosuggest'\r\nimport LocaleCurrency from 'locale-currency'\r\nimport cc from 'country-code'\r\nimport _ from 'lodash'\r\n\r\nimport 'flag-icon-css/css/flag-icon.css'\r\nimport './style.css'\r\n\r\nconst countries = associateCurrencies(countriesWithCurrency(cc.countries))\r\n\r\nfunction associateCurrencies(countries) {\r\n\treturn _.map(countries, country => ({\r\n\t\t...country,\r\n\t\tcurrencyCode: LocaleCurrency.getCurrency(country.alpha2),\r\n\t}))\r\n}\r\n\r\nfunction countriesWithCurrency(countries) {\r\n\treturn _.filter(countries, country => !!LocaleCurrency.getCurrency(country.alpha2))\r\n}\r\n\r\nfunction stringStartsWith(s, fragment) {\r\n\treturn s.indexOf(fragment) === 0\r\n}\r\n\r\nfunction stringContains(s, fragment) {\r\n\treturn s.indexOf(fragment) !== -1\r\n}\r\n\r\nfunction getSuggestions(arg='') {\r\n\tconst value = arg.trim().toUpperCase()\r\n\treturn value === '' ? countries\r\n\t\t: _.filter(countries, country => {\r\n\t\t\treturn stringStartsWith(country.currencyCode, value)\r\n\t\t\t|| stringContains(country.name.toUpperCase(), value)\r\n\t\t})\r\n}\r\n\r\nfunction getSuggestionValue(country) {\r\n\treturn country.currencyCode\r\n}\r\n\r\nfunction renderSuggestion({name, alpha2: countryCode, currencyCode}) {\r\n\tconst iconClasses = classNames('flag-icon', `flag-icon-${countryCode.toLowerCase()}`)\r\n\treturn(\r\n\t\t<div className=\"inputContainer\">\r\n\t\t\t<span className={iconClasses} />\r\n\t\t\t&nbsp;<span className=\"country-name\">{name} ({currencyCode})</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default class extends React.Component {\r\n\r\n\tstatic propTypes = {\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\t\tname: PropTypes.string.isRequired,\r\n\t\tvalue: PropTypes.string,\r\n\t};\r\n\tstatic defaultProps = {\r\n\t\tvalue: '',\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.value,\r\n\t\t\tsuggestions: getSuggestions(props.value),\r\n\t\t}\r\n\t}\r\n\r\n\tonChange = (ev, { newValue }) => {\r\n          console.log(newValue)\r\n\t\tthis.setState({ value: newValue })\r\n\t}\r\n\r\n\tonSuggestionsFetchRequested = ({ value }) => {\r\n\t\tthis.setState({ suggestions: getSuggestions(value) })\r\n\t}\r\n\r\n\tonSuggestionsClearRequested = () => {\r\n\t\tthis.setState({ suggestions: [] });\r\n\t}\r\n\r\n\t// https://github.com/moroshko/react-autosuggest#onsuggestionselected-optional\r\n\tonSuggestionSelected = (ev, { suggestionValue }) => {\r\n\t\tconst { name } = this.props\r\n\t\t// this.props.onChange({target: {\r\n\t\t// \tname,\r\n\t\t// \tvalue: suggestionValue,\r\n\t\t// }})\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tconsole.log(error)\r\n\t\tconsole.log(info)\r\n\t}\r\n\r\n\trender() {\r\n\t    const { value, suggestions } = this.state\r\n\t    const { onChange, name, ...passProps } = this.props\r\n\t    const inputProps = {\r\n\t\t\t...passProps,\r\n\t\t\tvalue,\r\n\t\t\tplaceholder: \"USD or United...\",\r\n\t\t\tonChange: this.onChange,\r\n\t    }\r\n\t\treturn (\r\n\t\t\t<div className=\"select-currency\">\r\n\t\t\t\t<AutoSuggest\r\n\t\t\t\t\tsuggestions={suggestions}\r\n\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n\t\t\t\t\tgetSuggestionSelected={getSuggestionValue}\r\n\t\t\t\t\tgetSuggestionValue={getSuggestionValue}\r\n\t\t\t\t\trenderSuggestion={renderSuggestion}\r\n\t\t\t\t\tinputProps={inputProps}\r\n\t\t\t\t\tshouldRenderSuggestions={ () => true }\r\n\t\t\t\t\tonSuggestionSelected={this.onSuggestionSelected}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}