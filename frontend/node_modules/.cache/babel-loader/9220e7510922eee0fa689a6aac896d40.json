{"ast":null,"code":"import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js';\nimport { am, pm } from '../../data/ampm.js';\nimport { zeroPad } from '../../fns.js';\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = milliseconds(s, num);\n      return s;\n    }\n\n    return this.d.getMilliseconds();\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = seconds(s, num, goFwd);\n      return s;\n    }\n\n    return this.d.getSeconds();\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = minutes(s, num, goFwd);\n      return s;\n    }\n\n    return this.d.getMinutes();\n  },\n  hour: function (num, goFwd) {\n    let d = this.d;\n\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = hours(s, num, goFwd);\n      return s;\n    }\n\n    return d.getHours();\n  },\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      let minute = num % 1;\n      minute = minute * 60;\n      let hour = parseInt(num, 10);\n      s.epoch = hours(s, hour, goFwd);\n      s.epoch = minutes(s, minute, goFwd);\n      return s;\n    }\n\n    let d = this.d;\n    let hour = d.getHours();\n    let minute = d.getMinutes();\n    minute = minute / 60;\n    return hour + minute;\n  },\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d;\n\n    if (str !== undefined) {\n      let s = this.clone();\n      str = '' + str;\n      let m = str.match(/^([0-9]+)(am|pm)$/);\n\n      if (m) {\n        let hour = parseInt(m[1], 10);\n\n        if (m[2] === 'pm') {\n          hour += 12;\n        }\n\n        s.epoch = hours(s, hour, goFwd);\n      }\n\n      return s;\n    } //get the hour\n\n\n    let hour12 = d.getHours();\n\n    if (hour12 > 12) {\n      hour12 = hour12 - 12;\n    }\n\n    if (hour12 === 0) {\n      hour12 = 12;\n    }\n\n    return hour12;\n  },\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone();\n      str = str.toLowerCase().trim();\n      s.epoch = _time(s, str, goFwd);\n      return s;\n    }\n\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`;\n  },\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am();\n    let hour = this.hour();\n\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm();\n    }\n\n    if (typeof input !== 'string') {\n      return which;\n    } //okay, we're doing a setter\n\n\n    let s = this.clone();\n    input = input.toLowerCase().trim(); //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12;\n      return s.hour(hour, goFwd);\n    }\n\n    if (hour < 12 && input === 'pm') {\n      hour += 12;\n      return s.hour(hour, goFwd);\n    }\n\n    return s;\n  },\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00am',\n        breakfast: '7:00am',\n        noon: '12:00am',\n        lunch: '12:00pm',\n        afternoon: '2:00pm',\n        evening: '6:00pm',\n        dinner: '6:00pm',\n        night: '11:00pm',\n        midnight: '23:59pm'\n      };\n      let s = this.clone();\n      str = str || '';\n      str = str.toLowerCase();\n\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd);\n      }\n\n      return s;\n    }\n\n    let h = this.hour();\n\n    if (h < 6) {\n      return 'night';\n    }\n\n    if (h < 12) {\n      //until noon\n      return 'morning';\n    }\n\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon';\n    }\n\n    if (h < 22) {\n      //until 10pm\n      return 'evening';\n    }\n\n    return 'night';\n  },\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num);\n    }\n\n    return this.format('iso');\n  }\n};\nexport default methods;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/query/01-time.js"],"names":["milliseconds","seconds","minutes","hours","time","_time","am","pm","zeroPad","methods","millisecond","num","undefined","s","clone","epoch","d","getMilliseconds","second","goFwd","getSeconds","minute","getMinutes","hour","getHours","hourFloat","parseInt","hour12","str","m","match","toLowerCase","trim","h12","ampm","input","which","dayTime","times","morning","breakfast","noon","lunch","afternoon","evening","dinner","night","midnight","hasOwnProperty","h","iso","set","format"],"mappings":"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","sourcesContent":["import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js'\nimport { am, pm } from '../../data/ampm.js'\nimport { zeroPad } from '../../fns.js'\n\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = milliseconds(s, num)\n      return s\n    }\n    return this.d.getMilliseconds()\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = seconds(s, num, goFwd)\n      return s\n    }\n    return this.d.getSeconds()\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = minutes(s, num, goFwd)\n      return s\n    }\n    return this.d.getMinutes()\n  },\n  hour: function (num, goFwd) {\n    let d = this.d\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = hours(s, num, goFwd)\n      return s\n    }\n    return d.getHours()\n  },\n\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      let minute = num % 1\n      minute = minute * 60\n      let hour = parseInt(num, 10)\n      s.epoch = hours(s, hour, goFwd)\n      s.epoch = minutes(s, minute, goFwd)\n      return s\n    }\n    let d = this.d\n    let hour = d.getHours()\n    let minute = d.getMinutes()\n    minute = minute / 60\n    return hour + minute\n  },\n\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d\n    if (str !== undefined) {\n      let s = this.clone()\n      str = '' + str\n      let m = str.match(/^([0-9]+)(am|pm)$/)\n      if (m) {\n        let hour = parseInt(m[1], 10)\n        if (m[2] === 'pm') {\n          hour += 12\n        }\n        s.epoch = hours(s, hour, goFwd)\n      }\n      return s\n    }\n    //get the hour\n    let hour12 = d.getHours()\n    if (hour12 > 12) {\n      hour12 = hour12 - 12\n    }\n    if (hour12 === 0) {\n      hour12 = 12\n    }\n    return hour12\n  },\n\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase().trim()\n      s.epoch = _time(s, str, goFwd)\n      return s\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`\n  },\n\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am()\n    let hour = this.hour()\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm()\n    }\n    if (typeof input !== 'string') {\n      return which\n    }\n    //okay, we're doing a setter\n    let s = this.clone()\n    input = input.toLowerCase().trim()\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12\n      return s.hour(hour, goFwd)\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12\n      return s.hour(hour, goFwd)\n    }\n    return s\n  },\n\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00am',\n        breakfast: '7:00am',\n        noon: '12:00am',\n        lunch: '12:00pm',\n        afternoon: '2:00pm',\n        evening: '6:00pm',\n        dinner: '6:00pm',\n        night: '11:00pm',\n        midnight: '23:59pm'\n      }\n      let s = this.clone()\n      str = str || ''\n      str = str.toLowerCase()\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd)\n      }\n      return s\n    }\n    let h = this.hour()\n    if (h < 6) {\n      return 'night'\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning'\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon'\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening'\n    }\n    return 'night'\n  },\n\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num)\n    }\n    return this.format('iso')\n  }\n}\nexport default methods\n"]},"metadata":{},"sourceType":"module"}