{"ast":null,"code":"import _slicedToArray from \"E:/React/pos-system/main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"colDef\", \"id\", \"api\", \"hasFocus\", \"isEditable\", \"field\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"cellMode\", \"getValue\", \"tabIndex\", \"position\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport MenuList from '@mui/material/MenuList';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar hasActions = function hasActions(colDef) {\n  return typeof colDef.getActions === 'function';\n};\n\nvar GridActionsCell = function GridActionsCell(props) {\n  var colDef = props.colDef,\n      id = props.id,\n      hasFocus = props.hasFocus,\n      tabIndex = props.tabIndex,\n      _props$position = props.position,\n      position = _props$position === void 0 ? 'bottom-end' : _props$position,\n      focusElementRef = props.focusElementRef,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedButtonIndex = _React$useState2[0],\n      setFocusedButtonIndex = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      setOpen = _React$useState4[1];\n\n  var apiRef = useGridApiContext();\n  var rootRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  var ignoreCallToFocus = React.useRef(false);\n  var touchRippleRefs = React.useRef({});\n  var menuId = useId();\n  var buttonId = useId();\n  var rootProps = useGridRootProps();\n  React.useLayoutEffect(function () {\n    if (!hasFocus) {\n      Object.entries(touchRippleRefs.current).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            index = _ref2[0],\n            ref = _ref2[1];\n\n        ref == null ? void 0 : ref.stop({}, function () {\n          delete touchRippleRefs.current[index];\n        });\n      });\n    }\n  }, [hasFocus]);\n  React.useEffect(function () {\n    if (focusedButtonIndex < 0 || !rootRef.current) {\n      return;\n    }\n\n    if (focusedButtonIndex >= rootRef.current.children.length) {\n      return;\n    }\n\n    var child = rootRef.current.children[focusedButtonIndex];\n    child.focus();\n  }, [focusedButtonIndex]);\n  React.useEffect(function () {\n    if (!hasFocus) {\n      setFocusedButtonIndex(-1);\n      ignoreCallToFocus.current = false;\n    }\n  }, [hasFocus]);\n  React.useImperativeHandle(focusElementRef, function () {\n    return {\n      focus: function focus() {\n        // If ignoreCallToFocus is true, then one of the buttons was clicked and the focus is already set\n        if (!ignoreCallToFocus.current) {\n          setFocusedButtonIndex(0);\n        }\n      }\n    };\n  }, []);\n\n  if (!hasActions(colDef)) {\n    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');\n  }\n\n  var options = colDef.getActions(apiRef.current.getRowParams(id));\n  var iconButtons = options.filter(function (option) {\n    return !option.props.showInMenu;\n  });\n  var menuButtons = options.filter(function (option) {\n    return option.props.showInMenu;\n  });\n  var numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);\n  React.useEffect(function () {\n    if (focusedButtonIndex >= numberOfButtons) {\n      setFocusedButtonIndex(numberOfButtons - 1);\n    }\n  }, [focusedButtonIndex, numberOfButtons]);\n\n  var showMenu = function showMenu() {\n    setOpen(true);\n    setFocusedButtonIndex(numberOfButtons - 1);\n    ignoreCallToFocus.current = true;\n  };\n\n  var hideMenu = function hideMenu() {\n    setOpen(false);\n  };\n\n  var handleTouchRippleRef = function handleTouchRippleRef(index) {\n    return function (instance) {\n      touchRippleRefs.current[index] = instance;\n    };\n  };\n\n  var handleButtonClick = function handleButtonClick(index, onClick) {\n    return function (event) {\n      setFocusedButtonIndex(index);\n      ignoreCallToFocus.current = true;\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n  };\n\n  var handleRootKeyDown = function handleRootKeyDown(event) {\n    if (numberOfButtons <= 1) {\n      return;\n    }\n\n    var newIndex = focusedButtonIndex;\n\n    if (event.key === 'ArrowRight') {\n      newIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      newIndex -= 1;\n    }\n\n    if (newIndex < 0 || newIndex >= numberOfButtons) {\n      return; // We're already in the first or last item = do nothing and let the grid listen the event\n    }\n\n    if (newIndex !== focusedButtonIndex) {\n      event.preventDefault(); // Prevent scrolling\n\n      event.stopPropagation(); // Don't stop propagation for other keys, e.g. ArrowUp\n\n      setFocusedButtonIndex(newIndex);\n    }\n  };\n\n  var handleListKeyDown = function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n\n    if (['Tab', 'Enter', 'Escape'].includes(event.key)) {\n      hideMenu();\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    role: \"menu\",\n    ref: rootRef,\n    tabIndex: -1,\n    className: gridClasses.actionsCell,\n    onKeyDown: handleRootKeyDown\n  }, other, {\n    children: [iconButtons.map(function (button, index) {\n      return /*#__PURE__*/React.cloneElement(button, {\n        key: index,\n        touchRippleRef: handleTouchRippleRef(index),\n        onClick: handleButtonClick(index, button.props.onClick),\n        tabIndex: focusedButtonIndex === index ? tabIndex : -1\n      });\n    }), menuButtons.length > 0 && buttonId && /*#__PURE__*/_jsx(IconButton, {\n      ref: buttonRef,\n      id: buttonId,\n      \"aria-label\": apiRef.current.getLocaleText('actionsCellMore'),\n      \"aria-controls\": menuId,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      role: \"menuitem\",\n      size: \"small\",\n      onClick: showMenu,\n      touchRippleRef: handleTouchRippleRef(buttonId),\n      tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1,\n      children: /*#__PURE__*/_jsx(rootProps.components.MoreActionsIcon, {\n        fontSize: \"small\"\n      })\n    }), menuButtons.length > 0 && /*#__PURE__*/_jsx(GridMenu, {\n      onClickAway: hideMenu,\n      onClick: hideMenu,\n      open: open,\n      target: buttonRef.current,\n      position: position,\n      children: /*#__PURE__*/_jsx(MenuList, {\n        id: menuId,\n        className: gridClasses.menuList,\n        onKeyDown: handleListKeyDown,\n        \"aria-labelledby\": buttonId,\n        variant: \"menu\",\n        autoFocusItem: true,\n        children: menuButtons.map(function (button, index) {\n          return /*#__PURE__*/React.cloneElement(button, {\n            key: index\n          });\n        })\n      })\n    })]\n  }));\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  position: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  value: PropTypes.any\n} : void 0;\nexport { GridActionsCell };\nexport var renderActionsCell = function renderActionsCell(params) {\n  return /*#__PURE__*/_jsx(GridActionsCell, _extends({}, params));\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","IconButton","MenuList","unstable_useId","useId","gridClasses","GridMenu","useGridRootProps","useGridApiContext","jsx","_jsx","jsxs","_jsxs","hasActions","colDef","getActions","GridActionsCell","props","id","hasFocus","tabIndex","position","focusElementRef","other","useState","focusedButtonIndex","setFocusedButtonIndex","open","setOpen","apiRef","rootRef","useRef","buttonRef","ignoreCallToFocus","touchRippleRefs","menuId","buttonId","rootProps","useLayoutEffect","Object","entries","current","forEach","index","ref","stop","useEffect","children","length","child","focus","useImperativeHandle","Error","options","getRowParams","iconButtons","filter","option","showInMenu","menuButtons","numberOfButtons","showMenu","hideMenu","handleTouchRippleRef","instance","handleButtonClick","onClick","event","handleRootKeyDown","newIndex","key","preventDefault","stopPropagation","handleListKeyDown","includes","role","className","actionsCell","onKeyDown","map","button","cloneElement","touchRippleRef","getLocaleText","undefined","size","components","MoreActionsIcon","fontSize","onClickAway","target","menuList","variant","autoFocusItem","process","env","NODE_ENV","propTypes","api","any","isRequired","cellMode","oneOf","object","field","string","oneOfType","func","shape","formattedValue","getValue","bool","number","isEditable","row","rowNode","value","renderActionsCell","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colDef\", \"id\", \"api\", \"hasFocus\", \"isEditable\", \"field\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"cellMode\", \"getValue\", \"tabIndex\", \"position\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport MenuList from '@mui/material/MenuList';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst hasActions = colDef => typeof colDef.getActions === 'function';\n\nconst GridActionsCell = props => {\n  const {\n    colDef,\n    id,\n    hasFocus,\n    tabIndex,\n    position = 'bottom-end',\n    focusElementRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [focusedButtonIndex, setFocusedButtonIndex] = React.useState(-1);\n  const [open, setOpen] = React.useState(false);\n  const apiRef = useGridApiContext();\n  const rootRef = React.useRef(null);\n  const buttonRef = React.useRef(null);\n  const ignoreCallToFocus = React.useRef(false);\n  const touchRippleRefs = React.useRef({});\n  const menuId = useId();\n  const buttonId = useId();\n  const rootProps = useGridRootProps();\n  React.useLayoutEffect(() => {\n    if (!hasFocus) {\n      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {\n        ref == null ? void 0 : ref.stop({}, () => {\n          delete touchRippleRefs.current[index];\n        });\n      });\n    }\n  }, [hasFocus]);\n  React.useEffect(() => {\n    if (focusedButtonIndex < 0 || !rootRef.current) {\n      return;\n    }\n\n    if (focusedButtonIndex >= rootRef.current.children.length) {\n      return;\n    }\n\n    const child = rootRef.current.children[focusedButtonIndex];\n    child.focus();\n  }, [focusedButtonIndex]);\n  React.useEffect(() => {\n    if (!hasFocus) {\n      setFocusedButtonIndex(-1);\n      ignoreCallToFocus.current = false;\n    }\n  }, [hasFocus]);\n  React.useImperativeHandle(focusElementRef, () => ({\n    focus() {\n      // If ignoreCallToFocus is true, then one of the buttons was clicked and the focus is already set\n      if (!ignoreCallToFocus.current) {\n        setFocusedButtonIndex(0);\n      }\n    }\n\n  }), []);\n\n  if (!hasActions(colDef)) {\n    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');\n  }\n\n  const options = colDef.getActions(apiRef.current.getRowParams(id));\n  const iconButtons = options.filter(option => !option.props.showInMenu);\n  const menuButtons = options.filter(option => option.props.showInMenu);\n  const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);\n  React.useEffect(() => {\n    if (focusedButtonIndex >= numberOfButtons) {\n      setFocusedButtonIndex(numberOfButtons - 1);\n    }\n  }, [focusedButtonIndex, numberOfButtons]);\n\n  const showMenu = () => {\n    setOpen(true);\n    setFocusedButtonIndex(numberOfButtons - 1);\n    ignoreCallToFocus.current = true;\n  };\n\n  const hideMenu = () => {\n    setOpen(false);\n  };\n\n  const handleTouchRippleRef = index => instance => {\n    touchRippleRefs.current[index] = instance;\n  };\n\n  const handleButtonClick = (index, onClick) => event => {\n    setFocusedButtonIndex(index);\n    ignoreCallToFocus.current = true;\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleRootKeyDown = event => {\n    if (numberOfButtons <= 1) {\n      return;\n    }\n\n    let newIndex = focusedButtonIndex;\n\n    if (event.key === 'ArrowRight') {\n      newIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      newIndex -= 1;\n    }\n\n    if (newIndex < 0 || newIndex >= numberOfButtons) {\n      return; // We're already in the first or last item = do nothing and let the grid listen the event\n    }\n\n    if (newIndex !== focusedButtonIndex) {\n      event.preventDefault(); // Prevent scrolling\n\n      event.stopPropagation(); // Don't stop propagation for other keys, e.g. ArrowUp\n\n      setFocusedButtonIndex(newIndex);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n\n    if (['Tab', 'Enter', 'Escape'].includes(event.key)) {\n      hideMenu();\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    role: \"menu\",\n    ref: rootRef,\n    tabIndex: -1,\n    className: gridClasses.actionsCell,\n    onKeyDown: handleRootKeyDown\n  }, other, {\n    children: [iconButtons.map((button, index) => /*#__PURE__*/React.cloneElement(button, {\n      key: index,\n      touchRippleRef: handleTouchRippleRef(index),\n      onClick: handleButtonClick(index, button.props.onClick),\n      tabIndex: focusedButtonIndex === index ? tabIndex : -1\n    })), menuButtons.length > 0 && buttonId && /*#__PURE__*/_jsx(IconButton, {\n      ref: buttonRef,\n      id: buttonId,\n      \"aria-label\": apiRef.current.getLocaleText('actionsCellMore'),\n      \"aria-controls\": menuId,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      role: \"menuitem\",\n      size: \"small\",\n      onClick: showMenu,\n      touchRippleRef: handleTouchRippleRef(buttonId),\n      tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1,\n      children: /*#__PURE__*/_jsx(rootProps.components.MoreActionsIcon, {\n        fontSize: \"small\"\n      })\n    }), menuButtons.length > 0 && /*#__PURE__*/_jsx(GridMenu, {\n      onClickAway: hideMenu,\n      onClick: hideMenu,\n      open: open,\n      target: buttonRef.current,\n      position: position,\n      children: /*#__PURE__*/_jsx(MenuList, {\n        id: menuId,\n        className: gridClasses.menuList,\n        onKeyDown: handleListKeyDown,\n        \"aria-labelledby\": buttonId,\n        variant: \"menu\",\n        autoFocusItem: true,\n        children: menuButtons.map((button, index) => /*#__PURE__*/React.cloneElement(button, {\n          key: index\n        }))\n      })\n    })]\n  }));\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  position: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  value: PropTypes.any\n} : void 0;\nexport { GridActionsCell };\nexport const renderActionsCell = params => /*#__PURE__*/_jsx(GridActionsCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}