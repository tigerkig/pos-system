{"ast":null,"code":"import quickOffset from './timezone/quick.js';\nimport findTz from './timezone/find.js';\nimport handleInput from './input/index.js';\nimport methods from './methods.js';\nimport zones from '../zonefile/unpack.js';\nimport queryFns from './methods/query/index.js';\nimport addFns from './methods/add.js';\nimport sameFns from './methods/same.js';\nimport compareFns from './methods/compare.js';\nimport i18nFns from './methods/i18n.js';\nlet timezones = zones; //fake timezone-support, for fakers (es5 class)\n\nconst SpaceTime = function (input, tz) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  //the holy moment\n  this.epoch = null; //the shift for the given timezone\n\n  this.tz = findTz(tz, timezones); //whether to output warnings to console\n\n  this.silent = typeof options.silent !== 'undefined' ? options.silent : true; // favour british interpretation of 02/02/2018, etc\n\n  this.british = options.dmy || options.british; //does the week start on sunday, or monday:\n\n  this._weekStart = 1; //default to monday\n\n  if (options.weekStart !== undefined) {\n    this._weekStart = options.weekStart;\n  } // the reference today date object, (for testing)\n\n\n  this._today = {};\n\n  if (options.today !== undefined) {\n    this._today = options.today;\n  } // dunno if this is a good idea, or not\n  // Object.defineProperty(this, 'parsers', {\n  //   enumerable: false,\n  //   writable: true,\n  //   value: parsers\n  // })\n  //add getter/setters\n\n\n  Object.defineProperty(this, 'd', {\n    //return a js date object\n    get: function () {\n      let offset = quickOffset(this); //every computer is somewhere- get this computer's built-in offset\n\n      let bias = new Date(this.epoch).getTimezoneOffset() || 0; //movement\n\n      let shift = bias + offset * 60; //in minutes\n\n      shift = shift * 60 * 1000; //in ms\n      //remove this computer's offset\n\n      let epoch = this.epoch + shift;\n      let d = new Date(epoch);\n      return d;\n    }\n  }); //add this data on the object, to allow adding new timezones\n\n  Object.defineProperty(this, 'timezones', {\n    get: () => timezones,\n    set: obj => {\n      timezones = obj;\n      return obj;\n    }\n  }); //parse the various formats\n\n  let tmp = handleInput(this, input);\n  this.epoch = tmp.epoch;\n}; //(add instance methods to prototype)\n\n\nObject.keys(methods).forEach(k => {\n  SpaceTime.prototype[k] = methods[k];\n}); // ¯\\_(ツ)_/¯\n\nSpaceTime.prototype.clone = function () {\n  return new SpaceTime(this.epoch, this.tz, {\n    silent: this.silent,\n    weekStart: this._weekStart,\n    today: this._today,\n    parsers: this.parsers\n  });\n};\n/**\n * @deprecated use toNativeDate()\n * @returns native date object at the same epoch\n */\n\n\nSpaceTime.prototype.toLocalDate = function () {\n  return this.toNativeDate();\n};\n/**\n * @returns native date object at the same epoch\n */\n\n\nSpaceTime.prototype.toNativeDate = function () {\n  return new Date(this.epoch);\n}; //append more methods\n\n\nqueryFns(SpaceTime);\naddFns(SpaceTime);\nsameFns(SpaceTime);\ncompareFns(SpaceTime);\ni18nFns(SpaceTime);\nexport default SpaceTime;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/spacetime.js"],"names":["quickOffset","findTz","handleInput","methods","zones","queryFns","addFns","sameFns","compareFns","i18nFns","timezones","SpaceTime","input","tz","options","epoch","silent","british","dmy","_weekStart","weekStart","undefined","_today","today","Object","defineProperty","get","offset","bias","Date","getTimezoneOffset","shift","d","set","obj","tmp","keys","forEach","k","prototype","clone","parsers","toLocalDate","toNativeDate"],"mappings":"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","sourcesContent":["import quickOffset from './timezone/quick.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport methods from './methods.js'\nimport zones from '../zonefile/unpack.js'\nimport queryFns from './methods/query/index.js'\nimport addFns from './methods/add.js'\nimport sameFns from './methods/same.js'\nimport compareFns from './methods/compare.js'\nimport i18nFns from './methods/i18n.js'\n\nlet timezones = zones\n//fake timezone-support, for fakers (es5 class)\nconst SpaceTime = function (input, tz, options = {}) {\n  //the holy moment\n  this.epoch = null\n  //the shift for the given timezone\n  this.tz = findTz(tz, timezones)\n  //whether to output warnings to console\n  this.silent = typeof options.silent !== 'undefined' ? options.silent : true\n  // favour british interpretation of 02/02/2018, etc\n  this.british = options.dmy || options.british\n\n  //does the week start on sunday, or monday:\n  this._weekStart = 1 //default to monday\n  if (options.weekStart !== undefined) {\n    this._weekStart = options.weekStart\n  }\n  // the reference today date object, (for testing)\n  this._today = {}\n  if (options.today !== undefined) {\n    this._today = options.today\n  }\n  // dunno if this is a good idea, or not\n  // Object.defineProperty(this, 'parsers', {\n  //   enumerable: false,\n  //   writable: true,\n  //   value: parsers\n  // })\n  //add getter/setters\n  Object.defineProperty(this, 'd', {\n    //return a js date object\n    get: function () {\n      let offset = quickOffset(this)\n      //every computer is somewhere- get this computer's built-in offset\n      let bias = new Date(this.epoch).getTimezoneOffset() || 0\n      //movement\n      let shift = bias + offset * 60 //in minutes\n      shift = shift * 60 * 1000 //in ms\n      //remove this computer's offset\n      let epoch = this.epoch + shift\n      let d = new Date(epoch)\n      return d\n    }\n  })\n  //add this data on the object, to allow adding new timezones\n  Object.defineProperty(this, 'timezones', {\n    get: () => timezones,\n    set: (obj) => {\n      timezones = obj\n      return obj\n    }\n  })\n  //parse the various formats\n  let tmp = handleInput(this, input)\n  this.epoch = tmp.epoch\n}\n\n//(add instance methods to prototype)\nObject.keys(methods).forEach((k) => {\n  SpaceTime.prototype[k] = methods[k]\n})\n\n// ¯\\_(ツ)_/¯\nSpaceTime.prototype.clone = function () {\n  return new SpaceTime(this.epoch, this.tz, {\n    silent: this.silent,\n    weekStart: this._weekStart,\n    today: this._today,\n    parsers: this.parsers\n  })\n}\n\n/**\n * @deprecated use toNativeDate()\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toLocalDate = function () {\n  return this.toNativeDate()\n}\n\n/**\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toNativeDate = function () {\n  return new Date(this.epoch)\n}\n\n//append more methods\nqueryFns(SpaceTime)\naddFns(SpaceTime)\nsameFns(SpaceTime)\ncompareFns(SpaceTime)\ni18nFns(SpaceTime)\n\nexport default SpaceTime\n"]},"metadata":{},"sourceType":"module"}