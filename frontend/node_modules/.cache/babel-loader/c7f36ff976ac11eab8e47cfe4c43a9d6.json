{"ast":null,"code":"import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = _ref => {\n  let {\n    ids,\n    idRowsLookup,\n    idToIdLookup,\n    previousTree\n  } = _ref;\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"names":["GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","flatRowTreeCreationMethod","ids","idRowsLookup","idToIdLookup","previousTree","tree","i","length","rowId","id","depth","parent","groupingKey","groupingField","groupingName","treeDepth","useGridRowsPreProcessors","apiRef"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,gCAAhC,QAAwE,+BAAxE;;AAEA,MAAMC,yBAAyB,GAAG,QAK5B;AAAA,MAL6B;AACjCC,IAAAA,GADiC;AAEjCC,IAAAA,YAFiC;AAGjCC,IAAAA,YAHiC;AAIjCC,IAAAA;AAJiC,GAK7B;AACJ,QAAMC,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,UAAME,KAAK,GAAGP,GAAG,CAACK,CAAD,CAAjB;;AAEA,QAAIF,YAAY,IAAIA,YAAY,CAACI,KAAD,CAAhC,EAAyC;AACvCH,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAcJ,YAAY,CAACI,KAAD,CAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAc;AACZC,QAAAA,EAAE,EAAED,KADQ;AAEZE,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,MAAM,EAAE,IAHI;AAIZC,QAAAA,WAAW,EAAE,EAJD;AAKZC,QAAAA,aAAa,EAAE;AALH,OAAd;AAOD;AACF;;AAED,SAAO;AACLC,IAAAA,YAAY,EAAEhB,qBADT;AAELO,IAAAA,IAFK;AAGLU,IAAAA,SAAS,EAAE,CAHN;AAILb,IAAAA,YAJK;AAKLC,IAAAA,YALK;AAMLF,IAAAA;AANK,GAAP;AAQD,CAhCD;;AAkCA,OAAO,MAAMe,wBAAwB,GAAGC,MAAM,IAAI;AAChDlB,EAAAA,gCAAgC,CAACkB,MAAD,EAASnB,qBAAT,EAAgC,iBAAhC,EAAmDE,yBAAnD,CAAhC;AACD,CAFM","sourcesContent":["import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"]},"metadata":{},"sourceType":"module"}