{"ast":null,"code":"import tzs from '../../zonefile/unpack.js';\nimport guessTz from './guessTz.js';\nimport parseOffset from './parseOffset.js';\nconst local = guessTz(); //add all the city names by themselves\n\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || '';\n  city = city.replace(/_/g, ' ');\n  h[city] = k;\n  return h;\n}, {}); //try to match these against iana form\n\nconst normalize = tz => {\n  tz = tz.replace(/ time/g, '');\n  tz = tz.replace(/ (standard|daylight|summer)/g, '');\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1');\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1');\n  tz = tz.replace(/\\beuropean/g, 'europe');\n  tz = tz.replace(/\\islands/g, 'island');\n  return tz;\n}; // try our best to reconcile the timzone to this given string\n\n\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    return local;\n  }\n\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\");\n  }\n\n  let tz = str.trim(); // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n\n  tz = tz.toLowerCase();\n\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz;\n  } //lookup more loosely..\n\n\n  tz = normalize(tz);\n\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz;\n  } //try city-names\n\n\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz];\n  } // //try to parse '-5h'\n\n\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz);\n\n    if (id) {\n      return id;\n    }\n  }\n\n  throw new Error(\"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\");\n};\n\nexport default lookupTz;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/timezone/find.js"],"names":["tzs","guessTz","parseOffset","local","cities","Object","keys","reduce","h","k","city","split","replace","normalize","tz","lookupTz","str","zones","console","error","trim","toLowerCase","hasOwnProperty","test","id","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,0BAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,MAAMC,KAAK,GAAGF,OAAO,EAArB,C,CAEA;;AACA,MAAMG,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYN,GAAZ,EAAiBO,MAAjB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/C,MAAIC,IAAI,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,EAAa,CAAb,KAAmB,EAA9B;AACAD,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACAJ,EAAAA,CAAC,CAACE,IAAD,CAAD,GAAUD,CAAV;AACA,SAAOD,CAAP;AACD,CALc,EAKZ,EALY,CAAf,C,CAOA;;AACA,MAAMK,SAAS,GAAIC,EAAD,IAAQ;AACxBA,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,QAAX,EAAqB,EAArB,CAAL;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,8BAAX,EAA2C,EAA3C,CAAL;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,+BAAX,EAA4C,IAA5C,CAAL;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,gCAAX,EAA6C,IAA7C,CAAL;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,aAAX,EAA0B,QAA1B,CAAL;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAACF,OAAH,CAAW,WAAX,EAAwB,QAAxB,CAAL;AACA,SAAOE,EAAP;AACD,CARD,C,CAUA;;;AACA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,MAAI,CAACD,GAAL,EAAU;AACR,WAAOb,KAAP;AACD;;AACD,MAAI,OAAOa,GAAP,KAAe,QAAnB,EAA6B;AAC3BE,IAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd,EAAyDH,GAAzD,EAA8D,KAA9D;AACD;;AACD,MAAIF,EAAE,GAAGE,GAAG,CAACI,IAAJ,EAAT,CAP+B,CAQ/B;AACA;AACA;AACA;AACA;;AACAN,EAAAA,EAAE,GAAGA,EAAE,CAACO,WAAH,EAAL;;AACA,MAAIJ,KAAK,CAACK,cAAN,CAAqBR,EAArB,MAA6B,IAAjC,EAAuC;AACrC,WAAOA,EAAP;AACD,GAhB8B,CAiB/B;;;AACAA,EAAAA,EAAE,GAAGD,SAAS,CAACC,EAAD,CAAd;;AACA,MAAIG,KAAK,CAACK,cAAN,CAAqBR,EAArB,MAA6B,IAAjC,EAAuC;AACrC,WAAOA,EAAP;AACD,GArB8B,CAsB/B;;;AACA,MAAIV,MAAM,CAACkB,cAAP,CAAsBR,EAAtB,MAA8B,IAAlC,EAAwC;AACtC,WAAOV,MAAM,CAACU,EAAD,CAAb;AACD,GAzB8B,CA0B/B;;;AACA,MAAI,QAAQS,IAAR,CAAaT,EAAb,MAAqB,IAAzB,EAA+B;AAC7B,QAAIU,EAAE,GAAGtB,WAAW,CAACY,EAAD,CAApB;;AACA,QAAIU,EAAJ,EAAQ;AACN,aAAOA,EAAP;AACD;AACF;;AAED,QAAM,IAAIC,KAAJ,CACJ,6CAA6CT,GAA7C,GAAmD,sCAD/C,CAAN;AAGD,CArCD;;AAsCA,eAAeD,QAAf","sourcesContent":["import tzs from '../../zonefile/unpack.js'\nimport guessTz from './guessTz.js'\nimport parseOffset from './parseOffset.js'\nconst local = guessTz()\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || ''\n  city = city.replace(/_/g, ' ')\n  h[city] = k\n  return h\n}, {})\n\n//try to match these against iana form\nconst normalize = (tz) => {\n  tz = tz.replace(/ time/g, '')\n  tz = tz.replace(/ (standard|daylight|summer)/g, '')\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1')\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1')\n  tz = tz.replace(/\\beuropean/g, 'europe')\n  tz = tz.replace(/\\islands/g, 'island')\n  return tz\n}\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    return local\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\")\n  }\n  let tz = str.trim()\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase()\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //lookup more loosely..\n  tz = normalize(tz)\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz]\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz)\n    if (id) {\n      return id\n    }\n  }\n\n  throw new Error(\n    \"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\"\n  )\n}\nexport default lookupTz\n"]},"metadata":{},"sourceType":"module"}