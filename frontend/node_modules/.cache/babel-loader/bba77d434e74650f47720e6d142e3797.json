{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\n\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      heightProp = props.height,\n      autoHeight = props.autoHeight,\n      minHeight = props.minHeight,\n      fillHeight = props.fillHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableResizeChange = props.onTableResizeChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var tableHeight = useRef(heightProp || 0);\n  var columnCount = useRef(0);\n  var resizeObserver = useRef();\n  var containerResizeObserver = useRef();\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n\n  var getRowHeight = function getRowHeight(rowData) {\n    if (rowData === void 0) {\n      rowData = {};\n    }\n\n    return typeof rowHeight === 'function' ? rowHeight(rowData) : rowHeight;\n  };\n\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll(\".\" + (prefix === null || prefix === void 0 ? void 0 : prefix('row')))) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row, index) {\n      return getHeight(row) || getRowHeight(data === null || data === void 0 ? void 0 : data[index]);\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n    var height = fillHeight ? tableHeight.current : heightProp;\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, 'bodyHeightChanged');\n    }\n  }, [tableRef, prefix, affixHeader, headerHeight, fillHeight, heightProp, autoHeight, rowHeight, onTableScroll, onTableResizeChange]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table === null || table === void 0 ? void 0 : table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth - (autoHeight ? SCROLLBAR_WIDTH : 0);\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'bodyWidthChanged');\n    }\n  }, [autoHeight, onTableResizeChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function (nextWidth) {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'widthChanged');\n    }\n\n    setOffsetByAffix();\n  }, [onTableResizeChange, setOffsetByAffix, tableRef]);\n  var calculateTableHeight = useCallback(function (nextHeight) {\n    var prevHeight = tableHeight.current;\n\n    if (nextHeight) {\n      tableHeight.current = nextHeight;\n    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableHeight.current = getHeight(tableRef.current.parentNode);\n    }\n\n    if (prevHeight && prevHeight !== tableHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, 'heightChanged');\n    }\n  }, [onTableResizeChange, tableRef]);\n  useMount(function () {\n    var _tableRef$current;\n\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    calculateTableHeight();\n    setOffsetByAffix();\n    containerResizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableHeight(entries[0].contentRect.height);\n    });\n    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);\n    resizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableWidth(entries[0].contentRect.width);\n    });\n    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    return function () {\n      var _resizeObserver$curre, _containerResizeObser;\n\n      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();\n      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();\n    };\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableHeight();\n    calculateTableContextHeight();\n  }, [fillHeight]);\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, heightProp, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n\n  var getTableHeight = function getTableHeight() {\n    if (fillHeight) {\n      return tableHeight.current;\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {\n      return heightProp;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight.current, minHeight) : heightProp;\n  };\n\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    getTableHeight: getTableHeight,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/rsuite-table/es/utils/useTableDimension.js"],"names":["useRef","useCallback","getWidth","getHeight","getOffset","SCROLLBAR_WIDTH","ResizeObserver","useMount","useUpdateLayoutEffect","isNumberOrTrue","useTableDimension","props","data","rowHeight","tableRef","headerWrapperRef","prefix","widthProp","width","affixHeader","affixHorizontalScrollbar","headerHeight","heightProp","height","autoHeight","minHeight","fillHeight","children","expandedRowKeys","onTableResizeChange","onTableScroll","contentHeight","contentWidth","minScrollY","scrollY","scrollX","minScrollX","tableWidth","tableHeight","columnCount","resizeObserver","containerResizeObserver","headerOffset","tableOffset","getRowHeight","rowData","calculateTableContextHeight","prevContentHeight","current","table","rows","querySelectorAll","nextContentHeight","length","Array","from","map","row","index","reduce","x","y","Math","round","abs","setOffsetByAffix","headerNode","calculateTableContentWidth","prevWidth","prevColumnCount","querySelector","nextContentWidth","calculateTableWidth","nextWidth","calculateTableHeight","nextHeight","prevHeight","parentNode","_tableRef$current","entries","contentRect","observe","_resizeObserver$curre","_containerResizeObser","disconnect","setScrollY","value","setScrollX","getTableHeight","max"],"mappings":"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","sourcesContent":["import { useRef, useCallback } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      heightProp = props.height,\n      autoHeight = props.autoHeight,\n      minHeight = props.minHeight,\n      fillHeight = props.fillHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableResizeChange = props.onTableResizeChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var tableHeight = useRef(heightProp || 0);\n  var columnCount = useRef(0);\n  var resizeObserver = useRef();\n  var containerResizeObserver = useRef();\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n\n  var getRowHeight = function getRowHeight(rowData) {\n    if (rowData === void 0) {\n      rowData = {};\n    }\n\n    return typeof rowHeight === 'function' ? rowHeight(rowData) : rowHeight;\n  };\n\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll(\".\" + (prefix === null || prefix === void 0 ? void 0 : prefix('row')))) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row, index) {\n      return getHeight(row) || getRowHeight(data === null || data === void 0 ? void 0 : data[index]);\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n    var height = fillHeight ? tableHeight.current : heightProp;\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, 'bodyHeightChanged');\n    }\n  }, [tableRef, prefix, affixHeader, headerHeight, fillHeight, heightProp, autoHeight, rowHeight, onTableScroll, onTableResizeChange]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table === null || table === void 0 ? void 0 : table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth - (autoHeight ? SCROLLBAR_WIDTH : 0);\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'bodyWidthChanged');\n    }\n  }, [autoHeight, onTableResizeChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function (nextWidth) {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'widthChanged');\n    }\n\n    setOffsetByAffix();\n  }, [onTableResizeChange, setOffsetByAffix, tableRef]);\n  var calculateTableHeight = useCallback(function (nextHeight) {\n    var prevHeight = tableHeight.current;\n\n    if (nextHeight) {\n      tableHeight.current = nextHeight;\n    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableHeight.current = getHeight(tableRef.current.parentNode);\n    }\n\n    if (prevHeight && prevHeight !== tableHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, 'heightChanged');\n    }\n  }, [onTableResizeChange, tableRef]);\n  useMount(function () {\n    var _tableRef$current;\n\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    calculateTableHeight();\n    setOffsetByAffix();\n    containerResizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableHeight(entries[0].contentRect.height);\n    });\n    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);\n    resizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableWidth(entries[0].contentRect.width);\n    });\n    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    return function () {\n      var _resizeObserver$curre, _containerResizeObser;\n\n      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();\n      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();\n    };\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableHeight();\n    calculateTableContextHeight();\n  }, [fillHeight]);\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, heightProp, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n\n  var getTableHeight = function getTableHeight() {\n    if (fillHeight) {\n      return tableHeight.current;\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {\n      return heightProp;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight.current, minHeight) : heightProp;\n  };\n\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    getTableHeight: getTableHeight,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;"]},"metadata":{},"sourceType":"module"}