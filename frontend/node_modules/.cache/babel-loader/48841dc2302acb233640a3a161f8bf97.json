{"ast":null,"code":"import findTz from './find.js';\nimport inSummerTime from './summerTime.js';\n\nconst parseDst = dst => {\n  if (!dst) {\n    return [];\n  }\n\n  return dst.split('->');\n};\n\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1);\n  str = str.replace(/\\/gmt/, '/GMT');\n  str = str.replace(/[\\/_]([a-z])/gi, s => {\n    return s.toUpperCase();\n  });\n  return str;\n}; //get metadata about this timezone\n\n\nconst timezone = s => {\n  let zones = s.timezones;\n  let tz = s.tz;\n\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones);\n  }\n\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\");\n    }\n\n    return {\n      current: {\n        epochShift: 0\n      }\n    };\n  }\n\n  let found = zones[tz];\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  };\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst);\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    };\n  } //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n\n\n  let summer = found.offset; // (july)\n\n  let winter = summer; // (january) assume it's the same for now\n\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1;\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1;\n    }\n  } //find out which offset to use right now\n  //use 'summer' time july-time\n\n\n  if (result.hasDst === false) {\n    result.current.offset = summer;\n    result.current.isDST = false;\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer;\n    result.current.isDST = result.hemisphere === 'North'; //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter;\n    result.current.isDST = result.hemisphere === 'South'; //dst 'on' in summer in south\n  }\n\n  return result;\n};\n\nexport default timezone;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/timezone/index.js"],"names":["findTz","inSummerTime","parseDst","dst","split","titleCase","str","toUpperCase","substr","replace","s","timezone","zones","timezones","tz","hasOwnProperty","silent","console","warn","current","epochShift","found","result","name","hasDst","Boolean","default_offset","offset","hemisphere","hem","arr","change","start","back","summer","winter","isDST","epoch"],"mappings":"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","sourcesContent":["import findTz from './find.js'\nimport inSummerTime from './summerTime.js'\n\nconst parseDst = dst => {\n  if (!dst) {\n    return []\n  }\n  return dst.split('->')\n}\n\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1)\n  str = str.replace(/\\/gmt/, '/GMT')\n  str = str.replace(/[\\/_]([a-z])/gi, s => {\n    return s.toUpperCase()\n  })\n  return str\n}\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones\n  let tz = s.tz\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones)\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\")\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    }\n  }\n  let found = zones[tz]\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  }\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst)\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    }\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset // (july)\n  let winter = summer // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer\n    result.current.isDST = false\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer\n    result.current.isDST = result.hemisphere === 'North' //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter\n    result.current.isDST = result.hemisphere === 'South' //dst 'on' in summer in south\n  }\n  return result\n}\nexport default timezone\n"]},"metadata":{},"sourceType":"module"}