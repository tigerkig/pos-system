{"ast":null,"code":"import seasons from '../data/seasons.js';\nimport quarters from '../data/quarters.js';\nimport walkTo from './set/walk.js';\nimport { normalize } from '../fns.js';\nconst units = {\n  minute: s => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  quarterhour: s => {\n    let minute = s.minutes();\n\n    if (minute >= 45) {\n      s = s.minutes(45);\n    } else if (minute >= 30) {\n      s = s.minutes(30);\n    } else if (minute >= 15) {\n      s = s.minutes(15);\n    } else {\n      s = s.minutes(0);\n    }\n\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  hour: s => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  day: s => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  week: s => {\n    let original = s.clone();\n    s = s.day(s._weekStart); //monday\n\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week');\n    }\n\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  month: s => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  quarter: s => {\n    let q = s.quarter();\n\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      });\n    }\n\n    return s;\n  },\n  season: s => {\n    let current = s.season();\n    let hem = 'north';\n\n    if (s.hemisphere() === 'South') {\n      hem = 'south';\n    }\n\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year();\n\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1;\n        }\n\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        });\n        return s;\n      }\n    }\n\n    return s;\n  },\n  year: s => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  decade: s => {\n    s = s.startOf('year');\n    let year = s.year();\n    let decade = parseInt(year / 10, 10) * 10;\n    s = s.year(decade);\n    return s;\n  },\n  century: s => {\n    s = s.startOf('year');\n    let year = s.year(); // near 0AD goes '-1 | +1'\n\n    let decade = parseInt(year / 100, 10) * 100;\n    s = s.year(decade);\n    return s;\n  }\n};\nunits.date = units.day;\n\nconst startOf = (a, unit) => {\n  let s = a.clone();\n  unit = normalize(unit);\n\n  if (units[unit]) {\n    return units[unit](s);\n  }\n\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit);\n    return units.season(s);\n  }\n\n  return s;\n}; //piggy-backs off startOf\n\n\nconst endOf = (a, unit) => {\n  let s = a.clone();\n  unit = normalize(unit);\n\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s); // startof\n\n    s = s.add(1, unit);\n    s = s.subtract(1, 'millisecond');\n    return s;\n  }\n\n  return s;\n};\n\nexport { startOf, endOf };","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/startOf.js"],"names":["seasons","quarters","walkTo","normalize","units","minute","s","second","millisecond","quarterhour","minutes","hour","day","week","original","clone","_weekStart","isAfter","subtract","month","date","quarter","q","season","current","hem","hemisphere","i","length","year","decade","startOf","parseInt","century","a","unit","endOf","add"],"mappings":"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","sourcesContent":["import seasons from '../data/seasons.js'\nimport quarters from '../data/quarters.js'\nimport walkTo from './set/walk.js'\nimport { normalize } from '../fns.js'\n\nconst units = {\n  minute: (s) => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarterhour: (s) => {\n    let minute = s.minutes()\n    if (minute >= 45) {\n      s = s.minutes(45)\n    } else if (minute >= 30) {\n      s = s.minutes(30)\n    } else if (minute >= 15) {\n      s = s.minutes(15)\n    } else {\n      s = s.minutes(0)\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  hour: (s) => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  day: (s) => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  week: (s) => {\n    let original = s.clone()\n    s = s.day(s._weekStart) //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week')\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  month: (s) => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarter: (s) => {\n    let q = s.quarter()\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      })\n    }\n    return s\n  },\n  season: (s) => {\n    let current = s.season()\n    let hem = 'north'\n    if (s.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year()\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        })\n        return s\n      }\n    }\n    return s\n  },\n  year: (s) => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  decade: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    let decade = parseInt(year / 10, 10) * 10\n    s = s.year(decade)\n    return s\n  },\n  century: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100\n    s = s.year(decade)\n    return s\n  }\n}\nunits.date = units.day\n\nconst startOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    return units[unit](s)\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit)\n    return units.season(s)\n  }\n  return s\n}\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s) // startof\n    s = s.add(1, unit)\n    s = s.subtract(1, 'millisecond')\n    return s\n  }\n  return s\n}\nexport {\n  startOf,\n  endOf\n}\n"]},"metadata":{},"sourceType":"module"}