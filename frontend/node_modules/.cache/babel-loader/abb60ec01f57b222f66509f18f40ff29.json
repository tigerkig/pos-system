{"ast":null,"code":"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n!function (global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var iteratorSymbol = typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n\n\n  runtime.awrap = function (arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument ? Promise.resolve(value.arg).then(invokeNext, invokeThrow) : Promise.resolve(value).then(function (unwrapped) {\n        // When a yielded Promise is resolved, its final value becomes\n        // the .value of the Promise<{value,done}> result for the\n        // current iteration. If the Promise is rejected, however, the\n        // result for this iteration will be rejected with the same\n        // reason. Note that rejections of yielded Promises are not\n        // thrown back into the generator function, as is the case\n        // when an awaited Promise is rejected. This difference in\n        // behavior between yield and await is important, because it\n        // allows the consumer to decide what to do with the yielded\n        // rejection (swallow it and continue, manually .throw it back\n        // into the generator, abandon iteration, whatever). With\n        // await, by contrast, there is no opportunity to examine the\n        // rejection reason outside the generator function, so the\n        // only option is to throw it from the await expression, and\n        // let the generator function handle the exception.\n        result.value = unwrapped;\n        return result;\n      });\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return invoke(method, arg);\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : new Promise(function (resolve) {\n        resolve(callInvokeWithMethodAndArg());\n      });\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype); // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          if (method === \"return\" || method === \"throw\" && delegate.iterator[method] === undefined) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null; // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n\n            var returnMethod = delegate.iterator[\"return\"];\n\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);\n\n          if (record.type === \"throw\") {\n            context.delegate = null; // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          } // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n\n\n          method = \"next\";\n          arg = undefined;\n          var info = record.arg;\n\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            context.sent = undefined;\n          }\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function () {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n    complete: function (record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n      return ContinueSentinel;\n    }\n  };\n}( // Among the various tricks for obtaining a reference to the global\n// object, this seems to be the most reliable technique that does not\n// use indirect eval (which violates Content Security Policy).\ntypeof global === \"object\" ? global : typeof window === \"object\" ? window : typeof self === \"object\" ? self : this);","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/regenerator/runtime.js"],"names":["global","hasOwn","Object","prototype","hasOwnProperty","undefined","iteratorSymbol","Symbol","iterator","inModule","module","runtime","regeneratorRuntime","exports","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","type","call","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","AwaitArgument","AsyncIterator","invoke","result","value","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","process","domain","bind","invokeReturn","previousPromise","enqueue","callInvokeWithMethodAndArg","async","iter","next","done","state","Error","doneResult","delegate","returnMethod","record","info","resultName","nextLoc","sent","dispatchException","abrupt","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","key","reverse","length","pop","values","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","window"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAE,UAASA,MAAT,EAAiB;AACjB;;AAEA,MAAIC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA9B;AACA,MAAIC,SAAJ,CAJiB,CAIF;;AACf,MAAIC,cAAc,GAChB,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,QAAvC,IAAmD,YADrD;AAGA,MAAIC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,QAAjC;AACA,MAAIC,OAAO,GAAGX,MAAM,CAACY,kBAArB;;AACA,MAAID,OAAJ,EAAa;AACX,QAAIF,QAAJ,EAAc;AACZ;AACA;AACAC,MAAAA,MAAM,CAACG,OAAP,GAAiBF,OAAjB;AACD,KALU,CAMX;AACA;;;AACA;AACD,GAnBgB,CAqBjB;AACA;;;AACAA,EAAAA,OAAO,GAAGX,MAAM,CAACY,kBAAP,GAA4BH,QAAQ,GAAGC,MAAM,CAACG,OAAV,GAAoB,EAAlE;;AAEA,WAASC,IAAT,CAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,WAAtC,EAAmD;AACjD;AACA,QAAIC,SAAS,GAAGjB,MAAM,CAACkB,MAAP,CAAc,CAACJ,OAAO,IAAIK,SAAZ,EAAuBlB,SAArC,CAAhB;AACA,QAAImB,OAAO,GAAG,IAAIC,OAAJ,CAAYL,WAAW,IAAI,EAA3B,CAAd,CAHiD,CAKjD;AACA;;AACAC,IAAAA,SAAS,CAACK,OAAV,GAAoBC,gBAAgB,CAACV,OAAD,EAAUE,IAAV,EAAgBK,OAAhB,CAApC;AAEA,WAAOH,SAAP;AACD;;AACDR,EAAAA,OAAO,CAACG,IAAR,GAAeA,IAAf,CApCiB,CAsCjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASY,QAAT,CAAkBC,EAAlB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,QAAI;AACF,aAAO;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBD,QAAAA,GAAG,EAAEF,EAAE,CAACI,IAAH,CAAQH,GAAR,EAAaC,GAAb;AAAvB,OAAP;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,aAAO;AAAEF,QAAAA,IAAI,EAAE,OAAR;AAAiBD,QAAAA,GAAG,EAAEG;AAAtB,OAAP;AACD;AACF;;AAED,MAAIC,sBAAsB,GAAG,gBAA7B;AACA,MAAIC,sBAAsB,GAAG,gBAA7B;AACA,MAAIC,iBAAiB,GAAG,WAAxB;AACA,MAAIC,iBAAiB,GAAG,WAAxB,CA3DiB,CA6DjB;AACA;;AACA,MAAIC,gBAAgB,GAAG,EAAvB,CA/DiB,CAiEjB;AACA;AACA;AACA;;AACA,WAAShB,SAAT,GAAqB,CAAE;;AACvB,WAASiB,iBAAT,GAA6B,CAAE;;AAC/B,WAASC,0BAAT,GAAsC,CAAE;;AAExC,MAAIC,EAAE,GAAGD,0BAA0B,CAACpC,SAA3B,GAAuCkB,SAAS,CAAClB,SAA1D;AACAmC,EAAAA,iBAAiB,CAACnC,SAAlB,GAA8BqC,EAAE,CAACC,WAAH,GAAiBF,0BAA/C;AACAA,EAAAA,0BAA0B,CAACE,WAA3B,GAAyCH,iBAAzC;AACAA,EAAAA,iBAAiB,CAACI,WAAlB,GAAgC,mBAAhC,CA5EiB,CA8EjB;AACA;;AACA,WAASC,qBAAT,CAA+BxC,SAA/B,EAA0C;AACxC,KAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4ByC,OAA5B,CAAoC,UAASC,MAAT,EAAiB;AACnD1C,MAAAA,SAAS,CAAC0C,MAAD,CAAT,GAAoB,UAAShB,GAAT,EAAc;AAChC,eAAO,KAAKL,OAAL,CAAaqB,MAAb,EAAqBhB,GAArB,CAAP;AACD,OAFD;AAGD,KAJD;AAKD;;AAEDlB,EAAAA,OAAO,CAACmC,mBAAR,GAA8B,UAASC,MAAT,EAAiB;AAC7C,QAAIC,IAAI,GAAG,OAAOD,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACN,WAAlD;AACA,WAAOO,IAAI,GACPA,IAAI,KAAKV,iBAAT,IACA;AACA;AACA,KAACU,IAAI,CAACN,WAAL,IAAoBM,IAAI,CAACC,IAA1B,MAAoC,mBAJ7B,GAKP,KALJ;AAMD,GARD;;AAUAtC,EAAAA,OAAO,CAACuC,IAAR,GAAe,UAASH,MAAT,EAAiB;AAC9B,QAAI7C,MAAM,CAACiD,cAAX,EAA2B;AACzBjD,MAAAA,MAAM,CAACiD,cAAP,CAAsBJ,MAAtB,EAA8BR,0BAA9B;AACD,KAFD,MAEO;AACLQ,MAAAA,MAAM,CAACK,SAAP,GAAmBb,0BAAnB;AACD;;AACDQ,IAAAA,MAAM,CAAC5C,SAAP,GAAmBD,MAAM,CAACkB,MAAP,CAAcoB,EAAd,CAAnB;AACA,WAAOO,MAAP;AACD,GARD,CAlGiB,CA4GjB;AACA;AACA;AACA;AACA;;;AACApC,EAAAA,OAAO,CAAC0C,KAAR,GAAgB,UAASxB,GAAT,EAAc;AAC5B,WAAO,IAAIyB,aAAJ,CAAkBzB,GAAlB,CAAP;AACD,GAFD;;AAIA,WAASyB,aAAT,CAAuBzB,GAAvB,EAA4B;AAC1B,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAED,WAAS0B,aAAT,CAAuBpC,SAAvB,EAAkC;AAChC;AACA;AACA,aAASqC,MAAT,CAAgBX,MAAhB,EAAwBhB,GAAxB,EAA6B;AAC3B,UAAI4B,MAAM,GAAGtC,SAAS,CAAC0B,MAAD,CAAT,CAAkBhB,GAAlB,CAAb;AACA,UAAI6B,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,aAAOA,KAAK,YAAYJ,aAAjB,GACHK,OAAO,CAACC,OAAR,CAAgBF,KAAK,CAAC7B,GAAtB,EAA2BgC,IAA3B,CAAgCC,UAAhC,EAA4CC,WAA5C,CADG,GAEHJ,OAAO,CAACC,OAAR,CAAgBF,KAAhB,EAAuBG,IAAvB,CAA4B,UAASG,SAAT,EAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,QAAAA,MAAM,CAACC,KAAP,GAAeM,SAAf;AACA,eAAOP,MAAP;AACD,OAlBD,CAFJ;AAqBD;;AAED,QAAI,OAAOQ,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACC,MAA3C,EAAmD;AACjDV,MAAAA,MAAM,GAAGS,OAAO,CAACC,MAAR,CAAeC,IAAf,CAAoBX,MAApB,CAAT;AACD;;AAED,QAAIM,UAAU,GAAGN,MAAM,CAACW,IAAP,CAAYhD,SAAZ,EAAuB,MAAvB,CAAjB;AACA,QAAI4C,WAAW,GAAGP,MAAM,CAACW,IAAP,CAAYhD,SAAZ,EAAuB,OAAvB,CAAlB;AACA,QAAIiD,YAAY,GAAGZ,MAAM,CAACW,IAAP,CAAYhD,SAAZ,EAAuB,QAAvB,CAAnB;AACA,QAAIkD,eAAJ;;AAEA,aAASC,OAAT,CAAiBzB,MAAjB,EAAyBhB,GAAzB,EAA8B;AAC5B,eAAS0C,0BAAT,GAAsC;AACpC,eAAOf,MAAM,CAACX,MAAD,EAAShB,GAAT,CAAb;AACD;;AAED,aAAOwC,eAAe,GACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAAA,eAAe,GAAGA,eAAe,CAACR,IAAhB,CAChBU,0BADgB,EAEhB;AACA;AACAA,MAAAA,0BAJgB,CAAH,GAKX,IAAIZ,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACjCA,QAAAA,OAAO,CAACW,0BAA0B,EAA3B,CAAP;AACD,OAFG,CAlBN;AAqBD,KAhE+B,CAkEhC;AACA;;;AACA,SAAK/C,OAAL,GAAe8C,OAAf;AACD;;AAED3B,EAAAA,qBAAqB,CAACY,aAAa,CAACpD,SAAf,CAArB,CAhMiB,CAkMjB;AACA;AACA;;AACAQ,EAAAA,OAAO,CAAC6D,KAAR,GAAgB,UAASzD,OAAT,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;AAC5D,QAAIuD,IAAI,GAAG,IAAIlB,aAAJ,CACTzC,IAAI,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,WAAzB,CADK,CAAX;AAIA,WAAOP,OAAO,CAACmC,mBAAR,CAA4B9B,OAA5B,IACHyD,IADG,CACE;AADF,MAEHA,IAAI,CAACC,IAAL,GAAYb,IAAZ,CAAiB,UAASJ,MAAT,EAAiB;AAChC,aAAOA,MAAM,CAACkB,IAAP,GAAclB,MAAM,CAACC,KAArB,GAA6Be,IAAI,CAACC,IAAL,EAApC;AACD,KAFD,CAFJ;AAKD,GAVD;;AAYA,WAASjD,gBAAT,CAA0BV,OAA1B,EAAmCE,IAAnC,EAAyCK,OAAzC,EAAkD;AAChD,QAAIsD,KAAK,GAAG3C,sBAAZ;AAEA,WAAO,SAASuB,MAAT,CAAgBX,MAAhB,EAAwBhB,GAAxB,EAA6B;AAClC,UAAI+C,KAAK,KAAKzC,iBAAd,EAAiC;AAC/B,cAAM,IAAI0C,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,UAAID,KAAK,KAAKxC,iBAAd,EAAiC;AAC/B,YAAIS,MAAM,KAAK,OAAf,EAAwB;AACtB,gBAAMhB,GAAN;AACD,SAH8B,CAK/B;AACA;;;AACA,eAAOiD,UAAU,EAAjB;AACD;;AAED,aAAO,IAAP,EAAa;AACX,YAAIC,QAAQ,GAAGzD,OAAO,CAACyD,QAAvB;;AACA,YAAIA,QAAJ,EAAc;AACZ,cAAIlC,MAAM,KAAK,QAAX,IACCA,MAAM,KAAK,OAAX,IAAsBkC,QAAQ,CAACvE,QAAT,CAAkBqC,MAAlB,MAA8BxC,SADzD,EACqE;AACnE;AACA;AACAiB,YAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB,CAHmE,CAKnE;AACA;;AACA,gBAAIC,YAAY,GAAGD,QAAQ,CAACvE,QAAT,CAAkB,QAAlB,CAAnB;;AACA,gBAAIwE,YAAJ,EAAkB;AAChB,kBAAIC,MAAM,GAAGvD,QAAQ,CAACsD,YAAD,EAAeD,QAAQ,CAACvE,QAAxB,EAAkCqB,GAAlC,CAArB;;AACA,kBAAIoD,MAAM,CAACnD,IAAP,KAAgB,OAApB,EAA6B;AAC3B;AACA;AACAe,gBAAAA,MAAM,GAAG,OAAT;AACAhB,gBAAAA,GAAG,GAAGoD,MAAM,CAACpD,GAAb;AACA;AACD;AACF;;AAED,gBAAIgB,MAAM,KAAK,QAAf,EAAyB;AACvB;AACA;AACA;AACD;AACF;;AAED,cAAIoC,MAAM,GAAGvD,QAAQ,CACnBqD,QAAQ,CAACvE,QAAT,CAAkBqC,MAAlB,CADmB,EAEnBkC,QAAQ,CAACvE,QAFU,EAGnBqB,GAHmB,CAArB;;AAMA,cAAIoD,MAAM,CAACnD,IAAP,KAAgB,OAApB,EAA6B;AAC3BR,YAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB,CAD2B,CAG3B;AACA;;AACAlC,YAAAA,MAAM,GAAG,OAAT;AACAhB,YAAAA,GAAG,GAAGoD,MAAM,CAACpD,GAAb;AACA;AACD,WA1CW,CA4CZ;AACA;AACA;;;AACAgB,UAAAA,MAAM,GAAG,MAAT;AACAhB,UAAAA,GAAG,GAAGxB,SAAN;AAEA,cAAI6E,IAAI,GAAGD,MAAM,CAACpD,GAAlB;;AACA,cAAIqD,IAAI,CAACP,IAAT,EAAe;AACbrD,YAAAA,OAAO,CAACyD,QAAQ,CAACI,UAAV,CAAP,GAA+BD,IAAI,CAACxB,KAApC;AACApC,YAAAA,OAAO,CAACoD,IAAR,GAAeK,QAAQ,CAACK,OAAxB;AACD,WAHD,MAGO;AACLR,YAAAA,KAAK,GAAG1C,sBAAR;AACA,mBAAOgD,IAAP;AACD;;AAED5D,UAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB;AACD;;AAED,YAAIlC,MAAM,KAAK,MAAf,EAAuB;AACrB,cAAI+B,KAAK,KAAK1C,sBAAd,EAAsC;AACpCZ,YAAAA,OAAO,CAAC+D,IAAR,GAAexD,GAAf;AACD,WAFD,MAEO;AACLP,YAAAA,OAAO,CAAC+D,IAAR,GAAehF,SAAf;AACD;AAEF,SAPD,MAOO,IAAIwC,MAAM,KAAK,OAAf,EAAwB;AAC7B,cAAI+B,KAAK,KAAK3C,sBAAd,EAAsC;AACpC2C,YAAAA,KAAK,GAAGxC,iBAAR;AACA,kBAAMP,GAAN;AACD;;AAED,cAAIP,OAAO,CAACgE,iBAAR,CAA0BzD,GAA1B,CAAJ,EAAoC;AAClC;AACA;AACAgB,YAAAA,MAAM,GAAG,MAAT;AACAhB,YAAAA,GAAG,GAAGxB,SAAN;AACD;AAEF,SAbM,MAaA,IAAIwC,MAAM,KAAK,QAAf,EAAyB;AAC9BvB,UAAAA,OAAO,CAACiE,MAAR,CAAe,QAAf,EAAyB1D,GAAzB;AACD;;AAED+C,QAAAA,KAAK,GAAGzC,iBAAR;AAEA,YAAI8C,MAAM,GAAGvD,QAAQ,CAACX,OAAD,EAAUE,IAAV,EAAgBK,OAAhB,CAArB;;AACA,YAAI2D,MAAM,CAACnD,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACA;AACA8C,UAAAA,KAAK,GAAGtD,OAAO,CAACqD,IAAR,GACJvC,iBADI,GAEJF,sBAFJ;AAIA,cAAIgD,IAAI,GAAG;AACTxB,YAAAA,KAAK,EAAEuB,MAAM,CAACpD,GADL;AAET8C,YAAAA,IAAI,EAAErD,OAAO,CAACqD;AAFL,WAAX;;AAKA,cAAIM,MAAM,CAACpD,GAAP,KAAeQ,gBAAnB,EAAqC;AACnC,gBAAIf,OAAO,CAACyD,QAAR,IAAoBlC,MAAM,KAAK,MAAnC,EAA2C;AACzC;AACA;AACAhB,cAAAA,GAAG,GAAGxB,SAAN;AACD;AACF,WAND,MAMO;AACL,mBAAO6E,IAAP;AACD;AAEF,SAtBD,MAsBO,IAAID,MAAM,CAACnD,IAAP,KAAgB,OAApB,EAA6B;AAClC8C,UAAAA,KAAK,GAAGxC,iBAAR,CADkC,CAElC;AACA;;AACAS,UAAAA,MAAM,GAAG,OAAT;AACAhB,UAAAA,GAAG,GAAGoD,MAAM,CAACpD,GAAb;AACD;AACF;AACF,KAxID;AAyID,GA7VgB,CA+VjB;AACA;;;AACAc,EAAAA,qBAAqB,CAACH,EAAD,CAArB;;AAEAA,EAAAA,EAAE,CAAClC,cAAD,CAAF,GAAqB,YAAW;AAC9B,WAAO,IAAP;AACD,GAFD;;AAIAkC,EAAAA,EAAE,CAACgD,QAAH,GAAc,YAAW;AACvB,WAAO,oBAAP;AACD,GAFD;;AAIA,WAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,QAAIC,KAAK,GAAG;AAAEC,MAAAA,MAAM,EAAEF,IAAI,CAAC,CAAD;AAAd,KAAZ;;AAEA,QAAI,KAAKA,IAAT,EAAe;AACbC,MAAAA,KAAK,CAACE,QAAN,GAAiBH,IAAI,CAAC,CAAD,CAArB;AACD;;AAED,QAAI,KAAKA,IAAT,EAAe;AACbC,MAAAA,KAAK,CAACG,UAAN,GAAmBJ,IAAI,CAAC,CAAD,CAAvB;AACAC,MAAAA,KAAK,CAACI,QAAN,GAAiBL,IAAI,CAAC,CAAD,CAArB;AACD;;AAED,SAAKM,UAAL,CAAgBC,IAAhB,CAAqBN,KAArB;AACD;;AAED,WAASO,aAAT,CAAuBP,KAAvB,EAA8B;AAC5B,QAAIV,MAAM,GAAGU,KAAK,CAACQ,UAAN,IAAoB,EAAjC;AACAlB,IAAAA,MAAM,CAACnD,IAAP,GAAc,QAAd;AACA,WAAOmD,MAAM,CAACpD,GAAd;AACA8D,IAAAA,KAAK,CAACQ,UAAN,GAAmBlB,MAAnB;AACD;;AAED,WAAS1D,OAAT,CAAiBL,WAAjB,EAA8B;AAC5B;AACA;AACA;AACA,SAAK8E,UAAL,GAAkB,CAAC;AAAEJ,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAlB;AACA1E,IAAAA,WAAW,CAAC0B,OAAZ,CAAoB6C,YAApB,EAAkC,IAAlC;AACA,SAAKW,KAAL,CAAW,IAAX;AACD;;AAEDzF,EAAAA,OAAO,CAAC0F,IAAR,GAAe,UAASC,MAAT,EAAiB;AAC9B,QAAID,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;AACtBD,MAAAA,IAAI,CAACJ,IAAL,CAAUM,GAAV;AACD;;AACDF,IAAAA,IAAI,CAACG,OAAL,GAL8B,CAO9B;AACA;;AACA,WAAO,SAAS9B,IAAT,GAAgB;AACrB,aAAO2B,IAAI,CAACI,MAAZ,EAAoB;AAClB,YAAIF,GAAG,GAAGF,IAAI,CAACK,GAAL,EAAV;;AACA,YAAIH,GAAG,IAAID,MAAX,EAAmB;AACjB5B,UAAAA,IAAI,CAAChB,KAAL,GAAa6C,GAAb;AACA7B,UAAAA,IAAI,CAACC,IAAL,GAAY,KAAZ;AACA,iBAAOD,IAAP;AACD;AACF,OARoB,CAUrB;AACA;AACA;;;AACAA,MAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACA,aAAOD,IAAP;AACD,KAfD;AAgBD,GAzBD;;AA2BA,WAASiC,MAAT,CAAgBC,QAAhB,EAA0B;AACxB,QAAIA,QAAJ,EAAc;AACZ,UAAIC,cAAc,GAAGD,QAAQ,CAACtG,cAAD,CAA7B;;AACA,UAAIuG,cAAJ,EAAoB;AAClB,eAAOA,cAAc,CAAC9E,IAAf,CAAoB6E,QAApB,CAAP;AACD;;AAED,UAAI,OAAOA,QAAQ,CAAClC,IAAhB,KAAyB,UAA7B,EAAyC;AACvC,eAAOkC,QAAP;AACD;;AAED,UAAI,CAACE,KAAK,CAACF,QAAQ,CAACH,MAAV,CAAV,EAA6B;AAC3B,YAAIM,CAAC,GAAG,CAAC,CAAT;AAAA,YAAYrC,IAAI,GAAG,SAASA,IAAT,GAAgB;AACjC,iBAAO,EAAEqC,CAAF,GAAMH,QAAQ,CAACH,MAAtB,EAA8B;AAC5B,gBAAIxG,MAAM,CAAC8B,IAAP,CAAY6E,QAAZ,EAAsBG,CAAtB,CAAJ,EAA8B;AAC5BrC,cAAAA,IAAI,CAAChB,KAAL,GAAakD,QAAQ,CAACG,CAAD,CAArB;AACArC,cAAAA,IAAI,CAACC,IAAL,GAAY,KAAZ;AACA,qBAAOD,IAAP;AACD;AACF;;AAEDA,UAAAA,IAAI,CAAChB,KAAL,GAAarD,SAAb;AACAqE,UAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AAEA,iBAAOD,IAAP;AACD,SAbD;;AAeA,eAAOA,IAAI,CAACA,IAAL,GAAYA,IAAnB;AACD;AACF,KA7BuB,CA+BxB;;;AACA,WAAO;AAAEA,MAAAA,IAAI,EAAEI;AAAR,KAAP;AACD;;AACDnE,EAAAA,OAAO,CAACgG,MAAR,GAAiBA,MAAjB;;AAEA,WAAS7B,UAAT,GAAsB;AACpB,WAAO;AAAEpB,MAAAA,KAAK,EAAErD,SAAT;AAAoBsE,MAAAA,IAAI,EAAE;AAA1B,KAAP;AACD;;AAEDpD,EAAAA,OAAO,CAACpB,SAAR,GAAoB;AAClBsC,IAAAA,WAAW,EAAElB,OADK;AAGlB6E,IAAAA,KAAK,EAAE,UAASY,aAAT,EAAwB;AAC7B,WAAKC,IAAL,GAAY,CAAZ;AACA,WAAKvC,IAAL,GAAY,CAAZ;AACA,WAAKW,IAAL,GAAYhF,SAAZ;AACA,WAAKsE,IAAL,GAAY,KAAZ;AACA,WAAKI,QAAL,GAAgB,IAAhB;AAEA,WAAKiB,UAAL,CAAgBpD,OAAhB,CAAwBsD,aAAxB;;AAEA,UAAI,CAACc,aAAL,EAAoB;AAClB,aAAK,IAAI/D,IAAT,IAAiB,IAAjB,EAAuB;AACrB;AACA,cAAIA,IAAI,CAACiE,MAAL,CAAY,CAAZ,MAAmB,GAAnB,IACAjH,MAAM,CAAC8B,IAAP,CAAY,IAAZ,EAAkBkB,IAAlB,CADA,IAEA,CAAC6D,KAAK,CAAC,CAAC7D,IAAI,CAACkE,KAAL,CAAW,CAAX,CAAF,CAFV,EAE4B;AAC1B,iBAAKlE,IAAL,IAAa5C,SAAb;AACD;AACF;AACF;AACF,KAtBiB;AAwBlB+G,IAAAA,IAAI,EAAE,YAAW;AACf,WAAKzC,IAAL,GAAY,IAAZ;AAEA,UAAI0C,SAAS,GAAG,KAAKrB,UAAL,CAAgB,CAAhB,CAAhB;AACA,UAAIsB,UAAU,GAAGD,SAAS,CAAClB,UAA3B;;AACA,UAAImB,UAAU,CAACxF,IAAX,KAAoB,OAAxB,EAAiC;AAC/B,cAAMwF,UAAU,CAACzF,GAAjB;AACD;;AAED,aAAO,KAAK0F,IAAZ;AACD,KAlCiB;AAoClBjC,IAAAA,iBAAiB,EAAE,UAASkC,SAAT,EAAoB;AACrC,UAAI,KAAK7C,IAAT,EAAe;AACb,cAAM6C,SAAN;AACD;;AAED,UAAIlG,OAAO,GAAG,IAAd;;AACA,eAASmG,MAAT,CAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;AAC3B1C,QAAAA,MAAM,CAACnD,IAAP,GAAc,OAAd;AACAmD,QAAAA,MAAM,CAACpD,GAAP,GAAa2F,SAAb;AACAlG,QAAAA,OAAO,CAACoD,IAAR,GAAegD,GAAf;AACA,eAAO,CAAC,CAACC,MAAT;AACD;;AAED,WAAK,IAAIZ,CAAC,GAAG,KAAKf,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCM,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,YAAIpB,KAAK,GAAG,KAAKK,UAAL,CAAgBe,CAAhB,CAAZ;AACA,YAAI9B,MAAM,GAAGU,KAAK,CAACQ,UAAnB;;AAEA,YAAIR,KAAK,CAACC,MAAN,KAAiB,MAArB,EAA6B;AAC3B;AACA;AACA;AACA,iBAAO6B,MAAM,CAAC,KAAD,CAAb;AACD;;AAED,YAAI9B,KAAK,CAACC,MAAN,IAAgB,KAAKqB,IAAzB,EAA+B;AAC7B,cAAIW,QAAQ,GAAG3H,MAAM,CAAC8B,IAAP,CAAY4D,KAAZ,EAAmB,UAAnB,CAAf;AACA,cAAIkC,UAAU,GAAG5H,MAAM,CAAC8B,IAAP,CAAY4D,KAAZ,EAAmB,YAAnB,CAAjB;;AAEA,cAAIiC,QAAQ,IAAIC,UAAhB,EAA4B;AAC1B,gBAAI,KAAKZ,IAAL,GAAYtB,KAAK,CAACE,QAAtB,EAAgC;AAC9B,qBAAO4B,MAAM,CAAC9B,KAAK,CAACE,QAAP,EAAiB,IAAjB,CAAb;AACD,aAFD,MAEO,IAAI,KAAKoB,IAAL,GAAYtB,KAAK,CAACG,UAAtB,EAAkC;AACvC,qBAAO2B,MAAM,CAAC9B,KAAK,CAACG,UAAP,CAAb;AACD;AAEF,WAPD,MAOO,IAAI8B,QAAJ,EAAc;AACnB,gBAAI,KAAKX,IAAL,GAAYtB,KAAK,CAACE,QAAtB,EAAgC;AAC9B,qBAAO4B,MAAM,CAAC9B,KAAK,CAACE,QAAP,EAAiB,IAAjB,CAAb;AACD;AAEF,WALM,MAKA,IAAIgC,UAAJ,EAAgB;AACrB,gBAAI,KAAKZ,IAAL,GAAYtB,KAAK,CAACG,UAAtB,EAAkC;AAChC,qBAAO2B,MAAM,CAAC9B,KAAK,CAACG,UAAP,CAAb;AACD;AAEF,WALM,MAKA;AACL,kBAAM,IAAIjB,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF;AACF;AACF,KAtFiB;AAwFlBU,IAAAA,MAAM,EAAE,UAASzD,IAAT,EAAeD,GAAf,EAAoB;AAC1B,WAAK,IAAIkF,CAAC,GAAG,KAAKf,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCM,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,YAAIpB,KAAK,GAAG,KAAKK,UAAL,CAAgBe,CAAhB,CAAZ;;AACA,YAAIpB,KAAK,CAACC,MAAN,IAAgB,KAAKqB,IAArB,IACAhH,MAAM,CAAC8B,IAAP,CAAY4D,KAAZ,EAAmB,YAAnB,CADA,IAEA,KAAKsB,IAAL,GAAYtB,KAAK,CAACG,UAFtB,EAEkC;AAChC,cAAIgC,YAAY,GAAGnC,KAAnB;AACA;AACD;AACF;;AAED,UAAImC,YAAY,KACXhG,IAAI,KAAK,OAAT,IACAA,IAAI,KAAK,UAFE,CAAZ,IAGAgG,YAAY,CAAClC,MAAb,IAAuB/D,GAHvB,IAIAA,GAAG,IAAIiG,YAAY,CAAChC,UAJxB,EAIoC;AAClC;AACA;AACAgC,QAAAA,YAAY,GAAG,IAAf;AACD;;AAED,UAAI7C,MAAM,GAAG6C,YAAY,GAAGA,YAAY,CAAC3B,UAAhB,GAA6B,EAAtD;AACAlB,MAAAA,MAAM,CAACnD,IAAP,GAAcA,IAAd;AACAmD,MAAAA,MAAM,CAACpD,GAAP,GAAaA,GAAb;;AAEA,UAAIiG,YAAJ,EAAkB;AAChB,aAAKpD,IAAL,GAAYoD,YAAY,CAAChC,UAAzB;AACD,OAFD,MAEO;AACL,aAAKiC,QAAL,CAAc9C,MAAd;AACD;;AAED,aAAO5C,gBAAP;AACD,KAxHiB;AA0HlB0F,IAAAA,QAAQ,EAAE,UAAS9C,MAAT,EAAiBc,QAAjB,EAA2B;AACnC,UAAId,MAAM,CAACnD,IAAP,KAAgB,OAApB,EAA6B;AAC3B,cAAMmD,MAAM,CAACpD,GAAb;AACD;;AAED,UAAIoD,MAAM,CAACnD,IAAP,KAAgB,OAAhB,IACAmD,MAAM,CAACnD,IAAP,KAAgB,UADpB,EACgC;AAC9B,aAAK4C,IAAL,GAAYO,MAAM,CAACpD,GAAnB;AACD,OAHD,MAGO,IAAIoD,MAAM,CAACnD,IAAP,KAAgB,QAApB,EAA8B;AACnC,aAAKyF,IAAL,GAAYtC,MAAM,CAACpD,GAAnB;AACA,aAAK6C,IAAL,GAAY,KAAZ;AACD,OAHM,MAGA,IAAIO,MAAM,CAACnD,IAAP,KAAgB,QAAhB,IAA4BiE,QAAhC,EAA0C;AAC/C,aAAKrB,IAAL,GAAYqB,QAAZ;AACD;AACF,KAxIiB;AA0IlBiC,IAAAA,MAAM,EAAE,UAASlC,UAAT,EAAqB;AAC3B,WAAK,IAAIiB,CAAC,GAAG,KAAKf,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCM,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,YAAIpB,KAAK,GAAG,KAAKK,UAAL,CAAgBe,CAAhB,CAAZ;;AACA,YAAIpB,KAAK,CAACG,UAAN,KAAqBA,UAAzB,EAAqC;AACnC,eAAKiC,QAAL,CAAcpC,KAAK,CAACQ,UAApB,EAAgCR,KAAK,CAACI,QAAtC;AACAG,UAAAA,aAAa,CAACP,KAAD,CAAb;AACA,iBAAOtD,gBAAP;AACD;AACF;AACF,KAnJiB;AAqJlB,aAAS,UAASuD,MAAT,EAAiB;AACxB,WAAK,IAAImB,CAAC,GAAG,KAAKf,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCM,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,YAAIpB,KAAK,GAAG,KAAKK,UAAL,CAAgBe,CAAhB,CAAZ;;AACA,YAAIpB,KAAK,CAACC,MAAN,KAAiBA,MAArB,EAA6B;AAC3B,cAAIX,MAAM,GAAGU,KAAK,CAACQ,UAAnB;;AACA,cAAIlB,MAAM,CAACnD,IAAP,KAAgB,OAApB,EAA6B;AAC3B,gBAAImG,MAAM,GAAGhD,MAAM,CAACpD,GAApB;AACAqE,YAAAA,aAAa,CAACP,KAAD,CAAb;AACD;;AACD,iBAAOsC,MAAP;AACD;AACF,OAXuB,CAaxB;AACA;;;AACA,YAAM,IAAIpD,KAAJ,CAAU,uBAAV,CAAN;AACD,KArKiB;AAuKlBqD,IAAAA,aAAa,EAAE,UAAStB,QAAT,EAAmBzB,UAAnB,EAA+BC,OAA/B,EAAwC;AACrD,WAAKL,QAAL,GAAgB;AACdvE,QAAAA,QAAQ,EAAEmG,MAAM,CAACC,QAAD,CADF;AAEdzB,QAAAA,UAAU,EAAEA,UAFE;AAGdC,QAAAA,OAAO,EAAEA;AAHK,OAAhB;AAMA,aAAO/C,gBAAP;AACD;AA/KiB,GAApB;AAiLD,CA9nBA,EA+nBC;AACA;AACA;AACA,OAAOrC,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GACA,OAAOmI,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GACA,OAAOlH,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,IApoBnC,CAAD","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration. If the Promise is rejected, however, the\n            // result for this iteration will be rejected with the same\n            // reason. Note that rejections of yielded Promises are not\n            // thrown back into the generator function, as is the case\n            // when an awaited Promise is rejected. This difference in\n            // behavior between yield and await is important, because it\n            // allows the consumer to decide what to do with the yielded\n            // rejection (swallow it and continue, manually .throw it back\n            // into the generator, abandon iteration, whatever). With\n            // await, by contrast, there is no opportunity to examine the\n            // rejection reason outside the generator function, so the\n            // only option is to throw it from the await expression, and\n            // let the generator function handle the exception.\n            result.value = unwrapped;\n            return result;\n          });\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return invoke(method, arg);\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : new Promise(function (resolve) {\n          resolve(callInvokeWithMethodAndArg());\n        });\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            context.sent = undefined;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n"]},"metadata":{},"sourceType":"script"}