{"ast":null,"code":"//our conceptual 'break-points' for each unit\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}; // Expects a plural unit arg\n\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    unit = unit.slice(0, -1);\n  }\n\n  return value + ' ' + unit;\n}\n\nconst toSoft = function (diff) {\n  let rounded = null;\n  let qualified = null;\n  let abbreviated = [];\n  let englishValues = []; //go through each value and create its text-representation\n\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit]);\n\n    if (value === 0) {\n      return;\n    }\n\n    abbreviated.push(value + unit[0]);\n    const englishValue = pluralize(value, unit);\n    englishValues.push(englishValue);\n\n    if (!rounded) {\n      rounded = qualified = englishValue;\n\n      if (i > 4) {\n        return;\n      } //is it a 'almost' something, etc?\n\n\n      const nextUnit = units[i + 1];\n      const nextValue = Math.abs(diff[nextUnit]);\n\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit);\n        qualified = 'almost ' + rounded;\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = 'over ' + englishValue;\n      }\n    }\n  });\n  return {\n    qualified,\n    rounded,\n    abbreviated,\n    englishValues\n  };\n};\n\nexport default toSoft;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/since/soften.js"],"names":["qualifiers","months","almost","over","days","hours","minutes","seconds","pluralize","value","unit","slice","toSoft","diff","rounded","qualified","abbreviated","englishValues","Object","keys","forEach","i","units","Math","abs","push","englishValue","nextUnit","nextValue"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,IAAI,EAAE;AAFA,GADS;AAKjBC,EAAAA,IAAI,EAAE;AACJF,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,IAAI,EAAE;AAFF,GALW;AASjBE,EAAAA,KAAK,EAAE;AACLH,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,IAAI,EAAE;AAFD,GATU;AAajBG,EAAAA,OAAO,EAAE;AACPJ,IAAAA,MAAM,EAAE,EADD;AAEPC,IAAAA,IAAI,EAAE;AAFC,GAbQ;AAiBjBI,EAAAA,OAAO,EAAE;AACPL,IAAAA,MAAM,EAAE,EADD;AAEPC,IAAAA,IAAI,EAAE;AAFC;AAjBQ,CAAnB,C,CAuBA;;AACA,SAASK,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AAC9B,MAAID,KAAK,KAAK,CAAd,EAAiB;AACfC,IAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD;;AACD,SAAOF,KAAK,GAAG,GAAR,GAAcC,IAArB;AACD;;AAED,MAAME,MAAM,GAAG,UAAUC,IAAV,EAAgB;AAC7B,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,aAAa,GAAG,EAApB,CAJ6B,CAK7B;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,OAAlB,CAA0B,CAACV,IAAD,EAAOW,CAAP,EAAUC,KAAV,KAAoB;AAC5C,UAAMb,KAAK,GAAGc,IAAI,CAACC,GAAL,CAASX,IAAI,CAACH,IAAD,CAAb,CAAd;;AACA,QAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACD;;AACDO,IAAAA,WAAW,CAACS,IAAZ,CAAiBhB,KAAK,GAAGC,IAAI,CAAC,CAAD,CAA7B;AACA,UAAMgB,YAAY,GAAGlB,SAAS,CAACC,KAAD,EAAQC,IAAR,CAA9B;AACAO,IAAAA,aAAa,CAACQ,IAAd,CAAmBC,YAAnB;;AACA,QAAI,CAACZ,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGC,SAAS,GAAGW,YAAtB;;AACA,UAAIL,CAAC,GAAG,CAAR,EAAW;AACT;AACD,OAJW,CAKZ;;;AACA,YAAMM,QAAQ,GAAGL,KAAK,CAACD,CAAC,GAAG,CAAL,CAAtB;AACA,YAAMO,SAAS,GAAGL,IAAI,CAACC,GAAL,CAASX,IAAI,CAACc,QAAD,CAAb,CAAlB;;AACA,UAAIC,SAAS,GAAG5B,UAAU,CAAC2B,QAAD,CAAV,CAAqBzB,MAArC,EAA6C;AAC3CY,QAAAA,OAAO,GAAGN,SAAS,CAACC,KAAK,GAAG,CAAT,EAAYC,IAAZ,CAAnB;AACAK,QAAAA,SAAS,GAAG,YAAYD,OAAxB;AACD,OAHD,MAGO,IAAIc,SAAS,GAAG5B,UAAU,CAAC2B,QAAD,CAAV,CAAqBxB,IAArC,EAA2C;AAChDY,QAAAA,SAAS,GAAG,UAAUW,YAAtB;AACD;AACF;AACF,GAvBD;AAwBA,SAAO;AAAEX,IAAAA,SAAF;AAAaD,IAAAA,OAAb;AAAsBE,IAAAA,WAAtB;AAAmCC,IAAAA;AAAnC,GAAP;AACD,CA/BD;;AAgCA,eAAeL,MAAf","sourcesContent":["//our conceptual 'break-points' for each unit\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    unit = unit.slice(0, -1)\n  }\n  return value + ' ' + unit\n}\n\nconst toSoft = function (diff) {\n  let rounded = null\n  let qualified = null\n  let abbreviated = []\n  let englishValues = []\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit])\n    if (value === 0) {\n      return\n    }\n    abbreviated.push(value + unit[0])\n    const englishValue = pluralize(value, unit)\n    englishValues.push(englishValue)\n    if (!rounded) {\n      rounded = qualified = englishValue\n      if (i > 4) {\n        return\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1]\n      const nextValue = Math.abs(diff[nextUnit])\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit)\n        qualified = 'almost ' + rounded\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = 'over ' + englishValue\n      }\n    }\n  })\n  return { qualified, rounded, abbreviated, englishValues }\n}\nexport default toSoft"]},"metadata":{},"sourceType":"module"}