{"ast":null,"code":"import { beADate, normalize } from '../../fns.js';\nimport waterfall from './waterfall.js';\n\nconst reverseDiff = function (obj) {\n  Object.keys(obj).forEach(k => {\n    obj[k] *= -1;\n  });\n  return obj;\n}; // this method counts a total # of each unit, between a, b.\n// '1 month' means 28 days in february\n// '1 year' means 366 days in a leap year\n\n\nconst main = function (a, b, unit) {\n  b = beADate(b, a); //reverse values, if necessary\n\n  let reversed = false;\n\n  if (a.isAfter(b)) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    reversed = true;\n  } //compute them all (i know!)\n\n\n  let obj = waterfall(a, b);\n\n  if (reversed) {\n    obj = reverseDiff(obj);\n  } //return just the requested unit\n\n\n  if (unit) {\n    //make sure it's plural-form\n    unit = normalize(unit);\n\n    if (/s$/.test(unit) !== true) {\n      unit += 's';\n    }\n\n    if (unit === 'dates') {\n      unit = 'days';\n    }\n\n    return obj[unit];\n  }\n\n  return obj;\n};\n\nexport default main;","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/methods/diff/index.js"],"names":["beADate","normalize","waterfall","reverseDiff","obj","Object","keys","forEach","k","main","a","b","unit","reversed","isAfter","tmp","test"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,cAAnC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,WAAW,GAAG,UAAUC,GAAV,EAAe;AACjCC,EAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAA0BC,CAAD,IAAO;AAC9BJ,IAAAA,GAAG,CAACI,CAAD,CAAH,IAAU,CAAC,CAAX;AACD,GAFD;AAGA,SAAOJ,GAAP;AACD,CALD,C,CAOA;AACA;AACA;;;AACA,MAAMK,IAAI,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,IAAhB,EAAsB;AACjCD,EAAAA,CAAC,GAAGX,OAAO,CAACW,CAAD,EAAID,CAAJ,CAAX,CADiC,CAEjC;;AACA,MAAIG,QAAQ,GAAG,KAAf;;AACA,MAAIH,CAAC,CAACI,OAAF,CAAUH,CAAV,CAAJ,EAAkB;AAChB,QAAII,GAAG,GAAGL,CAAV;AACAA,IAAAA,CAAC,GAAGC,CAAJ;AACAA,IAAAA,CAAC,GAAGI,GAAJ;AACAF,IAAAA,QAAQ,GAAG,IAAX;AACD,GATgC,CAUjC;;;AACA,MAAIT,GAAG,GAAGF,SAAS,CAACQ,CAAD,EAAIC,CAAJ,CAAnB;;AACA,MAAIE,QAAJ,EAAc;AACZT,IAAAA,GAAG,GAAGD,WAAW,CAACC,GAAD,CAAjB;AACD,GAdgC,CAejC;;;AACA,MAAIQ,IAAJ,EAAU;AACR;AACAA,IAAAA,IAAI,GAAGX,SAAS,CAACW,IAAD,CAAhB;;AACA,QAAI,KAAKI,IAAL,CAAUJ,IAAV,MAAoB,IAAxB,EAA8B;AAC5BA,MAAAA,IAAI,IAAI,GAAR;AACD;;AACD,QAAIA,IAAI,KAAK,OAAb,EAAsB;AACpBA,MAAAA,IAAI,GAAG,MAAP;AACD;;AACD,WAAOR,GAAG,CAACQ,IAAD,CAAV;AACD;;AACD,SAAOR,GAAP;AACD,CA5BD;;AA8BA,eAAeK,IAAf","sourcesContent":["import { beADate, normalize } from '../../fns.js'\nimport waterfall from './waterfall.js'\n\nconst reverseDiff = function (obj) {\n  Object.keys(obj).forEach((k) => {\n    obj[k] *= -1\n  })\n  return obj\n}\n\n// this method counts a total # of each unit, between a, b.\n// '1 month' means 28 days in february\n// '1 year' means 366 days in a leap year\nconst main = function (a, b, unit) {\n  b = beADate(b, a)\n  //reverse values, if necessary\n  let reversed = false\n  if (a.isAfter(b)) {\n    let tmp = a\n    a = b\n    b = tmp\n    reversed = true\n  }\n  //compute them all (i know!)\n  let obj = waterfall(a, b)\n  if (reversed) {\n    obj = reverseDiff(obj)\n  }\n  //return just the requested unit\n  if (unit) {\n    //make sure it's plural-form\n    unit = normalize(unit)\n    if (/s$/.test(unit) !== true) {\n      unit += 's'\n    }\n    if (unit === 'dates') {\n      unit = 'days'\n    }\n    return obj[unit]\n  }\n  return obj\n}\n\nexport default main\n"]},"metadata":{},"sourceType":"module"}