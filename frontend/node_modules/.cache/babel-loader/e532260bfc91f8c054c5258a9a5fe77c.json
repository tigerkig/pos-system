{"ast":null,"code":"const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}; //support [2016, 03, 01] format\n\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s;\n  }\n\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond'];\n\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0;\n    s = s[order[i]](num);\n  }\n\n  return s;\n}; //support {year:2016, month:3} format\n\n\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s;\n  }\n\n  obj = Object.assign({}, defaults, today, obj);\n  let keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]; //make sure we have this method\n\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue;\n    } //make sure the value is a number\n\n\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue;\n    }\n\n    let num = obj[unit] || today[unit] || defaults[unit] || 0;\n    s = s[unit](num);\n  }\n\n  return s;\n}; // this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\n\n\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000; // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.');\n    console.warn('       -   did input seconds instead of milliseconds?');\n  }\n\n  s.epoch = input;\n  return s;\n};\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n};","map":{"version":3,"sources":["E:/React/pos-system/main/node_modules/spacetime/src/input/helpers.js"],"names":["defaults","year","Date","getFullYear","month","date","parseArray","s","arr","today","length","order","i","num","parseObject","obj","Object","keys","assign","unit","undefined","parseNumber","input","minimumEpoch","silent","console","warn","epoch"],"mappings":"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","sourcesContent":["const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0\n    s = s[order[i]](num)\n  }\n  return s\n}\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s\n  }\n  obj = Object.assign({}, defaults, today, obj)\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0\n    s = s[unit](num)\n  }\n  return s\n}\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.')\n    console.warn('       -   did input seconds instead of milliseconds?')\n  }\n  s.epoch = input\n  return s\n}\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n}\n"]},"metadata":{},"sourceType":"module"}